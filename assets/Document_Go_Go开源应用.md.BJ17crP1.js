import{_ as s,c as a,o as e,a3 as n}from"./chunks/framework.zGi9i9Bf.js";const m=JSON.parse('{"title":"Go开源应用","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Go/Go开源应用.md","filePath":"Document/Go/Go开源应用.md","lastUpdated":1717759497000}'),p={name:"Document/Go/Go开源应用.md"},r=n(`<h1 id="go开源应用" tabindex="-1">Go开源应用 <a class="header-anchor" href="#go开源应用" aria-label="Permalink to &quot;Go开源应用&quot;">​</a></h1><h2 id="轻松安全地将内容从一台计算机发送到另一🐊-📦台计算机" tabindex="-1">轻松安全地将内容从一台计算机发送到另一🐊 📦台计算机 <a class="header-anchor" href="#轻松安全地将内容从一台计算机发送到另一🐊-📦台计算机" aria-label="Permalink to &quot;轻松安全地将内容从一台计算机发送到另一🐊 📦台计算机&quot;">​</a></h2><p>GitHub：<a href="https://github.com/schollz/croc" target="_blank" rel="noreferrer">schollz/croc：轻松安全地将内容从一台计算机发送到另一台计算机:p ackage： (github.com)</a></p><p>官网：<a href="https://schollz.com/tinker/croc6/" target="_blank" rel="noreferrer">https://schollz.com/tinker/croc6/</a></p><p><code>croc</code>是一种工具，允许任何两台计算机简单安全地传输文件和文件夹。<em>AFAIK，croc</em> 是唯一可以执行以下<strong>所有</strong>操作的 CLI 文件传输工具：</p><ul><li>允许<strong>任意两台计算机</strong>传输数据（使用中继）</li><li>提供<strong>端到端加密</strong>（使用 PAKE）</li><li>支持轻松<strong>的跨平台</strong>传输（Windows、Linux、Mac）</li><li>允许<strong>多个文件</strong>传输</li><li>允许<strong>恢复中断的传输</strong></li><li><strong>不需要</strong>本地服务器或端口转发</li><li><strong>IPv6 优先</strong>，带 IPv4 回退</li><li><strong>可以使用代理</strong>，如 Tor</li></ul><h2 id="webp-server-go-让站点图片加载速度更快" tabindex="-1">webp_server_go：让站点图片加载速度更快 <a class="header-anchor" href="#webp-server-go-让站点图片加载速度更快" aria-label="Permalink to &quot;webp_server_go：让站点图片加载速度更快&quot;">​</a></h2><p><strong>项目地址</strong>：<strong><a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noreferrer">https://github.com/webp-sh/webp_server_go</a></strong></p><p>WebP是一种由谷歌开发的图像格式，它具有较高的压缩率和较快的加载速度，可以在几乎不影响图像质量的前提下，显著减小文件大小。但由于浏览器兼容性等问题，不是所有的浏览器都支持 WebP。</p><p>下面分享一个基于go的实用 WebP 项目 - <code>webp_server_go</code>。</p><h3 id="项目简介" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介" aria-label="Permalink to &quot;项目简介&quot;">​</a></h3><p><code>webp_server_go</code>是一个用Golang编写的轻量级服务器，它可以根据我们自己的需求，动态地将各种格式的图片转换为WebP格式，从而提高网页加载速度和浏览体验。目前支持的图像格式包括JPEG、PNG、BMP和GIF（仅静态图像）。</p><p>此外，该服务器还支持通过配置文件进行自定义设置，如转换质量、监听主机和端口等。</p><h3 id="项目特性" tabindex="-1">项目特性 <a class="header-anchor" href="#项目特性" aria-label="Permalink to &quot;项目特性&quot;">​</a></h3><ul><li>轻量级：基于Golang开发，内存占用小，性能稳定。</li><li>高效转换：采用先进的图像处理算法，转换速度快，效率高。</li><li>自动兼容：根据客户端浏览器的类型，自动选择合适的图像格式，无需额外处理。</li><li>可扩展：支持Nginx反向代理，易于与其他服务集成。</li></ul><h3 id="项目快速使用" tabindex="-1">项目快速使用 <a class="header-anchor" href="#项目快速使用" aria-label="Permalink to &quot;项目快速使用&quot;">​</a></h3><p>项目可以采用docker或者二进制文件进行安装，</p><p>但是官方建议使用 Docker来运行安装，直接使用二进制文件运行可能会遇到与glibc和一些依赖库相关的问题，可能会非常麻烦。</p><p>Docker一键安装</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker run -d -p 3333:3333 -v /path/to/pics:/opt/pics --name webp-server webpsh/webp-server-go</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>docker-compose安装</p><p>在新建一个文件夹并在其中docker-compose.yml文件，内容如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>version: &#39;3&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  webp:</span></span>
<span class="line"><span>    image: webpsh/webp-server-go</span></span>
<span class="line"><span>    # image: ghcr.io/webp-sh/webp_server_go</span></span>
<span class="line"><span>    restart: always</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - ./path/to/pics:/opt/pics</span></span>
<span class="line"><span>      - ./exhaust:/opt/exhaust</span></span>
<span class="line"><span>      - ./metadata:/opt/metadata</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      -  127.0.0.1:3333:3333</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>假设网站的图片路径如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>图像路径：/var/www/img.webp.sh/path/tsuki.jpg</span></span>
<span class="line"><span>网站路径：https://img.webp.sh/path/tsuki.jpg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>那么，</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>./path/to/pics 修改 /var/www/img.webp.sh</span></span>
<span class="line"><span>./exhaust 是输出图像的缓存文件夹，默认情况下它位于exhaust目录中，与docker-compose.yml文件一起，如果想要将缓存图像保留在另一个文件夹中，可以将 ./exhaust 更改为 /some/other/path/to/exhaust</span></span>
<span class="line"><span>./metadata 是图像元数据的缓存文件夹，默认情况下位于metadata目录中，与docker-compose.yml文件一起</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用以下命令启动容器：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker-compose up -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>浏览器打开<code>127.0.0.1:3333</code>，访问 <code>http://127.0.0.1:3333/path/tsuki.jpg</code> 将看到<code>/var/www/img.webp.sh/path/tsuki.jpg</code> 的优化版本。</p><p>可以再添加反向代理，这样别人就都可以访问到了。</p><p>更多的一些参数设置</p><h3 id="项目使用场景" tabindex="-1">项目使用场景 <a class="header-anchor" href="#项目使用场景" aria-label="Permalink to &quot;项目使用场景&quot;">​</a></h3><p>以下是该项目的一些主要使用场景：</p><ol><li>服务器端图片优化</li><li>博客和个人网站优化</li><li>企业级应用性能优化</li><li>CDN 加速</li><li>自动化部署和管理系统集成 ...</li></ol><p>总的来说，<code>webp_server_go</code>是一个功能强大且易于使用的开源项目，它可以帮助我们轻松地将其他格式的图片转换为WebP格式，从而提高网页加载速度和浏览体验。通过灵活的配置和扩展性，可以根据自己的需求将其与其他服务集成。</p>`,36),l=[r];function o(i,t,c,d,b,u){return e(),a("div",null,l)}const g=s(p,[["render",o]]);export{m as __pageData,g as default};
