import{_ as a,c as e,o as s,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const n="/ProgramLearnNotes/assets/640-1713528522520-121.DJf62rMe.webp",o="/ProgramLearnNotes/assets/640-1713528572422-124.igAAru8S.webp",t="/ProgramLearnNotes/assets/640-1713528609227-127.BHh6InWO.webp",r="/ProgramLearnNotes/assets/640-1713528618115-130.CZmlD6ZL.webp",i="/ProgramLearnNotes/assets/640-1713528626891-133.BooHq3dZ.webp",p="/ProgramLearnNotes/assets/640-1713528638457-136.NTGD8y4O.gif",c="/ProgramLearnNotes/assets/640-1713528651154-139.VYV5EkjY.webp",d="/ProgramLearnNotes/assets/640-1713528682972-142.Be7vpFtd.webp",u="/ProgramLearnNotes/assets/640-1713528691591-145.BqO2Ocb4.webp",h="/ProgramLearnNotes/assets/640-1713528699260-148.Dn_1amho.gif",b="/ProgramLearnNotes/assets/640-1713528147611-118.C2HRqb4Z.webp",m="/ProgramLearnNotes/assets/640.BxKEA8tN.webp",g="/ProgramLearnNotes/assets/640-1713528108819-104.CPcAeJAX.webp",y="/ProgramLearnNotes/assets/640-1713528108819-105.CeTd_Qtf.webp",v="/ProgramLearnNotes/assets/640-1713528108819-106.B-sq3K7u.webp",x="/ProgramLearnNotes/assets/640-1713528108819-107.DC1EmgyU.webp",C="/ProgramLearnNotes/assets/2fe0d97350c047549b644c213893aff2tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.jGnUl5Z0.webp",f="/ProgramLearnNotes/assets/11380edaa92343afbfe031f1113fcf91tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.CcjxTZyx.webp",k="/ProgramLearnNotes/assets/f1e4d2267ad0499eb3e6e049afb2dbe5tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DkfG4TyL.webp",q="/ProgramLearnNotes/assets/eff385fd11ae4d2b81cce218d5397401tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.D38eBlmY.webp",w="/ProgramLearnNotes/assets/798656cefbce41908090d2ac9cca41dctplv-k3u1fbpfcp-zoom-in-crop-mark1512000.CJg7bjAb.webp",z="/ProgramLearnNotes/assets/bedb96bc07a24ef5b6c108580b23d5b6tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.BCYqz8U9.webp",F="/ProgramLearnNotes/assets/31de57f88b884fba95ceeae21eb975c6tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.1aRyHlYL.webp",O=JSON.parse('{"title":"命令行工具","description":"","frontmatter":{},"headers":[],"relativePath":"Document/命令行工具.md","filePath":"Document/命令行工具.md","lastUpdated":1715211236000}'),P={name:"Document/命令行工具.md"},_=l(`<h1 id="命令行工具" tabindex="-1">命令行工具 <a class="header-anchor" href="#命令行工具" aria-label="Permalink to &quot;命令行工具&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzYyNzQ0MQ==&amp;mid=2247506759&amp;idx=1&amp;sn=a84395622756ccc5bd70d2bfe0346354&amp;chksm=90586e19a72fe70f9352aa031a004effa14ee5126dab3c950fe21a68ec20748179a5204ac7c8&amp;scene=178&amp;cur_album_id=1332195194304905217#rd" target="_blank" rel="noreferrer">如闪电划破雨夜，这些开源项目瞬间点亮了命令行 (qq.com)</a></p><p>51W+ 的终端命令行工具助你成为 10 倍程序员：<a href="https://github.com/lcomplete/TechShare/blob/master/docs/10x/terminal.md" target="_blank" rel="noreferrer">https://github.com/lcomplete/TechShare/blob/master/docs/10x/terminal.md</a></p><h2 id="常见-unix-命令的现代-更快-更理智的替代方案的集合" tabindex="-1">常见 unix 命令的现代/更快/更理智的替代方案的集合 <a class="header-anchor" href="#常见-unix-命令的现代-更快-更理智的替代方案的集合" aria-label="Permalink to &quot;常见 unix 命令的现代/更快/更理智的替代方案的集合&quot;">​</a></h2><p><a href="https://github.com/ibraheemdev/modern-unix" target="_blank" rel="noreferrer">ibraheemdev/modern-unix：常见 unix 命令的 modern/faster/saner 替代方案的集合。 (github.com)</a></p><h2 id="nushell-高效的现代命令行工具" tabindex="-1">NuShell:高效的现代命令行工具 <a class="header-anchor" href="#nushell-高效的现代命令行工具" aria-label="Permalink to &quot;NuShell:高效的现代命令行工具&quot;">​</a></h2><p>NuShell 是一款革命性的命令行工具，旨在提供比传统 Shell，如 zsh，更先进的用户体验。它通过结合现代编程语言的优势和 Shell 的灵活性，为用户带来了前所未有的效率和便利性。</p><h3 id="nushell-的优点" tabindex="-1">NuShell 的优点 <a class="header-anchor" href="#nushell-的优点" aria-label="Permalink to &quot;NuShell 的优点&quot;">​</a></h3><ul><li><strong>结构化数据处理</strong>：NuShell 以独特的方式处理数据，使得对复杂数据的查询和管理变得简单直观。</li><li><strong>跨平台支持</strong>：无论是在 macOS、Linux 还是 Windows 上，NuShell 提供一致的体验。</li><li><strong>现代编程特性</strong>：支持丰富的数据类型，使得脚本编写更加强大且易于维护。</li><li><strong>友好的错误信息</strong>：NuShell 设计了更易于理解的错误提示，帮助用户快速定位和解决问题。</li></ul><h3 id="安装和配置-nushell" tabindex="-1">安装和配置 NuShell <a class="header-anchor" href="#安装和配置-nushell" aria-label="Permalink to &quot;安装和配置 NuShell&quot;">​</a></h3><p>在 macOS 上安装 NuShell：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> nushell</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置 NuShell 为默认 Shell：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> $(</span><span style="color:#56B6C2;">which</span><span style="color:#98C379;"> nu</span><span style="color:#ABB2BF;">) | </span><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> tee</span><span style="color:#D19A66;"> -a</span><span style="color:#98C379;"> /etc/shells</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">chsh</span><span style="color:#D19A66;"> -s</span><span style="color:#ABB2BF;"> $(</span><span style="color:#56B6C2;">which</span><span style="color:#98C379;"> nu</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这两步操作将 NuShell 安装到您的系统并设置为默认的命令行环境。</p><h3 id="使用-nushell" tabindex="-1">使用 NuShell <a class="header-anchor" href="#使用-nushell" aria-label="Permalink to &quot;使用 NuShell&quot;">​</a></h3><p>NuShell 的使用与传统 Shell 类似，但提供了更丰富的功能。以下是一些基本用法示例：</p><ul><li><strong>查看和过滤数据</strong>：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ls</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">where</span><span style="color:#98C379;"> size</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">1mb</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">sort-by</span><span style="color:#98C379;"> size</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条命令列出当前目录中大于 1MB 的文件，并按大小排序。</p><ul><li><strong>使用内置命令处理数据</strong>：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ps</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">where</span><span style="color:#98C379;"> cpu</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">get</span><span style="color:#98C379;"> name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>列出 CPU 使用率超过 10% 的进程名称。</p><h3 id="评价-nushell" tabindex="-1">评价 NuShell <a class="header-anchor" href="#评价-nushell" aria-label="Permalink to &quot;评价 NuShell&quot;">​</a></h3><p>通过结构化数据和强大的内置命令，NuShell 显著提高了命令行操作的效率。不仅如此，它的跨平台特性和友好的错误信息使得从其他 Shell 迁移到 NuShell 成为一种轻松愉快的体验。</p><p>NuShell 的设计理念和功能使其成为现代开发者工具箱中的必备工具，无论是数据处理、系统监控还是日常任务自动化，NuShell 都能提供优秀的支持。</p><h2 id="bat-不仅仅是-cat-的-rust-替代品" tabindex="-1">bat：不仅仅是 cat 的 Rust 替代品 <a class="header-anchor" href="#bat-不仅仅是-cat-的-rust-替代品" aria-label="Permalink to &quot;bat：不仅仅是 cat 的 Rust 替代品&quot;">​</a></h2><p>bat 是一个现代的命令行工具，用 Rust 编写，旨在提供比传统的 <code>cat</code> 更多的功能，包括语法高亮、Git 集成、不可打印字符的可视化、自动分页，以及智能输出。它兼容 <code>cat</code> 的大部分功能，并增加了许多提高生产力的特性。</p><h3 id="bat-的优点" tabindex="-1">bat 的优点 <a class="header-anchor" href="#bat-的优点" aria-label="Permalink to &quot;bat 的优点&quot;">​</a></h3><ul><li><strong>语法高亮</strong>：对于多数编程和标记语言自动提供语法高亮，使代码更易读。</li><li><strong>Git 集成</strong>：自动显示 git 更改记录，方便跟踪代码修改。</li><li><strong>不可打印字符可视化</strong>：可以显示文件中的不可打印字符，便于调试。</li><li><strong>自动分页</strong>：当输出内容超出屏幕时，自动分页显示，避免信息丢失。</li><li><strong>智能输出</strong>：当通过管道使用或非交互环境下，自动调整为纯文本输出，保证与其他工具的兼容性。</li></ul><h3 id="安装配置-bat" tabindex="-1">安装配置 bat <a class="header-anchor" href="#安装配置-bat" aria-label="Permalink to &quot;安装配置 bat&quot;">​</a></h3><p>在 macOS 上，使用 Homebrew 安装 bat 是非常简单的：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> bat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了让 bat 替代 <code>cat</code>，您可以在 shell 配置文件中添加一个别名：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">alias</span><span style="color:#E06C75;"> cat</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;bat --paging=never&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，每次输入 <code>cat</code> 时，实际上都是在使用 <code>bat</code>，但不启用分页功能。</p><h3 id="使用-bat" tabindex="-1">使用 bat <a class="header-anchor" href="#使用-bat" aria-label="Permalink to &quot;使用 bat&quot;">​</a></h3><ul><li>查看文件内容，带有语法高亮和 Git 集成：</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bat</span><span style="color:#98C379;"> your_file.ext</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>显示不可打印字符：</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bat</span><span style="color:#D19A66;"> -A</span><span style="color:#98C379;"> your_file.ext</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>默认情况下，<code>bat</code> 会自动分页。如果你希望禁用分页功能（例如，为了替代 <code>cat</code>），可以使用之前提到的别名，或者直接在命令中指定：</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bat</span><span style="color:#D19A66;"> --paging=never</span><span style="color:#98C379;"> your_file.ext</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="评价-bat" tabindex="-1">评价 bat <a class="header-anchor" href="#评价-bat" aria-label="Permalink to &quot;评价 bat&quot;">​</a></h3><p>通过引入语法高亮和 Git 集成等现代特性，bat 大幅提升了查看源代码和文本文件的体验。它的自动分页和智能输出特性，更使得在长文本或代码文件的浏览成为一种享受，而不是挑战。无论是对于开发者还是普通用户，bat 都是提升命令行工作效率的利器。</p><h2 id="uv-rust-加速的-python-包管理工具" tabindex="-1">uv：Rust 加速的 Python 包管理工具 <a class="header-anchor" href="#uv-rust-加速的-python-包管理工具" aria-label="Permalink to &quot;uv：Rust 加速的 Python 包管理工具&quot;">​</a></h2><p>uv 是一个用 Rust 编写的 Python 包安装程序和解析器，旨在作为 pip 和 pip-tools 的高速替代品。它结合了现代技术的优势，提供了一个更快、更高效、并且兼容性强的包管理体验。</p><h3 id="uv-的优点" tabindex="-1">uv 的优点 <a class="header-anchor" href="#uv-的优点" aria-label="Permalink to &quot;uv 的优点&quot;">​</a></h3><ul><li><strong>无缝替换</strong>：uv 设计为 pip、pip-tools 和 virtualenv 命令的直接替代品，无需改变现有工作流程。</li><li><strong>极速性能</strong>：比 pip 和 pip-tools 快 10-100 倍，大幅缩短包安装和管理的时间。</li><li><strong>磁盘空间高效</strong>：拥有全局缓存用于依赖去重，减少不必要的磁盘空间占用。</li><li><strong>跨平台支持</strong>：兼容 macOS、Linux 和 Windows，满足不同操作系统用户的需求。</li><li><strong>无需 Rust 或 Python 环境</strong>：uv 可以作为静态二进制文件安装，安装方式灵活多样。</li><li><strong>高级功能支持</strong>：包括依赖版本覆盖、替代解析策略等高级功能。</li><li><strong>友好的错误提示</strong>：提供最佳的错误信息和冲突跟踪解析器，帮助用户轻松定位问题。</li></ul><h3 id="安装配置-uv" tabindex="-1">安装配置 uv <a class="header-anchor" href="#安装配置-uv" aria-label="Permalink to &quot;安装配置 uv&quot;">​</a></h3><p>在 macOS 上安装 uv 非常简单，只需一个命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> uv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条命令通过 Homebrew 安装 uv，使其立即可用。</p><p>由于 uv 被设计为 pip 的直接替代品，因此大部分情况下无需额外配置即可使用。对于需要特殊配置的场景，uv 文档提供了详尽的指导。</p><h3 id="使用-uv" tabindex="-1">使用 uv <a class="header-anchor" href="#使用-uv" aria-label="Permalink to &quot;使用 uv&quot;">​</a></h3><p>使用 uv 来安装 Python 包，体验与使用 pip 类似，但速度更快：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看已安装的包列表：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建虚拟环境</p><p>使用 uv 创建一个新的虚拟环境非常简单：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> venv</span><span style="color:#7F848E;font-style:italic;">  # 在当前目录下创建 .venv 虚拟环境</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>激活虚拟环境</p><p>激活您创建的虚拟环境：<code>source .venv/bin/activate</code></p><p>安装依赖</p><p>安装依赖到虚拟环境中，uv 提供了与 pip 类似的命令行界面：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> flask</span><span style="color:#7F848E;font-style:italic;">                # 安装 Flask</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">  # 从 requirements.txt 文件安装</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> .</span><span style="color:#7F848E;font-style:italic;">                 # 以可编辑模式安装当前项目</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> &quot;package @ .&quot;</span><span style="color:#7F848E;font-style:italic;">        # 从磁盘安装当前项目</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> &quot;flask[dotenv]&quot;</span><span style="color:#7F848E;font-style:italic;">      # 安装 Flask 并包含 &quot;dotenv&quot; 扩展</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>生成锁定的依赖集</p><p>生成一组锁定的依赖，并输出到 <code>requirements.txt</code>：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> compile</span><span style="color:#98C379;"> requirements.in</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">    # 从 requirements.in 生成</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> compile</span><span style="color:#98C379;"> pyproject.toml</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">     # 从 pyproject.toml 生成</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> compile</span><span style="color:#98C379;"> setup.py</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">           # 从 setup.py 生成</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> flask</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> compile</span><span style="color:#98C379;"> -</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">     # 从 stdin 读取并生成</span></span>
<span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> freeze</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> compile</span><span style="color:#98C379;"> -</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">  # 锁定当前环境的依赖</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同步虚拟环境</p><p>将一组锁定的依赖与虚拟环境同步：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">uv</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> sync</span><span style="color:#98C379;"> requirements.txt</span><span style="color:#7F848E;font-style:italic;">  # 从 requirements.txt 文件同步</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>UV 的 <code>pip-install</code> 和 <code>pip-compile</code> 命令支持许多与现有工具相同的命令行参数，包括 <code>-r requirements.txt</code>、<code>-c constraints.txt</code>、<code>-e .</code>（用于可编辑安装）、<code>--index-url</code> 等，提供了一个既熟悉又高效的包管理体验。</p><h3 id="评价-uv" tabindex="-1">评价 uv <a class="header-anchor" href="#评价-uv" aria-label="Permalink to &quot;评价 uv&quot;">​</a></h3><p>uv 提供了一个高效、快速且用户友好的 Python 包管理解决方案。它不仅显著提升了包安装速度，还通过全局缓存和优化的错误提示等特性，改善了开发者的工作效率和体验。无论是新项目的开发还是现有项目的维护，uv 都能为 Python 社区带来显著的优势。</p><h2 id="ripgrep-高效的代码搜索工具" tabindex="-1">Ripgrep：高效的代码搜索工具 <a class="header-anchor" href="#ripgrep-高效的代码搜索工具" aria-label="Permalink to &quot;Ripgrep：高效的代码搜索工具&quot;">​</a></h2><p>Ripgrep 是一个用 Rust 编写的命令行工具，旨在提供比传统的 <code>grep</code> 更快、更强大的搜索能力。它结合了现代技术的优势，为用户带来了前所未有的搜索体验。</p><h3 id="ripgrep-的优点" tabindex="-1">Ripgrep 的优点 <a class="header-anchor" href="#ripgrep-的优点" aria-label="Permalink to &quot;Ripgrep 的优点&quot;">​</a></h3><ul><li><strong>递归搜索</strong>：Ripgrep 默认递归搜索当前目录，无需额外参数。</li><li><strong>自动过滤</strong>：自动根据 <code>.gitignore</code> 规则过滤文件，提高搜索效率。</li><li><strong>语法高亮</strong>：搜索结果带有语法高亮，使得查找结果一目了然。</li><li><strong>Git 集成</strong>：能显示 git 更改记录，方便追踪代码修改。</li><li><strong>不可打印字符可视化</strong>：通过 <code>-A</code> 或 <code>--show-all</code> 参数可视化显示文件中的不可打印字符。</li><li><strong>自动分页</strong>：当输出内容超过屏幕时，自动分页显示。</li><li><strong>智能输出</strong>：在设置了分页器选项的同时支持管道输出，适应不同的使用场景。</li><li><strong>跨平台支持</strong>：支持 Windows、macOS 和 Linux，满足不同操作系统用户的需求。</li></ul><h3 id="安装配置-ripgrep" tabindex="-1">安装配置 Ripgrep <a class="header-anchor" href="#安装配置-ripgrep" aria-label="Permalink to &quot;安装配置 Ripgrep&quot;">​</a></h3><p>在 macOS 上安装 Ripgrep 十分简单，只需一个命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> ripgrep</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条命令通过 Homebrew 安装 Ripgrep，使其立即可用。</p><p>Ripgrep 的默认配置已经非常强大，大多数情况下你可以直接使用。如果需要对其进行配置，可以通过编辑 <code>.ripgreprc</code> 文件来实现，该文件通常位于用户的家目录下。</p><h3 id="使用-ripgrep" tabindex="-1">使用 Ripgrep <a class="header-anchor" href="#使用-ripgrep" aria-label="Permalink to &quot;使用 Ripgrep&quot;">​</a></h3><p>进行基本搜索：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rg</span><span style="color:#98C379;"> pattern</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在特定文件中搜索：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rg</span><span style="color:#98C379;"> pattern</span><span style="color:#98C379;"> README.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用正则表达式进行搜索：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rg</span><span style="color:#98C379;"> &#39;pattern\\w+&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="评价-ripgrep" tabindex="-1">评价 Ripgrep <a class="header-anchor" href="#评价-ripgrep" aria-label="Permalink to &quot;评价 Ripgrep&quot;">​</a></h3><p>Ripgrep 通过其快速的搜索速度、直观的语法高亮和强大的 Git 集成，极大地提升了开发者的搜索效率。自动过滤和不可打印字符的可视化功能使得 Ripgrep 成为处理复杂搜索任务时的理想选择。其跨平台支持和智能输出功能更是让 Ripgrep 成为了现代开发者工具箱中不可或缺的一部分。</p><h2 id="zenith-现代化的系统监控工具" tabindex="-1">Zenith：现代化的系统监控工具 <a class="header-anchor" href="#zenith-现代化的系统监控工具" aria-label="Permalink to &quot;Zenith：现代化的系统监控工具&quot;">​</a></h2><p>Zenith 是一个现代化的命令行系统监控工具，它通过提供详细的资源使用情况和性能指标来替代经典的 htop。它结合了性能分析和监控，使得用户能够实时观察到系统的健康状况和性能瓶颈。</p><h3 id="zenith-的优点" tabindex="-1">zenith 的优点 <a class="header-anchor" href="#zenith-的优点" aria-label="Permalink to &quot;zenith 的优点&quot;">​</a></h3><ul><li><strong>直观的界面</strong>：Zenith 提供了一个图形化的终端界面，显示 CPU、内存、磁盘和网络使用情况，以及进程列表。</li><li><strong>GPU 监控</strong>：与 htop 不同，Zenith 还支持 GPU 使用率和温度的监控，对于使用 GPU 进行计算的用户来说非常有用。</li><li><strong>历史数据</strong>：Zenith 能够跟踪并显示系统性能的历史数据，帮助用户分析过去的性能问题。</li><li><strong>响应式布局</strong>：界面布局会根据终端窗口的大小自动调整，保持信息的清晰可读。</li></ul><h3 id="安装和配置-zenith" tabindex="-1">安装和配置 zenith <a class="header-anchor" href="#安装和配置-zenith" aria-label="Permalink to &quot;安装和配置 zenith&quot;">​</a></h3><p>安装 Zenith 非常简单，对于 macOS 用户，可以通过 Homebrew 安装：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> zenith</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Zenith 无需复杂的配置即可使用。安装后直接运行 <code>zenith</code> 命令即可启动。</p><h3 id="使用-zenith" tabindex="-1">使用 zenith <a class="header-anchor" href="#使用-zenith" aria-label="Permalink to &quot;使用 zenith&quot;">​</a></h3><p>启动 Zenith 很简单，只需要在终端中输入：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">zenith</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>默认情况下，Zenith 会展示所有核心的 CPU 使用率、内存使用情况、磁盘 IO 和网络 IO。您可以使用键盘上的方向键来浏览进程列表，或者使用 Tab 键在不同的监控面板之间切换。</p><h3 id="评价-zenith" tabindex="-1">评价 zenith <a class="header-anchor" href="#评价-zenith" aria-label="Permalink to &quot;评价 zenith&quot;">​</a></h3><p>Zenith 以其现代化的界面和丰富的功能集，在命令行系统监控工具中脱颖而出。它的 GPU 监控功能尤其适合需要对 GPU 资源进行实时监控的用户。虽然它可能不像 htop 那样轻量级，但其提供的详细性能分析和历史数据追踪功能，使其成为高级用户和系统管理员分析和优化系统性能的有力工具。</p><h2 id="zoxide-一个更聪明的目录跳转工具" tabindex="-1">Zoxide：一个更聪明的目录跳转工具 <a class="header-anchor" href="#zoxide-一个更聪明的目录跳转工具" aria-label="Permalink to &quot;Zoxide：一个更聪明的目录跳转工具&quot;">​</a></h2><p>zoxide 是一个命令行工具，旨在提升您的目录导航效率。它通过学习您的使用习惯，使您能够快速跳转到经常访问的目录。</p><h3 id="zoxide-的优点" tabindex="-1">zoxide 的优点 <a class="header-anchor" href="#zoxide-的优点" aria-label="Permalink to &quot;zoxide 的优点&quot;">​</a></h3><ul><li><strong>智能跳转</strong>：zoxide 学习您最常访问的目录，并允许您快速跳转到这些目录，而无需输入完整的路径。</li><li><strong>跨 Shell 兼容性</strong>：支持所有主要的 Shell，如 Bash、Zsh、Fish 和 NuShell，确保无论您使用哪种 Shell 都能获得一致的体验。</li><li><strong>简化的命令</strong>：zoxide 通过简单的命令 <code>z</code> 替代了传统的 <code>cd</code> 命令，进一步简化了目录导航。</li><li><strong>无需外部依赖</strong>：作为一个静态二进制文件，zoxide 可以轻松安装在任何系统上，无需额外的依赖。</li></ul><h3 id="安装配置-zoxide" tabindex="-1">安装配置 zoxide <a class="header-anchor" href="#安装配置-zoxide" aria-label="Permalink to &quot;安装配置 zoxide&quot;">​</a></h3><p>在 macOS 上安装 zoxide 十分简单，只需一个命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> zoxide</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>根据您使用的 Shell，配置 zoxide 以使其生效。</p><h4 id="nushell" tabindex="-1">Nushell <a class="header-anchor" href="#nushell" aria-label="Permalink to &quot;Nushell&quot;">​</a></h4><ol><li>将下列命令添加到您的 env 文件末尾（通过在 Nushell 中运行 <code>$nu.env-path</code> 找到它）：</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">zoxide</span><span style="color:#98C379;"> init</span><span style="color:#98C379;"> nushell</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">save</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> ~/.zoxide.nu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>现在，将以下内容添加到您的配置文件末尾（通过在 Nushell 中运行 <code>$nu.config-path</code> 找到它）：</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> ~/.zoxide.nu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请注意，zoxide 仅支持 Nushell v0.89.0 及以上版本。</p><h4 id="zsh" tabindex="-1">Zsh <a class="header-anchor" href="#zsh" aria-label="Permalink to &quot;Zsh&quot;">​</a></h4><ol><li>将以下内容添加到您的配置文件末尾（通常是 <code>~/.zshrc</code>）：</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">eval</span><span style="color:#98C379;"> &quot;$(</span><span style="color:#61AFEF;">zoxide</span><span style="color:#98C379;"> init zsh)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了使自动补全生效，上述行必须在调用 <code>compinit</code> 之后添加。您可能需要通过运行 <code>rm ~/.zcompdump*; compinit</code> 来重建自动补全缓存。</p><h3 id="使用-zoxide" tabindex="-1">使用 zoxide <a class="header-anchor" href="#使用-zoxide" aria-label="Permalink to &quot;使用 zoxide&quot;">​</a></h3><p>使用 zoxide 非常简单，只需要使用 <code>z</code> 命令加上部分目录名即可快速跳转：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">z</span><span style="color:#98C379;"> project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果 <code>project</code> 是您经常访问的目录，zoxide 会将您直接导航到该目录。</p><h3 id="评价-zoxide" tabindex="-1">评价 zoxide <a class="header-anchor" href="#评价-zoxide" aria-label="Permalink to &quot;评价 zoxide&quot;">​</a></h3><p>zoxide 通过提供一个智能、快速且易于使用的目录跳转解决方案，极大地提升了命令行的工作效率。它的跨 Shell 兼容性和简化的命令使得从传统的 <code>cd</code> 命令过渡变得无缝且自然。zoxide 是提高命令行导航速度的理想工具，尤其适合经常在多个项目之间跳转的开发者和系统管理员。</p><h2 id="eza-ls-的现代化替代品" tabindex="-1">eza：ls 的现代化替代品 <a class="header-anchor" href="#eza-ls-的现代化替代品" aria-label="Permalink to &quot;eza：ls 的现代化替代品&quot;">​</a></h2><p>eza 是一个现代化的文件列表命令行程序，用 Rust 编写，旨在替代 Unix 和 Linux 操作系统附带的经典 <code>ls</code> 命令。它提供了更多的特性和更好的默认值，使用颜色区分文件类型和元数据，了解符号链接、扩展属性和 Git 状态，而且它小巧、快速，仅为一个单一的二进制文件。</p><p>通过有意识地做出不同的决策，eza 试图成为一个功能更全面、更用户友好的 <code>ls</code> 版本。</p><h3 id="eza-的优点" tabindex="-1">eza 的优点 <a class="header-anchor" href="#eza-的优点" aria-label="Permalink to &quot;eza 的优点&quot;">​</a></h3><ul><li><strong>修复了 exa 2021 引入的“网格错误”</strong>：提供了一个更稳定的显示网格。</li><li><strong>超链接支持</strong>：可以将文件名显示为可点击的超链接。</li><li><strong>挂载点细节</strong>：显示挂载点的详细信息。</li><li><strong>Selinux 上下文输出</strong>：增加了对 Selinux 上下文的支持。</li><li><strong>Git 仓库状态输出</strong>：直观地显示 Git 状态。</li><li><strong>人类可读的相对日期</strong>：日期显示更加友好。</li><li><strong>多项安全修复</strong>：提升了程序的安全性。</li><li><strong>对明亮终端颜色的支持</strong>：界面更加丰富多彩。</li><li><strong>大量的小型 bug 修复和更改</strong>：提升了稳定性和可用性。</li></ul><h3 id="安装和配置-eza" tabindex="-1">安装和配置 eza <a class="header-anchor" href="#安装和配置-eza" aria-label="Permalink to &quot;安装和配置 eza&quot;">​</a></h3><p>在 macOS 上，安装 eza 只需要一个简单的命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> eza</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-eza" tabindex="-1">使用 eza <a class="header-anchor" href="#使用-eza" aria-label="Permalink to &quot;使用 eza&quot;">​</a></h3><p>eza 的命令行选项与 ls 的相似，但带有一些重要的改进和扩展：</p><ul><li><strong>显示选项</strong>： <ul><li><code>-1, --oneline</code>：每行显示一个条目。</li><li><code>-G, --grid</code>：以网格形式显示条目（默认）。</li><li><code>-l, --long</code>：显示扩展的细节和属性。</li><li><code>-R, --recurse</code>：递归进入目录。</li><li><code>-T, --tree</code>：以树形递归进入目录。</li><li><code>--colo[u]r</code>：何时使用终端颜色（总是，自动，从不）。</li></ul></li><li><strong>过滤选项</strong>： <ul><li><code>-a, --all</code>：显示隐藏文件和&#39;点&#39;文件。</li><li><code>-d, --list-dirs</code>：列出目录，如同常规文件。</li><li><code>-L, --level</code>：限制递归的深度。</li></ul></li><li><strong>长视图选项</strong>（在使用 <code>--long</code> 时可用）： <ul><li><code>-b, --binary</code>：以二进制前缀列出文件大小。</li><li><code>-h, --header</code>：为每列添加标题行。</li><li><code>--git</code>：列出每个文件的 Git 状态，如果被追踪或忽略。</li></ul></li></ul><p>eza 通过其丰富的功能集，为文件和目录的列表显示提供了一个强大而直观的界面。它的现代化特性，如超链接支持和 Git 状态输出，使得浏览和管理文件变得更加高效和愉悦。</p><h3 id="评价-eza" tabindex="-1">评价 eza <a class="header-anchor" href="#评价-eza" aria-label="Permalink to &quot;评价 eza&quot;">​</a></h3><p>eza 以其现代化的特性和改进的默认值，为命令行文件列表工具设置了新的标准。它不仅仅是 <code>ls</code> 的一个替代品，而是一个在功能、性能和用户体验方面都有显著提升的工具。对于那些寻求更先进的命令行文件管理工具的用户来说，eza 提供了一个值得尝试的选择。</p><h2 id="watchexec-自动化命令执行的现代工具" tabindex="-1">watchexec：自动化命令执行的现代工具 <a class="header-anchor" href="#watchexec-自动化命令执行的现代工具" aria-label="Permalink to &quot;watchexec：自动化命令执行的现代工具&quot;">​</a></h2><p>watchexec 是一个简单而独立的工具，它监视一个路径，并在检测到修改时运行指定的命令。这个工具解决了软件开发中经常遇到的一个问题：反复运行相同的命令，这既枯燥又低效。</p><h3 id="watchexec-的优点" tabindex="-1">watchexec 的优点 <a class="header-anchor" href="#watchexec-的优点" aria-label="Permalink to &quot;watchexec 的优点&quot;">​</a></h3><ul><li><strong>简单的调用和使用</strong>：不需要复杂的命令行参数，易于理解和使用。</li><li><strong>跨平台支持</strong>：在 OS X、Linux 和 Windows 上运行。</li><li><strong>监控目录变化</strong>：监视当前目录及所有子目录的更改。</li><li><strong>智能事件合并</strong>：对于在保存过程中使用交换/备份文件的编辑器，将多个文件系统事件合并为一个。</li><li><strong>忽略文件加载</strong>：自动加载 <code>.gitignore</code> 和 <code>.ignore</code> 文件，排除不需要监视的路径。</li><li><strong>进程组管理</strong>：能够控制产生分支（fork）的程序。</li><li><strong>提供变更路径</strong>：在环境变量或标准输入中提供发生变更的路径。</li><li><strong>无需语言运行时</strong>：不绑定任何特定的语言或生态系统，不需要语言运行时。</li><li><strong>多种附加功能</strong>：包括超链接支持、挂载点细节、Selinux 上下文输出、Git 仓库状态输出等。</li></ul><h3 id="安装配置-watchexec" tabindex="-1">安装配置 watchexec <a class="header-anchor" href="#安装配置-watchexec" aria-label="Permalink to &quot;安装配置 watchexec&quot;">​</a></h3><p>在 macOS 上，可以通过一个简单的命令安装 watchexec：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> watchexec</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-watchexec" tabindex="-1">使用 watchexec <a class="header-anchor" href="#使用-watchexec" aria-label="Permalink to &quot;使用 watchexec&quot;">​</a></h3><p>watchexec 的用法示例广泛而多样，以下是一些常见的使用场景：</p><h3 id="自动运行单元测试" tabindex="-1">自动运行单元测试 <a class="header-anchor" href="#自动运行单元测试" aria-label="Permalink to &quot;自动运行单元测试&quot;">​</a></h3><p>当当前目录或子目录下的 JavaScript、CSS 和 HTML 文件发生变化时，自动运行 <code>npm run build</code>：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">watchexec</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> js,css,html</span><span style="color:#98C379;"> npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="监控-python-文件变化重启服务器" tabindex="-1">监控 Python 文件变化重启服务器 <a class="header-anchor" href="#监控-python-文件变化重启服务器" aria-label="Permalink to &quot;监控 Python 文件变化重启服务器&quot;">​</a></h3><p>当任何 Python 文件发生变化时，调用/重启 <code>python server.py</code>：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">watchexec</span><span style="color:#D19A66;"> -r</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> py</span><span style="color:#D19A66;"> --</span><span style="color:#98C379;"> python</span><span style="color:#98C379;"> server.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="排除特定目录下的文件变化" tabindex="-1">排除特定目录下的文件变化 <a class="header-anchor" href="#排除特定目录下的文件变化" aria-label="Permalink to &quot;排除特定目录下的文件变化&quot;">​</a></h3><p>在当前目录/子目录下的任何文件变化时调用 <code>make test</code>，但排除 <code>target</code> 目录下的所有文件：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">watchexec</span><span style="color:#D19A66;"> -i</span><span style="color:#98C379;"> &quot;target/**&quot;</span><span style="color:#98C379;"> make</span><span style="color:#98C379;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="仅监控文件创建事件" tabindex="-1">仅监控文件创建事件 <a class="header-anchor" href="#仅监控文件创建事件" aria-label="Permalink to &quot;仅监控文件创建事件&quot;">​</a></h3><p>仅当文件被创建时运行命令，例如同步当前目录到 S3 存储桶：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">watchexec</span><span style="color:#D19A66;"> --fs-events</span><span style="color:#98C379;"> create</span><span style="color:#D19A66;"> --</span><span style="color:#98C379;"> s3</span><span style="color:#98C379;"> sync</span><span style="color:#98C379;"> .</span><span style="color:#98C379;"> s3://my-bucket</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="评价-watchexec" tabindex="-1">评价 watchexec <a class="header-anchor" href="#评价-watchexec" aria-label="Permalink to &quot;评价 watchexec&quot;">​</a></h3><p>watchexec 以其灵活性、易用性和高效性成为自动化重复命令执行的强大工具。它的跨平台支持、智能事件合并和对 <code>.gitignore</code> 的自动处理，使其成为开发者工作流程中不可或缺的一部分。无论是自动运行测试、重启开发服务器还是其他自动化任务，watchexec 都能大幅提高开发效率和体验。</p><h2 id="yazi-超快的终端文件管理器" tabindex="-1">yazi：超快的终端文件管理器 <a class="header-anchor" href="#yazi-超快的终端文件管理器" aria-label="Permalink to &quot;yazi：超快的终端文件管理器&quot;">​</a></h2><p>yazi 是一款基于 Rust 语言开发，支持异步 I/O 的终端文件管理器，旨在为用户提供一个速度快、功能全、易于使用的文件浏览体验。它具有可滚动预览、视觉模式批量重命名、类似 Vim 的输入和选择组件等特性，使其成为传统文件管理命令 <code>Ranger</code> 的现代化替代品。</p><h3 id="yazi-的优点" tabindex="-1">yazi 的优点 <a class="header-anchor" href="#yazi-的优点" aria-label="Permalink to &quot;yazi 的优点&quot;">​</a></h3><ul><li><strong>可滚动预览</strong>：支持预览各种类型的文件，并在预览时滚动文件内容。</li><li><strong>视觉模式和批量重命名</strong>：在可视模式下批量选择文件，并支持重命名。</li><li><strong>类似 Vim 的操作体验</strong>：快速在输入框中编辑文件名，以及通过选择组件决定如何打开文件。</li><li><strong>多标签和快速跳转</strong>：支持多标签协作，通过 fzf 和 zoxide 实现快速跳转。</li><li><strong>增量查找和内容搜索</strong>：实现实时增量查找文件，并支持通过 fd 和 rg 按名称或内容搜索文件。</li><li><strong>多项选择和任务管理</strong>：支持单独选择多个文件进行操作，并通过任务系统安排如复制、剪切等操作，提供实时进度报告和任务取消功能。</li></ul><h3 id="安装配置-yazi" tabindex="-1">安装配置 yazi <a class="header-anchor" href="#安装配置-yazi" aria-label="Permalink to &quot;安装配置 yazi&quot;">​</a></h3><p>在 macOS 上安装 yazi 及其依赖非常简单，只需通过 Homebrew 执行以下命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> yazi</span><span style="color:#98C379;"> ffmpegthumbnailer</span><span style="color:#98C379;"> unar</span><span style="color:#98C379;"> jq</span><span style="color:#98C379;"> poppler</span><span style="color:#98C379;"> fd</span><span style="color:#98C379;"> ripgrep</span><span style="color:#98C379;"> fzf</span><span style="color:#98C379;"> zoxide</span></span>
<span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> tap</span><span style="color:#98C379;"> homebrew/cask-fonts</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --cask</span><span style="color:#98C379;"> font-symbols-only-nerd-font</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动 yazi：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yazi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按 <code>q</code> 退出，按 <code>~</code> 打开帮助菜单。</p><h3 id="使用-yazi" tabindex="-1">使用 yazi <a class="header-anchor" href="#使用-yazi" aria-label="Permalink to &quot;使用 yazi&quot;">​</a></h3><p>yazi 提供了丰富的键绑定和功能，以提升文件管理效率：</p><ul><li>使用箭头键或 <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> 进行导航。</li><li>使用 <code>Space</code> 切换选中的文件/目录，<code>v</code> 进入视觉模式进行批量选择。</li><li><code>o</code> 打开选中的文件，<code>d</code> 将文件移动到垃圾箱，<code>r</code> 重命名文件或目录。</li><li>使用 <code>/</code> 进行增量查找，<code>s</code> 和 <code>S</code> 分别通过 fd 和 rg 按名称或内容搜索文件。</li><li>对文件/目录进行排序，例如 <code>,</code> + <code>m</code> 按修改时间排序。</li></ul><h3 id="评价-yazi" tabindex="-1">评价 yazi <a class="header-anchor" href="#评价-yazi" aria-label="Permalink to &quot;评价 yazi&quot;">​</a></h3><p>yazi 以其超快的速度和丰富的功能集，在终端文件管理领域树立了新的标准。其现代化的特性，如可滚动预览、批量重命名、快速跳转等，极大地提升了文件管理的便利性和效率。无论是日常文件浏览还是复杂的文件操作，yazi 都能提供流畅和高效的体验，是一个值得尝试的终端文件管理工具。</p><h2 id="dust-du-的现代化替代品" tabindex="-1">dust：du 的现代化替代品 <a class="header-anchor" href="#dust-du-的现代化替代品" aria-label="Permalink to &quot;dust：du 的现代化替代品&quot;">​</a></h2><p>dust 是一个用 Rust 编写的命令行工具，旨在提供一个直观的方式来查看磁盘空间的使用情况。它结合了 <code>du</code> 命令的功能和 Rust 的性能，使其成为 <code>du</code> 的现代化替代品。</p><p><img src="`+n+'" alt="图片"></p><h3 id="dust-的优点" tabindex="-1">dust 的优点 <a class="header-anchor" href="#dust-的优点" aria-label="Permalink to &quot;dust 的优点&quot;">​</a></h3><ul><li><p><strong>直观的输出</strong>：dust 旨在提供一个即时的概览，显示哪些目录正在使用磁盘空间，而无需使用 <code>sort</code> 或 <code>head</code> 命令。</p></li><li><p><strong>智能递归</strong>：dust 会智能地递归下到文件树中找到更大的目录或文件，列出占用空间最大的一些子目录或文件，并使用颜色加以区分。</p></li><li><p><strong>颜色区分</strong>：不同颜色的条形图表示树层次结构和磁盘使用情况的组合，灰色阴影用于指示子文件夹属于哪个父文件夹。</p></li><li><p><strong>权限提示最小化</strong>：dust 会最大限度地减少“没有权限”消息的打印。</p></li><li><p>编程语言：Rust（96%）</p></li><li><p>可替代：<code>du</code> 命令</p></li><li><p>介绍：能够一目了然地展示目录和文件大小的命令行工具。使用时无需加额外的参数，即可展示当前目录下的文件和目录的大小、包含的子目录列表（树状）以及占用空间的百分比（条形图）。</p></li><li><p>用法：<code>dust</code></p></li><li><p>适用平台：Windows、Linux、macOS</p></li><li><p>地址：<a href="https://github.com/bootandy/dust" target="_blank" rel="noreferrer">https://github.com/bootandy/dust</a></p></li></ul><h3 id="安装配置-dust" tabindex="-1">安装配置 dust <a class="header-anchor" href="#安装配置-dust" aria-label="Permalink to &quot;安装配置 dust&quot;">​</a></h3><p>在 macOS 上安装 dust，只需要执行以下命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> dust</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-dust" tabindex="-1">使用 dust <a class="header-anchor" href="#使用-dust" aria-label="Permalink to &quot;使用 dust&quot;">​</a></h3><p>dust 的使用非常简单，以下是一些基本用法：</p><ul><li>直接运行 <code>dust</code> 以查看当前目录及其子目录的磁盘使用情况。</li><li>使用 <code>dust &lt;dir&gt;</code> 查看指定目录的磁盘使用情况。</li><li><code>dust -p</code> 显示子目录的完整路径。</li><li><code>dust -n 30</code> 显示最大的 30 个目录而不是默认的终端高度。</li><li><code>dust -d 3</code> 显示 3 级子目录的磁盘使用情况。</li><li><code>dust -r</code> 反转输出顺序。</li></ul><h3 id="评价-dust" tabindex="-1">评价 dust <a class="header-anchor" href="#评价-dust" aria-label="Permalink to &quot;评价 dust&quot;">​</a></h3><p>dust 通过其简单直观的输出和智能递归功能，在磁盘空间分析工具中树立了新的标准。它的直观界面、颜色编码和易用性使其成为了查看磁盘使用情况的理想工具。对于那些寻找 <code>du</code> 现代化替代品的用户来说，dust 提供了一个功能强大且用户友好的解决方案。</p><h2 id="duf-df" tabindex="-1">duf（df） <a class="header-anchor" href="#duf-df" aria-label="Permalink to &quot;duf（df）&quot;">​</a></h2><p><img src="'+o+'" alt="图片"></p><ul><li>编程语言：Go（94%）</li><li>Star 数：9.3k</li><li>可替代：<code>df</code> 命令</li><li>介绍：通过彩色表格的方式展示磁盘使用情况的工具。不仅对设备进行了分类，还支持结果排序。</li><li>用法：<code>duf</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/muesli/duf" target="_blank" rel="noreferrer">https://github.com/muesli/duf</a></li></ul><h2 id="procs-ps" tabindex="-1">procs（ps） <a class="header-anchor" href="#procs-ps" aria-label="Permalink to &quot;procs（ps）&quot;">​</a></h2><p><img src="'+t+'" alt="图片"></p><ul><li>编程语言：Rust（99%）</li><li>Star 数：3k</li><li>可替代：<code>ps</code> 命令</li><li>介绍：能够展示进程占用的 TCP/UDP 端口、Docker 容器名称等更多信息的命令行进程管理工具，以及轻松地按列排序和关键字过滤进程。</li><li>用法：<code>procs 待过滤的关键字</code></li><li>适用平台：Linux、macOS 和 Windows 上存在一些问题</li><li>地址：<a href="https://github.com/dalance/procs" target="_blank" rel="noreferrer">https://github.com/dalance/procs</a></li></ul><h2 id="bottom-top" tabindex="-1">bottom（top） <a class="header-anchor" href="#bottom-top" aria-label="Permalink to &quot;bottom（top）&quot;">​</a></h2><p><img src="'+r+'" alt="图片"></p><ul><li>编程语言：Rust（99%）</li><li>Star 数：4.4k</li><li>可替代：<code>top</code> 命令</li><li>介绍：图形化实时监控进程和系统资源的工具。支持实时展示 CPU、内存、硬盘、网络、进程、温度等指标，而且还可通过插件扩展可视化效果，相较于其它同类型的开源项目，该项目更加活跃。</li><li>用法：<code>btm</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/ClementTsang/bottom" target="_blank" rel="noreferrer">https://github.com/ClementTsang/bottom</a></li></ul><h2 id="exa-ls" tabindex="-1">exa（ls） <a class="header-anchor" href="#exa-ls" aria-label="Permalink to &quot;exa（ls）&quot;">​</a></h2><p><img src="'+i+'" alt="图片"></p><ul><li>编程语言：Rust（92%）</li><li>Star 数：18.4k</li><li>可替代：<code>ls</code> 命令</li><li>介绍：更加人性化地显示目录下文件的工具。它通过不同颜色展示来区别文件类型，还支持以树状的方式展示文件层级、展示 Git 状态等方便的功能。</li><li>用法：<code>exa -l</code></li><li>适用平台：Linux、macOS</li><li>地址：<a href="https://github.com/ogham/exa" target="_blank" rel="noreferrer">https://github.com/ogham/exa</a></li></ul><h2 id="zoxide-cd" tabindex="-1">zoxide（cd） <a class="header-anchor" href="#zoxide-cd" aria-label="Permalink to &quot;zoxide（cd）&quot;">​</a></h2><p><img src="'+p+'" alt="图片"></p><ul><li>编程语言：Rust（98%）</li><li>Star 数：6.9k</li><li>可替代：<code>cd</code> 命令</li><li>介绍：更聪明的 <code>cd</code> 命令。能够记住你最常使用的目录，从而让目录跳转更加方便和快捷。</li><li>用法：<code>z 目录</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/ajeetdsouza/zoxide" target="_blank" rel="noreferrer">https://github.com/ajeetdsouza/zoxide</a></li></ul><h2 id="ripgrep-grep" tabindex="-1">ripgrep（grep） <a class="header-anchor" href="#ripgrep-grep" aria-label="Permalink to &quot;ripgrep（grep）&quot;">​</a></h2><p><img src="'+c+'" alt="图片"></p><ul><li>编程语言：Rust（94%）</li><li>Star 数：45.6k</li><li>可替代：<code>grep</code> 命令</li><li>介绍：超快的文本搜索工具。不仅快还更加人性化，比如自动忽略 .gitignore 中的文件、自动递归搜索、自动高亮展示匹配的结果。</li><li>用法：<code>rg &#39;关键字&#39; 目录</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noreferrer">https://github.com/BurntSushi/ripgrep</a></li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzYyNzQ0MQ==&amp;mid=2247512232&amp;idx=1&amp;sn=355246e5c81365e7f88036458ae508d1&amp;chksm=905805f6a72f8ce0eef571bb14338b36bb32de2be9de529928aec7a52dbe790c0590f1e49c27&amp;token=441186140&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">一款开源的文件搜索神器，终于不用记 find 命令了 (qq.com)</a></p><h2 id="bat-cat" tabindex="-1">bat（cat） <a class="header-anchor" href="#bat-cat" aria-label="Permalink to &quot;bat（cat）&quot;">​</a></h2><p><img src="'+d+'" alt="图片"></p><ul><li>编程语言：Rust（95%）</li><li>Star 数：35.6k</li><li>可替代：<code>cat</code> 命令</li><li>介绍：默认就带自动翻页、行号、语法高亮、Git 集成等功能的升级版文件查看工具。</li><li>用法：<code>bat 文件名</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/sharkdp/bat" target="_blank" rel="noreferrer">https://github.com/sharkdp/bat</a></li></ul><h2 id="httpie-curl" tabindex="-1">httpie（curl） <a class="header-anchor" href="#httpie-curl" aria-label="Permalink to &quot;httpie（curl）&quot;">​</a></h2><p><img src="'+u+'" alt="图片"></p><ul><li>编程语言：Python（92%）</li><li>Star 数：22.4k</li><li>可替代：<code>curl</code> 和 <code>wget</code> 命令</li><li>介绍：全能但不臃肿的命令行 HTTP 客户端。使用起来极其方便，支持请求、会话、下载、JSON 等功能。该项目经历了 Star 清零的事件（误操作），这才不到一年的时间，现在已经拥有超过 2 万的 Star 啦！</li><li>用法：<code>http/https 地址</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/httpie/httpie" target="_blank" rel="noreferrer">https://github.com/httpie/httpie</a></li></ul><h2 id="hyperfine-time" tabindex="-1">hyperfine（time） <a class="header-anchor" href="#hyperfine-time" aria-label="Permalink to &quot;hyperfine（time）&quot;">​</a></h2><p><img src="'+h+'" alt="图片"></p><ul><li>编程语言：Rust（93%）</li><li>Star 数：11.9k</li><li>可替代：<code>time</code> 命令</li><li>介绍：强大的命令行基准测试工具。支持任意 shell 命令、多次运行的统计分析和结果导出。</li><li>用法：<code>hyperfine &#39;命令1&#39; &#39;命令2&#39;</code></li><li>适用平台：Windows、Linux、macOS</li><li>地址：<a href="https://github.com/sharkdp/hyperfine" target="_blank" rel="noreferrer">https://github.com/sharkdp/hyperfine</a></li></ul><h2 id="redis-图形化的管理工具-redis-tui" tabindex="-1">Redis 图形化的管理工具：redis-Tui <a class="header-anchor" href="#redis-图形化的管理工具-redis-tui" aria-label="Permalink to &quot;Redis 图形化的管理工具：redis-Tui&quot;">​</a></h2><p><strong>「GitHub Star 数」</strong> ：674</p><p>redis-tui 是一个炫酷的 Redis 命令行图形界面工具。</p><blockquote><p>❝</p><p>GitHub 地址：<a href="https://github.com/mylxsw/redis-tui" target="_blank" rel="noreferrer">https://github.com/mylxsw/redis-tui</a></p><p>❞</p></blockquote><p><img src="'+b+'" alt="图片"></p><h1 id="终端模拟器" tabindex="-1">终端模拟器 <a class="header-anchor" href="#终端模拟器" aria-label="Permalink to &quot;终端模拟器&quot;">​</a></h1><p>当你逐渐厌倦了 cmd 的枯燥黑屏、powershell 的单调蓝底，可以来尝试一下使用可定制性更高的终端模拟器。下面是 HelloGitHub 从 GitHub 上收集的一些开源终端模拟器，它们功能丰富，界面美观，可以完美替代掉系统自带的普通终端。萝卜白菜各有所爱，挑挑看有没有让你眼前一亮，整篇文章最靓的那个“仔”。</p><p>程序员的快乐可能是一个得心应手的键盘，一款高效的 IDE，甚至一个炫酷的命令行终端。</p><p>终端是 Linux 和 Unix 系统下非常重要，且频繁使用的工具，它可以让你与你的系统进行交互。</p><p>虽然大多数时候我们都在终端做一些枯燥且乏味的事情，比如运行、监控和管理进程。但是，我们也可以尝试一些有趣的脚本，能够做到对命令行更加友好操作。</p><h2 id="_1-windows-terminal" tabindex="-1">1. Windows Terminal <a class="header-anchor" href="#_1-windows-terminal" aria-label="Permalink to &quot;1. Windows Terminal&quot;">​</a></h2><ul><li>GitHub 项目：<a href="https://github.com/microsoft/terminal" target="_blank" rel="noreferrer">https://github.com/microsoft/terminal</a></li><li>Stars 数量：58.7k</li><li>Roadmap：<a href="https://github.com/microsoft/terminal/blob/master/doc/terminal-v1-roadmap.md" target="_blank" rel="noreferrer">https://github.com/microsoft/terminal/blob/master/doc/terminal-v1-roadmap.md</a></li></ul><p><img src="'+m+'" alt="图片"></p><p>如果你是一枚 Windows 用户，那么由微软爸爸开发的 Windows Terminal 绝对是你的最佳选择。它支持多个选项卡、Unicode 和 UTF-8 字符还有 emoji、GPU 加速以及自定义主题、样式和配置。WT 使用 C++ 开发，速度很快。（上面这张图中的背景是经修改过的，默认会有 Fluent 效果）</p><h2 id="_2-hyper" tabindex="-1">2. Hyper <a class="header-anchor" href="#_2-hyper" aria-label="Permalink to &quot;2. Hyper&quot;">​</a></h2><ul><li>GitHub 项目：<a href="https://github.com/zeit/hyper" target="_blank" rel="noreferrer">https://github.com/zeit/hyper</a></li><li>Stars 数量：32.7k</li><li>官网：<a href="https://hyper.is" target="_blank" rel="noreferrer">https://hyper.is</a></li></ul><p><img src="'+g+'" alt="图片"></p><p>Hyper 使用 Electron 框架，这让它可以变得很漂亮、酷炫，但也带来了速度慢、体积大的缺点。它的插件和主题非常丰富，见 <strong>awesome-hyper</strong>，可以说是最多的。如果你不在乎性能，那 Hyper 也是不错的选择。它支持 Windows, Linux 和 MacOS。</p><h2 id="_3-terminus" tabindex="-1">3. Terminus <a class="header-anchor" href="#_3-terminus" aria-label="Permalink to &quot;3. Terminus&quot;">​</a></h2><ul><li>GitHub 项目：<a href="https://github.com/Eugeny/terminus" target="_blank" rel="noreferrer">https://github.com/Eugeny/terminus</a></li><li>Stars 数量：13.1k</li><li>官网：<a href="https://eugeny.github.io/terminus/" target="_blank" rel="noreferrer">https://eugeny.github.io/terminus/</a></li></ul><p><img src="'+y+'" alt="图片"></p><p>Terminus 是一个高度定制化的终端模拟器，同样使用了 Electron，并可以设置成 Fluent Design 风格的背景，和 Windows 10 很搭配。它集成了 SSH 客户端和连接管理器，完全支持 Unicode，包括全角字符，拥有图形界面的设置页面。支持 Windows, Linux 和 MacOS。Terminus 同样有一些插件和主题。</p><h2 id="_4-alacritty" tabindex="-1">4. Alacritty <a class="header-anchor" href="#_4-alacritty" aria-label="Permalink to &quot;4. Alacritty&quot;">​</a></h2><ul><li>GitHub 项目：<a href="https://github.com/alacritty/alacritty" target="_blank" rel="noreferrer">https://github.com/alacritty/alacritty</a></li><li>Stars 数量：21.1k</li></ul><p><img src="'+v+'" alt="图片"></p><p>Alacritty 使用 Rust 开发，追求简单和性能。号称是现有最快的终端模拟器，使用了 GPU 渲染。支持 macOS，Linux，BSD 和 Windows。目前它仍然处于 Beta 阶段。</p><p>经实测，Alacritty 的打开速度可谓“秒开”，比 Windows Terminal 还要快不少。</p><h2 id="_5-conemu" tabindex="-1">5. ConEmu <a class="header-anchor" href="#_5-conemu" aria-label="Permalink to &quot;5. ConEmu&quot;">​</a></h2><ul><li>GitHub 项目：<a href="https://github.com/Maximus5/ConEmu" target="_blank" rel="noreferrer">https://github.com/Maximus5/ConEmu</a></li><li>Stars 数量：6.6k</li><li>官网：<a href="https://conemu.github.io/" target="_blank" rel="noreferrer">https://conemu.github.io/</a></li></ul><p><img src="'+x+'" alt="图片"></p><p>这款终端使用 C++ 开发，性能优秀，功能很强大，已经有十几年的历史了。可以运行一些旧的 DOS 程序或游戏，窗口大小调整时很平滑，不过如你所见，ConEmu 实在是丑不忍睹。</p><h2 id="figlet" tabindex="-1"><strong>FIGlet</strong> <a class="header-anchor" href="#figlet" aria-label="Permalink to &quot;**FIGlet**&quot;">​</a></h2><p>FIGlet 是一个计算机程序，可以采用各种字体来生成文本横幅，由较小的 ASCII 字符组成的字母组成。</p><p><img src="'+C+'" alt="img"></p><p>这是一个巧妙的技巧，用于休闲报告很有趣。</p><p>安装方式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> figlet</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="cheat" tabindex="-1"><strong>cheat</strong> <a class="header-anchor" href="#cheat" aria-label="Permalink to &quot;**cheat**&quot;">​</a></h2><p>Cheat 是终端上的一个绝对的省时工具。</p><p><img src="'+f+'" alt="img"></p><p>它为你经常使用，但又不经常记住的命令的选项的命令行提供一个非常有用的使用介绍清单。</p><p>安装方式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cheat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="edex-ui" tabindex="-1"><strong>edex-ui</strong> <a class="header-anchor" href="#edex-ui" aria-label="Permalink to &quot;**edex-ui**&quot;">​</a></h2><p>edex-ui 是一个跨平台、可定制、充满科幻感终端模拟器，支持高级监控和触摸屏。</p><p><img src="'+k+'" alt="img"></p><p>edex-ui 做得很精致，但它几乎没有功能，而且它占用了大量的资源。</p><p>安装方式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> —</span><span style="color:#98C379;"> cask</span><span style="color:#98C379;"> edex-ui</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="cowsay" tabindex="-1"><strong>cowsay</strong> <a class="header-anchor" href="#cowsay" aria-label="Permalink to &quot;**cowsay**&quot;">​</a></h2><p>cowsay 是一个有趣的程序，可以生成带有文本内容的牛的 ASCII 艺术图片。</p><p><img src="'+q+'" alt="img"></p><p>安装方式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cowsay</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="cmatrix" tabindex="-1"><strong>cmatrix</strong> <a class="header-anchor" href="#cmatrix" aria-label="Permalink to &quot;**cmatrix**&quot;">​</a></h2><p>cmatrix 是基于 The Matrix 网站的屏保。它显示文本在一个终端中飞进飞出，就像在《黑客帝国》电影中看到的那样。</p><p><img src="'+w+'" alt="img"></p><p>它可以以相同的速度或异步地以用户定义的速度滚动所有行。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cmatrix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="say" tabindex="-1"><strong>say</strong> <a class="header-anchor" href="#say" aria-label="Permalink to &quot;**say**&quot;">​</a></h2><p>这款工具的作用正如它的名称那样，你可以用它以你喜欢的声音朗读一个文本文件。</p><p><img src="'+z+'" alt="img"></p><p>你也可以将所读的文本创建一个音频文件。可用于文本到语音的转换，也可用于快速制作音频信息。</p><p>安装方式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> say</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="bat" tabindex="-1"><strong>bat</strong> <a class="header-anchor" href="#bat" aria-label="Permalink to &quot;**bat**&quot;">​</a></h2><p>bat 是一个轻量级的脚本，在终端上提供语法高亮和 Git 集成。</p><p>它使用 rust 开发，速度非常快。</p><p><img src="'+F+'" alt="img"></p><p>在 github 上有 3 万多颗星，它肯定是非常受欢迎的。Bat-extras 还可以给你一些额外的功能。</p><p>安装方式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">port</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> bat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',297),A=[_];function S(E,B,N,R,L,D){return s(),e("div",null,A)}const T=a(P,[["render",S]]);export{O as __pageData,T as default};
