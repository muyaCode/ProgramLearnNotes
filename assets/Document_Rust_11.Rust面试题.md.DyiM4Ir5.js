import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const A=JSON.parse('{"title":"高级 Rust 面试问题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/11.Rust面试题.md","filePath":"Document/Rust/11.Rust面试题.md","lastUpdated":1714384733000}'),p={name:"Document/Rust/11.Rust面试题.md"},o=l(`<h1 id="高级-rust-面试问题" tabindex="-1">高级 Rust 面试问题 <a class="header-anchor" href="#高级-rust-面试问题" aria-label="Permalink to &quot;高级 Rust 面试问题&quot;">​</a></h1><p>在这个系列中，我们来研究一些高级 Rust 面试问题。</p><h3 id="_1、描述-rust-中的高级内存管理技术-例如使用自定义分配器和内部指针。什么时候需要这些" tabindex="-1">1、描述 Rust 中的高级内存管理技术，例如使用自定义分配器和内部指针。什么时候需要这些？ <a class="header-anchor" href="#_1、描述-rust-中的高级内存管理技术-例如使用自定义分配器和内部指针。什么时候需要这些" aria-label="Permalink to &quot;1、描述 Rust 中的高级内存管理技术，例如使用自定义分配器和内部指针。什么时候需要这些？&quot;">​</a></h3><p>在 Rust 中，所有权系统和自动内存管理为大多数场景提供了一种安全有效的方法。然而，对于高级用例，像自定义分配器和内部指针这样的技术可以更好地控制内存管理。让我们分别来看一下。</p><p><strong>自定义分配器</strong></p><p>默认情况下，Rust 使用系统分配器进行内存分配和释放。自定义分配器允许定义自己的内存分配策略。这有以下方面的好处：</p><ul><li>性能优化：在特定场景中，使用自定义分配算法的分配器可以根据应用程序的需要优化内存使用模式，从而提高性能。</li><li>内存跟踪：可以实现自定义分配器来更精确地跟踪内存分配和释放，这有助于嵌入式系统的内存调试或资源管理。</li></ul><p>下面是一个自定义分配器的例子：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::{</span></span>
<span class="line"><span style="color:#E5C07B;">    alloc</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Allocator</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E5C07B;">    error</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyAllocator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">unsafe</span><span style="color:#C678DD;"> impl</span><span style="color:#E5C07B;"> Allocator</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> MyAllocator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> allocate</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">layout</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Ptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">AllocError</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layout</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    unsafe</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> deallocate</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ptr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Ptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">layout</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">layout</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(), </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> alloc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyAllocator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ptr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">alloc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">&gt;())? };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Use the allocated memory</span></span>
<span class="line"><span style="color:#C678DD;">    unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deallocate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ptr</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">&gt;()) };</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>在使用自定义分配器时，有一些重要的注意事项：</p><ul><li>使用自定义分配器需要仔细处理内存管理和安全性。如果没有正确实现，可能会发生内存泄漏或无效的回收。</li><li>自定义分配器的好处往往是以增加复杂性和管理分配器本身的潜在性能开销为代价的。</li></ul><p><strong>内部指针(原始指针)</strong></p><p>Rust 的所有权系统可以防止悬空指针和内存泄漏。然而，在极少数情况下，你可能需要使用原始指针<code>(*const T， *mut T)</code>来与不受 Rust 所有权规则管理的内存进行交互。这在以下情况下是必要的：</p><ul><li>与 C 代码接口：当与使用原始指针的 C 库交互时，需要在 Rust 中使用原始指针来弥合差距并管理内存交换。</li><li>FFI(外部函数接口)：类似于 C 代码交互，FFI 场景涉及使用原始指针在 Rust 和外部语言之间传递数据。</li><li>不安全的数据结构：实现具有特定内存布局要求的某些数据结构可能需要使用原始指针进行细粒度控制(使用时要格外小心)。</li></ul><p>下面是一个访问不安全的原始指针的例子：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> raw_ptr</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_ptr</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 获取指向第一个元素的原始指针</span></span>
<span class="line"><span style="color:#C678DD;">    unsafe</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 使用原始指针算术访问和修改元素</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> second_element</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> raw_ptr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">offset</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">cast_mut</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        *</span><span style="color:#E06C75;">second_element</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Modified data: {:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用原始指针时需要格外小心。一些重要的注意事项是：</p><ul><li>使用原始指针绕过了 Rust 的所有权和借用保证。这大大增加了内存泄漏、悬空指针和未定义行为的风险。</li><li>只有在绝对必要时才使用原始指针，并确保在 unsafe 块中进行适当的内存管理和安全检查。</li></ul><h3 id="_2、解释-rust-中零拷贝语义的概念-以及它们如何有助于性能优化。它们与深度拷贝有何不同" tabindex="-1">2、解释 Rust 中零拷贝语义的概念，以及它们如何有助于性能优化。它们与深度拷贝有何不同？ <a class="header-anchor" href="#_2、解释-rust-中零拷贝语义的概念-以及它们如何有助于性能优化。它们与深度拷贝有何不同" aria-label="Permalink to &quot;2、解释 Rust 中零拷贝语义的概念，以及它们如何有助于性能优化。它们与深度拷贝有何不同？&quot;">​</a></h3><p><strong>零拷贝</strong></p><p>零拷贝语义描述了 Rust 中的数据操作技术，可以避免在函数调用、数据处理或序列化等操作期间不必要的内存复制。</p><p>这是通过 Rust 的所有权系统以及引用(&amp;T)和智能指针<code>(Box&lt;T&gt;， &amp;mut T)</code>等特性实现的。通过直接处理数据的底层内存位置，零拷贝操作可以显著提高性能，特别是在处理大型数据集时。</p><p>零拷贝语义的好处：</p><ul><li>减少内存开销：通过避免复制，零拷贝操作减少了内存分配和释放，从而提高了内存效率。</li><li>更快的数据处理：不需要复制，操作通常更快，特别是对于大型数据结构。</li><li>改进的并发性：零拷贝操作在并发编程中是有益的，因为它减少了多线程访问相同数据时对同步的需求。</li></ul><p>下面是零拷贝函数调用的例子：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> print_slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: &amp;[</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> element</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> numbers</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">    print_slice</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">numbers</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 传递引用以避免复制</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>深度拷贝</strong></p><ul><li>深度拷涉及创建整个数据结构的全新副本，包括其所有嵌套元素。</li><li>这确保了对副本所做的任何修改都不会影响原始数据。</li><li>通常对嵌套结构使用递归实现深度拷贝。</li></ul><p>什么时候使用深度拷贝？</p><ul><li>当需要在不影响原始数据的情况下修改数据副本时。</li><li>将数据所有权传递给可能修改数据的另一个函数时。</li><li>当处理包含需要独立复制的自有数据(如 String)的数据结构时。</li></ul><p><strong>零拷贝和深度拷贝的区别</strong></p><p>内存使用</p><ul><li>对于零拷贝，较低(避免不必要的拷贝)</li><li>对于深度拷贝，较高(创建一个完整的副本)</li></ul><p>性能</p><ul><li>对于零拷贝来说更快(避免了拷贝开销)</li><li>对于深度拷贝，速度较慢(需要复制所有元素)</li></ul><p>所有权</p><ul><li>引用或智能指针通常用于零拷贝</li><li>深度拷贝的数据具有独立的所有权</li></ul><p>修改</p><ul><li>对于零拷贝，修改会影响原始数据(如果是可变引用)</li><li>修改仅影响深度拷贝的副本数据</li></ul><h3 id="_3、解释-rust-中高级模式匹配技术的概念-例如使用守卫语句、解构嵌套结构体或枚举" tabindex="-1">3、解释 Rust 中高级模式匹配技术的概念，例如使用守卫语句、解构嵌套结构体或枚举 <a class="header-anchor" href="#_3、解释-rust-中高级模式匹配技术的概念-例如使用守卫语句、解构嵌套结构体或枚举" aria-label="Permalink to &quot;3、解释 Rust 中高级模式匹配技术的概念，例如使用守卫语句、解构嵌套结构体或枚举&quot;">​</a></h3><p>Rust 中的高级模式匹配技术超越了基本模式匹配，为处理复杂的数据结构提供了更大的灵活性。下面是一些流行的技巧：</p><p><strong>守卫</strong></p><ul><li>守卫是放置在模式分支内的条件，该条件必须为真时才能使模式匹配。</li><li>这可以根据结构体本身之外的其他标准筛选匹配。</li></ul><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> is_even</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;"> % </span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        x</span><span style="color:#C678DD;"> if</span><span style="color:#61AFEF;"> is_even</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{} is even&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{} is odd&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>对嵌套结构体或枚举进行解构</strong></p><ul><li>解构可以从元组、结构体或枚举等复杂数据结构中提取特定字段到单个变量中。</li><li>嵌套解构能够逐层分解嵌套结构体或枚举。</li></ul><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ((</span><span style="color:#98C379;">&quot;Alice&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">), [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 解构第一个元素(元组)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> numbers</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 解构第二个元素(数组)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Name: {}, Age: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Numbers: {:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">numbers</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以匹配枚举的不同变体，并访问它们的关联数据。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Origin</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    Cartesian</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> point</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Cartesian</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Point</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Origin</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Origin point&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Point</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Cartesian</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Cartesian point: ({}, {})&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>可辩驳和不可辩驳的模式</p><ul><li>可辩驳的模式可能无法匹配，允许使用_通配符或特定条件处理“不匹配”场景。</li><li>不可辩驳模式总是匹配的，通常用于保证对值存在的变量赋值。</li></ul><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> some_value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">match</span><span style="color:#E06C75;"> some_value</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Value: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">// 无可辩驳，x是有保证的</span></span>
<span class="line"><span style="color:#E5C07B;">  None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;No value present&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> another_value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> None</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 保证为None</span></span>
<span class="line"><span style="color:#C678DD;">match</span><span style="color:#E06C75;"> another_value</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">unreachable!</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">  None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;As expected, no value&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>高级模式匹配的好处</strong></p><ul><li>提高可读性：通过清晰的模式匹配条件，复杂的数据操作逻辑变得更加简洁和易于理解。</li><li>减少样板文件：解构消除了通过点符号手动访问字段的需要。</li><li>错误处理：守卫允许条件匹配，能够在模式匹配本身中处理特定的情况。</li></ul>`,54),e=[o];function r(t,c,B,y,i,u){return a(),n("div",null,e)}const b=s(p,[["render",r]]);export{A as __pageData,b as default};
