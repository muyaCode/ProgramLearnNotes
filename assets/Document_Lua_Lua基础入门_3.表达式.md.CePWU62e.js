import{_ as s,c as a,o as n,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const b=JSON.parse('{"title":"第三章 表达式","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Lua/Lua基础入门/3.表达式.md","filePath":"Document/Lua/Lua基础入门/3.表达式.md","lastUpdated":1717759497000}'),p={name:"Document/Lua/Lua基础入门/3.表达式.md"},o=l(`<h1 id="第三章-表达式" tabindex="-1">第三章 表达式 <a class="header-anchor" href="#第三章-表达式" aria-label="Permalink to &quot;第三章 表达式&quot;">​</a></h1><p>​ 表达式用于获取值或者设置值。Lua中的表达式包括数字常量、字面字符串、变量、一元和二元操作符及函数调用等。与常规不同的是，表达式中也可以包含函数定义和表结构。</p><h2 id="_3-1-算术运算符" tabindex="-1">3.1 算术运算符 <a class="header-anchor" href="#_3-1-算术运算符" aria-label="Permalink to &quot;3.1 算术运算符&quot;">​</a></h2><p>​ Lua支持常见的算术运算符：二元运算符 &#39;+&#39;（加）、&#39;-&#39;（减）、&#39;*&#39;（乘）、&#39;/&#39;（除）、&#39;^&#39;（指数）、‘%’（取模）以及一元运算符 ‘-’（取反），所有运算符的操作对象必须是实数。比如x^0.5计算x的平方根，x^(-1/3)计算x倒数的立方根。</p><p>下面的式子是取模运算的 定义：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> % </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> == </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> - </span><span style="color:#56B6C2;">math.floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)*</span><span style="color:#E06C75;">b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 当对整数进行取模运算时，意义跟通常说的取余一样，结果总是跟第二个参数的正负保持一致。但当扩展到实数域的时候，取模运算就有了额外的用途。比如，x%1是取x的小数部分；x-x%1是取它的整数部分；x-x%0.01是将x精确到两位小数：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">math.pi</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">%</span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 3.14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 再举一个使用取模运算的例子。假设想验证一辆车是否在绕行一定角度之后处于掉头状态，如果角的单位使用度（°），那么可以使用下面的代码：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> tolerance</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isturnback</span><span style="color:#ABB2BF;"> (</span><span style="color:#ABB2BF;font-style:italic;">angle</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">	angle</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">angle</span><span style="color:#ABB2BF;"> % </span><span style="color:#D19A66;">360</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">math.abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">angle</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">180</span><span style="color:#ABB2BF;">) &lt; </span><span style="color:#E06C75;">tolerance</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码对于负数角度依旧有效：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isturnback</span><span style="color:#ABB2BF;">(-</span><span style="color:#D19A66;">180</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果想用弧度替代角度，只需要如下更改代码：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> tolerance</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0.17</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isturnback</span><span style="color:#ABB2BF;"> (</span><span style="color:#ABB2BF;font-style:italic;">angle</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">	angle</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">angle</span><span style="color:#ABB2BF;"> % (</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">*</span><span style="color:#D19A66;">math.pi</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">math.abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">angle</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">math.pi</span><span style="color:#ABB2BF;">) &lt; </span><span style="color:#E06C75;">tolerance</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 语句 angle%(2*math.pi) 可以将任何角度转化成位于[0,2π]区间的弧度。</p><h2 id="_3-2-关系运算符" tabindex="-1">3.2 关系运算符 <a class="header-anchor" href="#_3-2-关系运算符" aria-label="Permalink to &quot;3.2 关系运算符&quot;">​</a></h2><p>Lua支持下面列出的关系运算符：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt; &gt; &lt;= &gt;= == ~=</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 所有这些运算符的运算结果一定是一个布尔值。</p><p>​ &quot;==&quot;用于测试是否相等；&quot;~=&quot;用于测试是否不等，这两个运算符可以接受任意两个值，Lua会认为类型不一样的两个值不相等。如果类型相等，Lua会根据他们的类型选择比较方式。特别需要指出的是，nil只跟它自身相等。</p><p>​ 如果变量的类型是表或者自定义类型，那么判断变量是否相等只是判断变量是否是同一个对象的引用。参考下面代码的例子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}; </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.x = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.y = </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = {}; </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">.x = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">.y = </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">==</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt;false</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">==</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt;true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 只能比较两个数字或者字符串的大小。Lua按照字母表排序进行字符串的比较，具体的排序取决于区域设置。比如将区域设置为&quot;葡萄牙 拉丁语-1&quot;，那么 &quot;acai&quot;&lt;&quot;açaí&quot;&lt;&quot;acorde&quot;。除了数字和字符串，其它类型的值只能比较是否相等，不能比较大小。</p><p>​ 当用不同类型的值作比较的时候，一定要小心谨慎：字符串”0“和数字0是不同的；并且2&lt;15显然是true，但&quot;2&quot;&lt;&quot;15&quot;是false（是按照字母排序）。为了帮助避免产生这种与预期不一致的结果，当用字符串跟数字比较的时候，Lua会提示错误，比如2&lt;&quot;15&quot;。</p><h3 id="_3-3-逻辑运算符" tabindex="-1">3.3 逻辑运算符 <a class="header-anchor" href="#_3-3-逻辑运算符" aria-label="Permalink to &quot;3.3 逻辑运算符&quot;">​</a></h3><p>逻辑运算符包括</p><p>and ，or，not 。 同在控制结构中类似，所有的逻辑运算符将fasle 和nil都认为是假，其它值认为是真。and 运算符在第一个参数为假的时候返回第一个参数，否则返回第二个参数。or运算符在第一个参数为真的时候返回第一个参数，否则返回第二个参数：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> and </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 5</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;"> and </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; nil</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> and </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; false</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> or </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 4</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> or </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ and和or使用&quot;短路求值&quot;的方法，也就是说，只有在必要的时候这两个运算符才会去对第二个操作数进行估值。&quot;短路求值&quot;可以保证类似（type(v)==&quot;table&quot; and v.tag==&quot;h1&quot;）的表达式不会引发运行时错误：当v不是一个表的时候，Lua就不会再去尝试获取v.tag的值。</p><p>​ Lua中的一个常见用法是x=x or v，等价于：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> not </span><span style="color:#E06C75;">x</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">v</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也就是说，当x的值没有设置的时候，给它设置一个默认值v（能够确保x的值不是false ）。</p><p>另一个常见用法是（a and b） or c，因为and 的优先级比 or 高，所以也可以简单写做a and b or c，在b不是假的前提下，它等效于C表达式a?b:c。比如，可以这样得到两个数字x和y中较大的那一个：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">max</span><span style="color:#ABB2BF;"> = (</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">) and </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> or </span><span style="color:#E06C75;">y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当x&gt;y的时候，and 的结果是x，因为x为真，所以 or 返回x，max被赋值为x；当x&lt;y时，and 的结果返回false ，所以or 返回第二个参数y，max被赋值为为y。</p><p>not操作符总是返回一个布尔类型的值：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(not </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; true</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(not </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; true</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(not </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; false</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(not not </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; true</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(not not </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-4-字符串串联" tabindex="-1">3.4 字符串串联 <a class="header-anchor" href="#_3-4-字符串串联" aria-label="Permalink to &quot;3.4 字符串串联&quot;">​</a></h2><p>​ Lua将&quot;..&quot;（两个点）定义为字符串串联运算符，如果操作数是数字，Lua会自动把数字转换成字符串（有些语言使用&#39;+&#39;作为串联运算符，但3+5和3 ..5是不同的）</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello &quot; </span><span style="color:#ABB2BF;">.. </span><span style="color:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; Hello World</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> .. </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 01</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">000</span><span style="color:#ABB2BF;"> .. </span><span style="color:#D19A66;">01</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 01</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ Lua中的字符串值是不可更改的，串联操作总是会创建一个新字符串，并不会对它的操作数做任何修改：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;Hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> .. </span><span style="color:#98C379;">&quot; World&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; Hello World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; Hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-5-长度运算符" tabindex="-1">3.5 长度运算符 <a class="header-anchor" href="#_3-5-长度运算符" aria-label="Permalink to &quot;3.5 长度运算符&quot;">​</a></h2><p>​ 长度运算符对字符串和表类型有效：它会返回字符串中的比特数或者用表实现的序列的长度。</p><p>使用长度运算符操作序列有这么几种常见用法：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[#</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">-- prints the last value of sequence &#39;a&#39;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[#</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">nil</span><span style="color:#7F848E;font-style:italic;"> -- removes this last value</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[#</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">v</span><span style="color:#7F848E;font-style:italic;"> -- appends &#39;v&#39; to the end of the list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 在最后一章将会讨论到，使用长度运算符计算有&quot;洞&quot;（空值）列表的长度，结果是不可预知的。它只对序列有效——没有&quot;洞&quot;的列表。更准确的说，序列是以数字作为键名的表，这些键名从1开始，以1递增（请牢记，实际上，表中不可能存在空值）。需要指出的是，键名类型均不是数字的表是一个长度为0的序列。</p><p>​ 多年以来，关于扩充对有洞列表的长度运算符有各种各样的提议，但都是说起来容易做起来难。问题的关键是，&quot;列&quot;的本质是&quot;表&quot;，讨论它的&quot;长度&quot;往往意义模糊。可以思考一下下面的例子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">nil</span><span style="color:#7F848E;font-style:italic;"> -- 其实什么事情都没做，因为a[2]本来就是nil</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 或许可以简单的认为这个列表的长度是4，虽然它在索引为2的位置有一个洞，那么，下面这个例子该如何解释？</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以把它认为是一个有10000个元素，但有9998个都是nil的列表吗？那如果程序再这样做：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">nil</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么，现在这个列表的长度是多少？因为它只删掉了最后一个元素，所以长度是9999吗？或者依旧是10000，程序仅仅是将最后一个元素的值设置成了nil：或者长度瓦解为1？</p><p>还有一个常见的提议是让#运算符返回一个表中所有元素的数量，这个语法看起来简单并且容易实现，但问题是，这样做根本没有实际意义。结合之前所有的例子想一下，这样一个运算符在对现实中处理列表或者数组的算法能起到怎样的作用？</p><p>更让人困惑的是列表结尾的nil该如何处理？下面列表的长度应该是多少呢：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 需要记住一点的是，对于Lua来说，一个值为nil的区域和&quot;不存在&quot;的区域之间界限模糊。因此，上面的表a等价于{10. 20. 30}，它的长度是3，而不是5。</p><p>​ 可能有人会说，结尾是nil的列表是非常特殊的情况，根本不用这么纠结。但是，在现实使用中，列表往往是通过不断一个接一个的累积才构建出最终的形态，所有通过这种形式得到的有洞列表，肯定都曾有过结尾是nil的情况。</p><p>​ 在程序中使用的多数列表都是序列（比如文件的任何一行都不能是nil），因此，多数时候使用长度运算符是安全的。但对于有洞列表必须特殊对待，应当在某个位置显式声明它的长度，而不能指望长度运算符一定能得到你期望的结果。</p><h2 id="_3-6-优先级" tabindex="-1">3.6 优先级 <a class="header-anchor" href="#_3-6-优先级" aria-label="Permalink to &quot;3.6 优先级&quot;">​</a></h2><p>Lua中的运算符优先级遵从下面的表格，按照从高到到低排列</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">^</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">not</span><span style="color:#7F848E;font-style:italic;"> # -（一元取反）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\*</span><span style="color:#98C379;"> /</span><span style="color:#98C379;"> %</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\+</span><span style="color:#98C379;"> -</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">..</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt; &gt; &lt;= &gt;= ~= ==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">and</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">or</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>除了&#39;^&#39;（指数运算符）和&#39;..&#39;（串联运算符），其它所有的二元运算符都是左结合的。下面的例子中，左边和邮编的表达式等价：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">+</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#7F848E;font-style:italic;">--&gt; (a+i) &lt; ((b/2)+1)</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">+</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">*</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#7F848E;font-style:italic;">--&gt; 5+((x^2)*8)</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> and </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> &lt;= </span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#7F848E;font-style:italic;">--&gt; (a &lt; y) and (y &lt;= z)</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#7F848E;font-style:italic;">--&gt; -(x^2)</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">^</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">^</span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#7F848E;font-style:italic;">--&gt; x^(y^z)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 当对优先级有疑问的时候，一定要使用括号来显式指明运算关系，这比查找参考手册简单的多，而且，下次重读代码的时候，你可能依旧会有疑问。</p><h2 id="_3-7-表构造器" tabindex="-1">3.7 表构造器 <a class="header-anchor" href="#_3-7-表构造器" aria-label="Permalink to &quot;3.7 表构造器&quot;">​</a></h2><p>​ 构造器是一种用于创建和初始化表格的表达形式，它是Lua的独有功能，也是Lua最有用和最实用的功能之一。</p><p>​ 最简单的构造器是空构造器{}，正如之前用过的那样，它可以创建一个空表。构造器在创建的同时也</p><p>可以初始化表，比如下面的声明：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">days</span><span style="color:#ABB2BF;"> = {</span><span style="color:#98C379;">&quot;Sunday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Monday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Tuesday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Wednesday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Thursday&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;Friday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Saturday&quot;</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 可以将days[1]用字符串&quot;Sunday&quot;初始化（用构造器初始化的表中，第一个元素的索引是1，不是0），days[2]用&quot;Monday&quot;，以此类推：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">days</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; Wednesday</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Lua同样提供一种初始化类似记录形式的表的特殊方法，正如下面的例子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上一行代码与下面等价：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}; </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.x=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.y=</span><span style="color:#D19A66;">20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>第一种表达方法更快一些，因为Lua在创建表的时候已经知道了它的实际大小。</p><p>不管是用哪种方法创建和初始化了一个表，都可以任意在结果中增删元素：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;"> = {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;console&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> = {</span><span style="color:#56B6C2;">math.sin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">), </span><span style="color:#56B6C2;">math.sin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">), </span><span style="color:#56B6C2;">math.sin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)}</span></span>
<span class="line"><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;another field&quot; </span><span style="color:#7F848E;font-style:italic;">-- 向表&#39;w&#39;中增加键1</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">.f = </span><span style="color:#E06C75;">w</span><span style="color:#7F848E;font-style:italic;"> -- 向表&#39;w&#39;中增加键&quot;f&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 0</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; another field</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">.f[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; another field</span></span>
<span class="line"><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;">.x = </span><span style="color:#D19A66;">nil</span><span style="color:#7F848E;font-style:italic;"> -- 从表&#39;w&#39;中移除键&quot;x&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但正如刚刚提到的，使用非空构造器初始化表不仅更高效，看起来也更优雅。</p><p>在同一个构造器中可以混用两种格式对表进行初始化：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">polyline</span><span style="color:#ABB2BF;"> = {</span></span>
<span class="line"><span style="color:#E06C75;">    color</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;blue&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    thickness</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    npoints</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">}, </span><span style="color:#7F848E;font-style:italic;">-- polyline[1]</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=-</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">}, </span><span style="color:#7F848E;font-style:italic;">-- polyline[2]</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=-</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">}, </span><span style="color:#7F848E;font-style:italic;">-- polyline[3]</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">-- polyline[4]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 上面的例子也在说明如何嵌套使用构造器来创建一个能够表示复杂数据结构的表。polyline[i]的每个</p><p>元素都是一个表示记录的表：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">polyline</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">].x) </span><span style="color:#7F848E;font-style:italic;">--&gt; -10</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">polyline</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].y) </span><span style="color:#7F848E;font-style:italic;">--&gt; 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 这两种构造器都有它们的局限性，比如无法使用负数作为数字索引，也无法使用不合法标识符作为字符串索引。为了满足要求，Lua中还有一种更通用的格式。在这种格式中，可以使用方括号赋值语句来对索引进行显示的初始化：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">opnames</span><span style="color:#ABB2BF;"> = {[</span><span style="color:#98C379;">&quot;+&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;-&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;sub&quot;</span><span style="color:#ABB2BF;">,[</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;mul&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;-&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">opnames</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; sub</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; --</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>​ 这种语法更复杂，也更灵活，其它两种形式都是折翼通用语法的特殊情况。比如 {x=0,y=0}等价于：{[&quot;x&quot;]=0,[&quot;y&quot;]=0， {&quot;r&quot;,&quot;g&quot;,&quot;b&quot;等价于{[1]=&quot;r&quot;,[2]=&quot;g&quot;,[3]=&quot;b&quot;}。</p><p>​ 通用构造器构造一个表的时候，最后一个大括号前可以加一个分号，这个尾部的分号可选，但不影响使用：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]=</span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]=</span><span style="color:#98C379;">&quot;green&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]=</span><span style="color:#98C379;">&quot;blue&quot;</span><span style="color:#ABB2BF;">,}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 这种设定使得那些能够自动生成Lua构造器代码的程序不需要特殊处理最后一个元素。</p><p>​ 最后，在构造器中，逗号和分号是可以任意替代的。通常习惯使用分号作为构造器中不同部分间的分割，比如将列表部分和记录部分区分开：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">45</span><span style="color:#ABB2BF;">; </span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;three&quot;</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><p>练习3.1：下面的代码会打印什么内容？</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = -</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> % </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>练习3.2 表达式 2^3^4的结果是什么？2^-3^4呢？</p><p>练习3.3：</p>`,99),e=[o];function t(r,c,B,i,y,u){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{b as __pageData,A as default};
