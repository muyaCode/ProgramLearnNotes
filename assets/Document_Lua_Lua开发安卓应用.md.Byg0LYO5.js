import{_ as a,c as s,o as n,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const y=JSON.parse('{"title":"Lua 开发安卓应用","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Lua/Lua开发安卓应用.md","filePath":"Document/Lua/Lua开发安卓应用.md","lastUpdated":1714994494000}'),e={name:"Document/Lua/Lua开发安卓应用.md"},o=l(`<h1 id="lua-开发安卓应用" tabindex="-1">Lua 开发安卓应用 <a class="header-anchor" href="#lua-开发安卓应用" aria-label="Permalink to &quot;Lua 开发安卓应用&quot;">​</a></h1><p>在将 Lua 脚本打包成 APK 文件之前，需要将 Lua 脚本编译成 Android 可执行文件。这可以通过使用 Lua 编译器或 Lua 解释器实现。</p><p>一种常用的 Lua 编译器是 LuaJIT，它能够将 Lua 代码编译成 C 代码，并生成一个可在 Android 上运行的可执行文件。</p><p>另外一种选择是使用 Lua 解释器，例如 LuaPlayer，它能够在 Android 上运行 Lua 脚本。</p><p>当你有了可执行文件之后，就可以使用 Android Studio 或其他 Android 开发工具将其打包成 APK 文件。</p><p>需要注意的是，如果你使用 LuaPlayer 就需要添加 LuaPlayer 的库文件到你的工程中。</p><p>在打包 APK 之前，需要确保你的脚本符合安卓的策略，如不能包含不合法的内容，符合安卓的权限要求等。</p><h2 id="andlua-、androluaj、aluaj、助手、手册-v1-5" tabindex="-1">ANDLUA+、ANDROLUAJ、ALUAJ、助手、手册 V1.5 <a class="header-anchor" href="#andlua-、androluaj、aluaj、助手、手册-v1-5" aria-label="Permalink to &quot;ANDLUA+、ANDROLUAJ、ALUAJ、助手、手册 V1.5&quot;">​</a></h2><p><a href="https://www.cnblogs.com/RobertL/p/14527191.html" target="_blank" rel="noreferrer">AndLua Android - 萝卜 L - 博客园 (cnblogs.com)</a></p><h3 id="分支、版本" tabindex="-1">分支、版本 <a class="header-anchor" href="#分支、版本" aria-label="Permalink to &quot;分支、版本&quot;">​</a></h3><ul><li><strong>AndroLua</strong>：适用于 Android 的 Lua 环境，国外<a href="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">开源项目</a>，最后更新日期 201301。</li><li>AndroLua+：基于<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLua" target="_blank" rel="noreferrer">AndroLua</a>的分支，替代<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLua" target="_blank" rel="noreferrer">AndroLua</a>。又叫<strong>AndroLua_pro</strong>、alua。<br><a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noreferrer">开源项目</a>，国内作者<a href="https://github.com/nirenr" target="_blank" rel="noreferrer">nirenr</a>，QQ 群 236938279，<a href="http://tieba.baidu.com/mo/m?kw=androlua" target="_blank" rel="noreferrer">百度贴吧</a>。<a href="https://gitee.com/linkle/AndroLua" target="_blank" rel="noreferrer">linkle/AndroLua (gitee.com)</a></li><li><a href="https://github.com/nirenr" target="_blank" rel="noreferrer">nirenr (github.com)</a></li><li><a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noreferrer">nirenr/AndroLua_pro: Lua5.3.3 for android pro (github.com)</a></li><li><strong>Aide Lua</strong>：<a href="https://gitee.com/Jesse205/AideLua" target="_blank" rel="noreferrer">Aide Lua: 依赖 Aide ，使用 Lua 快速、高效开发的工具 (gitee.com)</a></li><li>reOpenLua+源代码：<a href="https://github.com/daisukiKaffuChino/reOpenLua-Open-Source" target="_blank" rel="noreferrer">daisukiKaffuChino/reOpenLua-Open-Source (github.com)</a></li><li>MyLuaApp：<a href="https://github.com/dingyi222666/MyLuaApp" target="_blank" rel="noreferrer">dingyi222666/MyLuaApp: MyLuaApp is a light and faster software run in Android Arm Devices to develop Android software with Lua or Java. (github.com)</a></li><li>是<a href="http://code.google.com/p/jillcode/" target="_blank" rel="noreferrer">jillcode</a>，<a href="http://sourceforge.net/projects/luaj/" target="_blank" rel="noreferrer">luaj</a>，的一些的混合体 其他特定于 Android 的类和一些自定义<a href="http://www.lua.org/" target="_blank" rel="noreferrer">Lua</a>库。允许 在 Android 本身中构建 Android 应用程序的原型，<a href="https://andlua.sourceforge.net/" target="_blank" rel="noreferrer">AndLua (sourceforge.net)</a></li><li>ALua 手册：面向<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>，又叫<strong>ALuaGuide</strong>、<strong>ALua 手册</strong>，&quot;关于&quot;中叫&quot;ALua 助手-重生版&quot;，<a href="https://github.com/HK-SHAO/ALuaGuide" target="_blank" rel="noreferrer">开源项目</a>，最后更新日期 201709，APP 包名&quot;com.sf.ALuaGuide&quot;、（老版本?）&quot;com.shaofeng.aluazhushou&quot;，版本 0.8，作者&quot;烧风&quot;（shaofeng、<a href="https://github.com/HK-SHAO" target="_blank" rel="noreferrer">HK-SHAO</a>），QQ：2063597709。内容来自&quot;nirenr&quot;、&quot;寒歌&quot;等。</li><li>AndLua+：基于<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>，又叫<strong>AndLuaPlus</strong>、<strong>ALua+</strong>，<a href="https://github.com/xc912/AndLuaPlus" target="_blank" rel="noreferrer">开源项目</a>，最后更新日期 202108，版本 6.7（20200925），国内作者 Alone（liyang），<s><a href="https://ly250.cn/andlua" target="_blank" rel="noreferrer">个人网站</a></s>（失效），APP 包名&quot;com.AndLua.LY&quot;，QQ 群 574867511。</li><li>AndLua++：在<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaPlus" target="_blank" rel="noreferrer">AndLua+</a>中提及（链接失效），貌似为<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaPlus" target="_blank" rel="noreferrer">AndLua+</a>的分支——6.8 版本，APP 包名不同，安装时至少与 6.7 版不冲突。</li><li>AndLua++Pro：在<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaPlus" target="_blank" rel="noreferrer">AndLua+</a>中提及（链接失效）。</li><li>AndLua+手册：在<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaPlus" target="_blank" rel="noreferrer">AndLua+</a>中提及（链接失效），作者&quot;陵阳&quot;，APP 包名&quot;com.andlua.help&quot;，QQ 群 450874686。</li><li>AndroLuaJ：基于<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>，最后版本 1.2.8，作者<a href="http://www.github.com/mythoi" target="_blank" rel="noreferrer">mythoi</a>，<a href="http://androluaj.mythoi.cn/" target="_blank" rel="noreferrer">项目网站</a>、<s><a href="http://www.occhao.cc/AndroLuaJ/" target="_blank" rel="noreferrer">官网</a></s>（失效），APP 包名&quot;com.mythoi.developerApp&quot;，QQ 群<a href="https://jq.qq.com/?_wv=1027&amp;k=5RgCS9W" target="_blank" rel="noreferrer">551480248</a>。</li><li>ALuaJ：基于<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaJ" target="_blank" rel="noreferrer">AndroLuaJ</a>，较 AndroLuaJ 轻量，<a href="https://github.com/mythoi/ALuaJ" target="_blank" rel="noreferrer">开源项目</a>，最后更新日期 201909，基于<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>4.1.0，作者<a href="http://www.github.com/mythoi" target="_blank" rel="noreferrer">mythoi</a>，<s><a href="https://www.aluaj.tk/" target="_blank" rel="noreferrer">官网</a></s>（失效）。</li><li>ALuaJ 助手：作者&quot;寒武纪&quot;，APP 包名&quot;com.ALuaJ.zhushou&quot;。</li></ul><p>以上<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaJ" target="_blank" rel="noreferrer">AndroLuaJ</a>、<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALuaJ" target="_blank" rel="noreferrer">ALuaJ</a>网站提及彼此的差异——Java、Lua、C/C++环境，及对 NDK 的支持不同。</p><h3 id="学习资源" tabindex="-1">学习资源 <a class="header-anchor" href="#学习资源" aria-label="Permalink to &quot;学习资源&quot;">​</a></h3><ul><li>上文提及的<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALua%E6%89%8B%E5%86%8C" target="_blank" rel="noreferrer">ALua 手册</a>、<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaP%E6%89%8B%E5%86%8C" target="_blank" rel="noreferrer">AndLua+手册</a>、<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALuaJ%E5%8A%A9%E6%89%8B" target="_blank" rel="noreferrer">ALuaJ 助手</a>。<br> 未见<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLua" target="_blank" rel="noreferrer">AndroLua</a>手册。</li><li><a href="https://www.android-doc.com/reference/packages.html" target="_blank" rel="noreferrer">Android 手册</a>。</li><li><a href="http://www.androlua.cn/" target="_blank" rel="noreferrer">Androlua+论坛</a></li><li>上文提及的<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>的<a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noreferrer">开源项目</a>文档。<br> 貌似已包含于<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALua%E6%89%8B%E5%86%8C" target="_blank" rel="noreferrer">ALua 手册</a>。</li><li><a href="https://t.me/s/AndLuaEN" target="_blank" rel="noreferrer">AndLua+ English – Telegram</a>，尚更新。</li><li>AndLua+有微信小程序<strong>AndLua+源码中心</strong>（失效）。</li><li>上文提及的官网、QQ 群。</li></ul><hr><p>感觉把<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>看作内核，<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaPlus" target="_blank" rel="noreferrer">AndLua+</a>、<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaJ" target="_blank" rel="noreferrer">AndroLuaJ</a>、<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALuaJ" target="_blank" rel="noreferrer">ALuaJ</a>看作封装实现。<br> 开发可使用<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndroLuaP" target="_blank" rel="noreferrer">AndroLua+</a>或<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaPlus" target="_blank" rel="noreferrer">AndLua+</a>或<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALuaJ" target="_blank" rel="noreferrer">ALuaJ</a>，参考<a href="https://www.android-doc.com/reference/packages.html" target="_blank" rel="noreferrer">Android 手册</a>，辅助用<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALua%E6%89%8B%E5%86%8C" target="_blank" rel="noreferrer">ALua 手册</a>或<a href="https://www.cnblogs.com/RobertL/p/16722997.html#AndLuaP%E6%89%8B%E5%86%8C" target="_blank" rel="noreferrer">AndLua+手册</a>或<a href="https://www.cnblogs.com/RobertL/p/16722997.html#ALuaJ%E5%8A%A9%E6%89%8B" target="_blank" rel="noreferrer">ALuaJ 助手</a>、<a href="https://t.me/s/AndLuaEN" target="_blank" rel="noreferrer">AndLua+ English – Telegram</a>。</p><h2 id="android-lua-相互调用" tabindex="-1">Android Lua 相互调用 <a class="header-anchor" href="#android-lua-相互调用" aria-label="Permalink to &quot;Android Lua 相互调用&quot;">​</a></h2><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fliangchenhe55%2FAndroid-Lua" target="_blank" rel="noreferrer">GitHub: Android-Lua</a></p><h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>本文基于 <strong>Lua 5.3</strong>.</p><p>Lua 是一个轻量级脚本语言，常用于嵌入其他语言作为补充。关于更多 Lua 本身的问题不在本文讨论范围之内。<br> 在 Android 中嵌入 Lua 优点很多，借助 Lua 脚本语言的优势，可以轻松实现动态逻辑控制，应用可以随时从服务器读取最新 Lua 脚本文件，在不更新应用的情况下修改程序逻辑。<br> 可惜 Lua 官方只提供了 C API ，而 Android 主要使用 JAVA 作为开发语言。我们可以借助 JNI 来间接实现在 Android 中嵌入 Lua 。</p><h1 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">​</a></h1><p>自己实现 JNI 是一件很费力的事情，还好有人已经造好了轮子叫做 Luajava ，并且又有人基于 Luajava 做了 Android 专用库。网上流传最广的是 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmkottman%2FAndroLua" target="_blank" rel="noreferrer">Androlua</a> ，不过作者已经多年不维护了，对 Lua 的支持依然停留在 5.1 并且有一些 bug，有人 Fork 了这个项目，并将其更新至 Lua 5.3 ：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Flendylongli%2FAndroLua" target="_blank" rel="noreferrer">New Androlua</a> ，不过这个项目也存在一些问题，我修复了一下但是作者并没有处理我的 pull request ，各位可以直接使用我修复优化后的：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fliangchenhe55%2FAndroid-Lua" target="_blank" rel="noreferrer">Android-Lua</a>.</p><p>在修复 bug 的同时，我也添加了一些中文注释，减少第一次接触 Lua C API 朋友们的学习记忆成本。</p><p>由于最终需要调用 Lua C API，所以请先配置 NDK 开发环境。在 Android Studio 中打开 SDK Manager，切换到 SDK Tools 标签页，勾选<code>CMake</code>、<code>LLDB</code>、<code>NDK</code>下载安装之。</p><p><img src="https://upload-images.jianshu.io/upload_images/5418298-3176d9f6c133457c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/799/format/webp" alt=""></p><p>NDK 环境</p><h1 id="导入工程" tabindex="-1">导入工程 <a class="header-anchor" href="#导入工程" aria-label="Permalink to &quot;导入工程&quot;">​</a></h1><p>仅仅想实现 Android Lua 互相调用，不关心具体过程的，可以直接添加依赖：<br><code>implementation &#39;cc.chenhe:android-lua:1.0.2&#39;</code> 然后后边的导入部分可以跳过了。</p><p>Clone github 项目到本地并用 Android Studio 打开。大致可以看到下图目录结构。（由于后期更新，结构不一定完全相同）</p><p><img src="https://upload-images.jianshu.io/upload_images/5418298-4e7b810f825fbe6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/495/format/webp" alt=""></p><p>目录结构</p><p>其中 <code>androidlua</code>是库，<code>app</code>是 demo 工程。库中，<code>lua</code>下是 Lua 解释引擎，<code>luajava</code>是 JNI 的有关代码。<code>*.mk</code> 文件是 NDK 配置文件，详情请参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.android.com%2Fndk%2Fguides%2Fandroid_mk.html" target="_blank" rel="noreferrer">Google NDK 文档</a>。</p><p>你可以将 <code>androidlua</code>Module 导入自己工程作为依赖库使用。</p><h1 id="lua-api-知识普及" tabindex="-1">Lua API 知识普及 <a class="header-anchor" href="#lua-api-知识普及" aria-label="Permalink to &quot;Lua API 知识普及&quot;">​</a></h1><p>此时我们已经可以在 Android 与 Lua 直接互相调用了。但是在开始之前，还要学习下 Lua C API 的有关东西，因为这是与 Lua 交互的基础。</p><p>Lua 与 C 依靠一个虚拟的栈来完成数据交换。包括变量、函数、参数、返回值等在内的一切数据，都要放入栈中来共享。为了调用方便，这个栈并不是严格遵循栈的规则。从索引来看，栈底索引为 1，往上依次递增。而栈顶索引是-1，往下依次递减。因此，正负索引都是合法的，但是 0 不可以。下面是栈的示意图：</p><p><img src="https://upload-images.jianshu.io/upload_images/5418298-154887f22148c908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/350/format/webp" alt=""></p><p>Lua 栈</p><p>Lua 提供了大量的 C API，与其他语言的交互完全依赖这些 API，下面的基础教程中本文会介绍几个基础的，具体可以查看<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2F" target="_blank" rel="noreferrer">Lua 官方手册</a></p><p>这些函数均由 Lua 提供，在 Luajava 中被封装在 <code>LuaState</code> 类下。</p><h3 id="lual-openlibs" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23luaL_openlibs" target="_blank" rel="noreferrer">luaL_openlibs</a> <a class="header-anchor" href="#lual-openlibs" aria-label="Permalink to &quot;[luaL_openlibs](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23luaL_openlibs)&quot;">​</a></h3><p>加载 Lua 标准库，一般需要调用一下。</p><h3 id="lual-dostring" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23luaL_dostring" target="_blank" rel="noreferrer">luaL_dostring</a> <a class="header-anchor" href="#lual-dostring" aria-label="Permalink to &quot;[luaL_dostring](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23luaL_dostring)&quot;">​</a></h3><p>执行一段 Lua 脚本。</p><h3 id="lual-dofile" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23luaL_dofile" target="_blank" rel="noreferrer">luaL_dofile</a> <a class="header-anchor" href="#lual-dofile" aria-label="Permalink to &quot;[luaL_dofile](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23luaL_dofile)&quot;">​</a></h3><p>执行给定文件中的 Lua 脚本。</p><h3 id="lua-dump" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_dump" target="_blank" rel="noreferrer">lua_dump</a> <a class="header-anchor" href="#lua-dump" aria-label="Permalink to &quot;[lua_dump](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_dump)&quot;">​</a></h3><p>获取当前栈的内容。<br> java 中对应函数是<code>dumpStack()</code>，返回 String，可以直接输出，便于调试。</p><h3 id="lua-pushxxx" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_pushstring" target="_blank" rel="noreferrer">lua_pushXXX</a> <a class="header-anchor" href="#lua-pushxxx" aria-label="Permalink to &quot;[lua_pushXXX](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_pushstring)&quot;">​</a></h3><p>将各种类型的数据压入栈，以便未来使用。</p><h3 id="lua-toxxx" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_tostring" target="_blank" rel="noreferrer">lua_toXXX</a> <a class="header-anchor" href="#lua-toxxx" aria-label="Permalink to &quot;[lua_toXXX](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_tostring)&quot;">​</a></h3><p>将栈中指定索引处的值以 xxx 类型取出。</p><h3 id="lua-getglobal" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_getglobal" target="_blank" rel="noreferrer">lua_getglobal</a> <a class="header-anchor" href="#lua-getglobal" aria-label="Permalink to &quot;[lua_getglobal](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_getglobal)&quot;">​</a></h3><p>获取 Lua 中的全局变量（包括函数），并压入栈顶，以便未来使用。<br> 参数就是要获取的变量的名字。</p><h3 id="lua-getfield" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_getfield" target="_blank" rel="noreferrer">lua_getfield</a> <a class="header-anchor" href="#lua-getfield" aria-label="Permalink to &quot;[lua_getfield](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_getfield)&quot;">​</a></h3><p>获取 Lua 中 某一 table 的元素，并压入栈顶。<br> 第一个参数是 table 在栈中的索引，第二个参数是要获取元素的 key.</p><h3 id="lua-pcall" tabindex="-1"><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_pcall" target="_blank" rel="noreferrer">lua_pcall</a> <a class="header-anchor" href="#lua-pcall" aria-label="Permalink to &quot;[lua_pcall](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.lua.org%2Fmanual%2F5.3%2Fmanual.html%23lua_pcall)&quot;">​</a></h3><p>执行 Lua 函数。<br> 第一个参数是此函数的参数个数，第二个是返回值个数，第三个是错误处理函数在栈中的索引。</p><p><strong>下面的内容已过时，具体教程与 Demo 请参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fliangchenhe55%2FAndroid-Lua" target="_blank" rel="noreferrer">GitHub: Android-Lua</a></strong>。</p><h3 id="enjoy-coding" tabindex="-1"><s>Enjoy coding</s> <a class="header-anchor" href="#enjoy-coding" aria-label="Permalink to &quot;~~Enjoy coding~~&quot;">​</a></h3><p>终于要开始调用了，想想还有点小激动呢~</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> readAssetsTxt</span><span style="color:#E06C75;">( </span><span style="color:#E5C07B;">Context</span><span style="color:#E06C75;"> context</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> fileName ){</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        InputStream</span><span style="color:#E06C75;"> is  </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAssets</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">( fileName );</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;">     size    </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> is</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">available</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* Read the entire asset into a local byte buffer. */</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#E06C75;">[] buffer </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[size]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        is</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">( buffer );</span></span>
<span class="line"><span style="color:#E5C07B;">        is</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* Convert the buffer into a string. */</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> text </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#E06C75;">( buffer</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;utf-8&quot;</span><span style="color:#E06C75;"> )</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* Finally stick the string into the text view. */</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;">(text)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> ( </span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;"> ) {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;err&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="创建-lua-栈" tabindex="-1">创建 Lua 栈 <a class="header-anchor" href="#创建-lua-栈" aria-label="Permalink to &quot;创建 Lua 栈&quot;">​</a></h3><p>之前说了，依靠一个虚拟的栈来完成数据交换。那么首先我们当然要创建这个栈。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">LuaState</span><span style="color:#E06C75;"> lua </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LuaStateFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newLuaState</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> //创建栈</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">openLibs</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> //加载标准库</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> //养成良好习惯，在执行完毕后销毁Lua栈。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="执行-lua-脚本" tabindex="-1">执行 Lua 脚本 <a class="header-anchor" href="#执行-lua-脚本" aria-label="Permalink to &quot;执行 Lua 脚本&quot;">​</a></h3><p>我们可以使用<code>LdoString()</code>来执行一段简单的脚本。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;local a = 1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">LdoString</span><span style="color:#ABB2BF;">(l);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样就执行了一个很简单的脚本，他声明了一个全局变量<code>l</code>，值为 1.</p><p>当然，也可以使用<code>LdoFile()</code>来加载脚本文件，不过这需要你先把脚本复制到 SD 卡才行。因为在 APK 中是没有“路径”可言的。</p><h3 id="读取-lua-变量与-table" tabindex="-1">读取 Lua 变量与 table <a class="header-anchor" href="#读取-lua-变量与-table" aria-label="Permalink to &quot;读取 Lua 变量与 table&quot;">​</a></h3><p>首页要说明的是，只有全局变量（非 local）才可以读取。<br> test.lua:</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">111</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> = {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;Chenhe&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">2222</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>android:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getGlobal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //获取变量a并将值压入栈</span></span>
<span class="line"><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toInteger</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //以int类型取出栈顶的值（也就是a）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getGlobal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //获取变量t并压入栈顶，此时table位于栈顶。</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getField</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //取出栈顶的table的name元素，压入栈顶。</span></span>
<span class="line"><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t.name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> //以string类型取出栈顶的值（也就是t.name）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dump&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dumpStack</span><span style="color:#ABB2BF;">());</span><span style="color:#7F848E;font-style:italic;"> //输出当前栈</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>运行后可以看到 log:</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">I</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">111</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#56B6C2;">/</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Chenhe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">dump</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 111.0</span></span>
<span class="line"><span style="color:#D19A66;">        2</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">table</span></span>
<span class="line"><span style="color:#D19A66;">        3</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Chenhe&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们已经成功读取了 Lua 中的变量。</p><h3 id="执行-lua-函数" tabindex="-1">执行 Lua 函数 <a class="header-anchor" href="#执行-lua-函数" aria-label="Permalink to &quot;执行 Lua 函数&quot;">​</a></h3><p>调用 Lua 函数的一般流程为：</p><ol><li>获取函数并入栈。</li><li>压入各个参数（如果有）</li><li>调用函数，指明参数个数、返回值个数、错误处理函数。</li><li>获取返回值（如果有）</li></ol><p>test.lua:</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>android:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getGlobal</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //获取函数并入栈</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushInteger</span><span style="color:#ABB2BF;">( </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //压入第一个参数a</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushInteger</span><span style="color:#ABB2BF;">( </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //压入第二个参数b</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pcall</span><span style="color:#ABB2BF;">( </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //执行函数，有2个参数，2个返回值，不执行错误处理。</span></span>
<span class="line"><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;r1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toInteger</span><span style="color:#ABB2BF;">( </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> ) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //输出第一个返回值</span></span>
<span class="line"><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;r2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toInteger</span><span style="color:#ABB2BF;">( </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> ) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //输出第二个返回值</span></span>
<span class="line"><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;dump&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dumpStack</span><span style="color:#ABB2BF;">() );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>运行后可以看到 log:</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">I</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">r1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">r2</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">dump</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 8.0</span></span>
<span class="line"><span style="color:#D19A66;">        2</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这就成功地执行了 Lua 函数，并取得 2 个返回值。而之前入栈的函数以及参数，在执行的时候 Lua 已经弹出了，所以最后栈里只剩下 2 个返回值。</p><h3 id="传入-java-对象" tabindex="-1">传入 Java 对象 <a class="header-anchor" href="#传入-java-对象" aria-label="Permalink to &quot;传入 Java 对象&quot;">​</a></h3><p>得益于 Luajava 以及 Androlua 的封装，我们可以直接将对象作为参数传入，并在 Lua 中直接执行对象的成员函数。</p><p>test.lua:</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> setText</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">tv</span><span style="color:#ABB2BF;">,</span><span style="color:#ABB2BF;font-style:italic;">s</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    tv</span><span style="color:#ABB2BF;">:</span><span style="color:#61AFEF;">setText</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set by Lua.&quot;</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    tv</span><span style="color:#ABB2BF;">:</span><span style="color:#61AFEF;">setTextSize</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>android:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getGlobal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;setText&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //获取函数</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushJavaObject</span><span style="color:#ABB2BF;">(textView);</span><span style="color:#7F848E;font-style:italic;"> //把TextView传入</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Demo&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //传入一个字符串</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pcall</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //执行函数，有2个参数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="https://upload-images.jianshu.io/upload_images/5418298-0ffc26d85bb61314.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/404/format/webp" alt=""></p><p>执行结果</p><h3 id="注入-lua-变量" tabindex="-1">注入 Lua 变量 <a class="header-anchor" href="#注入-lua-变量" aria-label="Permalink to &quot;注入 Lua 变量&quot;">​</a></h3><p>有时我们需要在 android 中创建 Lua 变量，这样就可以在 Lua 中直接使用了。注意，这里创建的变量都是全局的（非 local）。</p><p>test.lua:</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> setText</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">tv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    tv</span><span style="color:#ABB2BF;">:</span><span style="color:#61AFEF;">setText</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set by Lua.&quot;</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">--这里的s变量由java注入</span></span>
<span class="line"><span style="color:#E5C07B;">    tv</span><span style="color:#ABB2BF;">:</span><span style="color:#61AFEF;">setTextSize</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>android:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushString</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;from java&quot;</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //压入欲注入变量的值</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setGlobal</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;s&quot;</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //压入变量名</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getGlobal</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;setText&quot;</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //获取Lua函数</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushJavaObject</span><span style="color:#ABB2BF;">( textView );</span><span style="color:#7F848E;font-style:italic;"> //压入参数</span></span>
<span class="line"><span style="color:#E5C07B;">lua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pcall</span><span style="color:#ABB2BF;">( </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> );</span><span style="color:#7F848E;font-style:italic;"> //执行函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://upload-images.jianshu.io/upload_images/5418298-67b9b5b456a0f6fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp" alt=""></p><p>执行结果</p><p>可以看到 Lua 成功调用了 Java 注入的变量<code>s</code>.</p><h3 id="lua-调用-java" tabindex="-1">Lua 调用 java <a class="header-anchor" href="#lua-调用-java" aria-label="Permalink to &quot;Lua 调用 java&quot;">​</a></h3><p>Lua 调用 java 函数相对复杂，毕竟 java 不是脚本语言。我们需要将 java 函数包装成一个 <code>JavaFunction</code> 类，实例化之后注册到 lua，这样才可以从 lua 调用。下面看一个例子：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyJavaFunction</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> JavaFunction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> MyJavaFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LuaState</span><span style="color:#E06C75;font-style:italic;"> luaState</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(luaState);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> execute</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取Lua传入的参数，注意第一个参数固定为上下文环境。</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> L</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        SimpleDateFormat</span><span style="color:#E06C75;"> simpleDateFormat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SimpleDateFormat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Date</span><span style="color:#E06C75;"> date</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">        L</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">simpleDateFormat</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(date) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> str);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 返回值的个数</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> register</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 注册为 Lua 全局函数</span></span>
<span class="line"><span style="color:#61AFEF;">            register</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;testJava&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">LuaException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>我们创建一个类继承 <code>JavaFunction</code> 并实现 <code>execute</code> 方法，它将在被 lua 调用时执行。前面说过，lua 与 c 靠栈来交换数据，故调用函数所传的参数也会入栈。需要注意的是第一个参数恒为 lua 的上下文环境，实际传入的参数是从 2 开始。在这个简单的例子中，我们取得了 lua 传递的字符串，并将其拼接在由 java 获取的时间字符串后边一起返回给 lua。</p><p>与传参类似，返回值也是直接入栈即可。最后我们需要返回返回值的个数，这样 lua 就知道从栈里取出几个元素作为返回值了。这些元素会被自动出栈。这里我们利用 <code>L.pushString()</code> 将拼接后的字符串返回给 lua，并返回 <code>1</code> 表示有 1 个返回值。</p><p>最后，调用 <code>register</code> 方法注册到 lua，传入的字符串参数就是在 lua 中的函数名。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MyJavaFunction</span><span style="color:#E06C75;">(lua)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>像这样实例化刚才包装的类就可以成功注册了。现在我们可以在 lua 中调用 <code>testJava(String)</code>，它将返回一个字符串，内容是当前的时间加上我们传入的字符串。</p><h3 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h3><ul><li><a href="https://www.jianshu.com/p/fc4bee82c3ef" target="_blank" rel="noreferrer">Windows 下编译 LuaJIT</a></li><li><a href="https://www.jianshu.com/p/3aee06f8039f" target="_blank" rel="noreferrer">Android 嵌入 LuaJIT 的曲折道路</a></li></ul><h2 id="android-studio-配置-lua-开发环境" tabindex="-1">android Studio 配置 LUA 开发环境 <a class="header-anchor" href="#android-studio-配置-lua-开发环境" aria-label="Permalink to &quot;android Studio 配置 LUA 开发环境&quot;">​</a></h2><h3 id="关于-android-lua-资料" tabindex="-1">关于 Android LUA 资料 <a class="header-anchor" href="#关于-android-lua-资料" aria-label="Permalink to &quot;关于 Android LUA 资料&quot;">​</a></h3><blockquote><p><strong>android 如何调用 lua？</strong><br><a href="http://blog.csdn.net/ZZ7ZZ7ZZ/article/category/1730609" target="_blank" rel="noreferrer">Android lua 教程</a><br><a href="http://www.lua.org/start.html" target="_blank" rel="noreferrer">Lua 官网</a><br><a href="https://zh.wikipedia.org/wiki/Lua" target="_blank" rel="noreferrer">lua 语言解释</a><br><a href="http://www.codingnow.com/2000/download/lua_manual.html" target="_blank" rel="noreferrer">Lua 5.1 参考手册</a><br><a href="http://blog.csdn.net/elsdnwn/article/details/48651585" target="_blank" rel="noreferrer">Android Lua 热修复</a></p></blockquote><ol><li>引诉大牛的原话：</li></ol><p>Android 调用 Lua /Lua 调用 Android 代码</p><p>在 Android 项目中使用 Lua，需要两个步骤：</p><p>1、加载 Lua 脚本解析引擎。<br> 2、以 Native API 方式调用引擎接口</p><p>直接以 JNI 方式调用 Lua 解析引擎的接口十分麻烦，开源项目<br><a href="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">LuaJava</a>）对这些 JNI 接口进行了很好的封装，它是一个包含了 LuaJava 的 Android 平台的 Lua 解析器，它提供一系列映射到 Lua C 实现函数的 Java 接口。</p><p>1.获取 LuaJava 工程，引入到你的 Android Studio 中，并将其设为 Library 工程</p><p>2.将 Lua 解析器相关的 C 代码和 LuaJava 的 C 代码打包成 so 文件</p><p>一. 将 androLua 以 moudle 方式引入到 Android studio 的 Project 工作区中</p><p>此时需要保证你的 Android studio 的 NDK 开发环境已经配置完成，关于如何配置 NDK,教程请移步<a href="http://blog.csdn.net/u010350809/article/details/46840893" target="_blank" rel="noreferrer">MAC NDK 环境配置</a></p><p>二. 修改自动生成的 androLua 的 build.gradle 文件配置如下 主要将  apply plugin: ‘com.android.application’  替换为  apply plugin: ‘com.android.library’<br> 屏幕快照 2015-12-25 上午 12.15.20<img src="https://img-blog.csdn.net/20151226171047532" alt="这里写图片描述"></p><p>如果编译 报错：请修改 jni/luajava/luajava.c 文件 ：将导入头文件的路径修改如下</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &lt;jni.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &quot;../lua/lua.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &quot;../lua/lualib.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &quot;../lua/lauxlib.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &quot;../lua/lstate.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &quot;../lua/lauxlib.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    #include</span><span style="color:#98C379;"> &quot;../lua/lualib.h&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>为了照顾全平台的兼容性建议在 jni 目录下新建 Application.mk 文件 写入内容为：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">APP_ABI</span><span style="color:#ABB2BF;"> :=</span><span style="color:#E5C07B;"> all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>三.我的版本下我需要将 androLua 的 AndroidMainfest 文件的</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">    &lt;?</span><span style="color:#E06C75;">xml</span><span style="color:#D19A66;"> version</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#D19A66;"> encoding</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">manifest</span><span style="color:#D19A66;"> android:versionCode</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#D19A66;"> android:versionName</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#D19A66;"> package</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;sk.kottman.androlua&quot;</span><span style="color:#D19A66;"> xmlns:android</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://schemas.android.com/apk/res/android&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-sdk</span><span style="color:#D19A66;"> android:minSdkVersion</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;4&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-permission</span><span style="color:#D19A66;"> android:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;android.permission.INTERNET&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-permission</span><span style="color:#D19A66;"> android:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-permission</span><span style="color:#D19A66;"> android:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;android.permission.BLUETOOTH&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-permission</span><span style="color:#D19A66;"> android:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;android.permission.CAMERA&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-permission</span><span style="color:#D19A66;"> android:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;android.permission.VIBRATE&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">uses-permission</span><span style="color:#D19A66;"> android:name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;android.permission.READ_SMS&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  //屏蔽掉入口，只作为lib引入</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  &lt;!--&lt;application android:icon=&quot;@drawable/icon&quot; android:label=&quot;@string/app_name&quot;&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--&lt;activity android:label=&quot;@string/app_name&quot; android:name=&quot;.Main&quot;&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      &lt;!--&lt;intent-filter&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--&lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      &lt;!--&lt;/intent-filter&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--&lt;/activity&gt;--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  &lt;!--&lt;/application&gt;--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">manifest</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>四. 在你的 App 的模块的引入处修改你的 build.gradle 文件<br> 主要是增加 ： <strong>compile project(‘:androLua’)</strong></p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">    dependencies</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    compile</span><span style="color:#61AFEF;"> fileTree</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;libs&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;*.jar&#39;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    testCompile &#39;</span><span style="color:#E5C07B;">junit</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">junit</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">4.12</span><span style="color:#98C379;">&#39;</span></span>
<span class="line"><span style="color:#98C379;">    compile &#39;</span><span style="color:#E06C75;">com</span><span style="color:#ABB2BF;">.android.support:</span><span style="color:#E06C75;">appcompat</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">v7</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">23.1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#98C379;">&#39;</span></span>
<span class="line"><span style="color:#98C379;">    compile &#39;</span><span style="color:#E06C75;">com</span><span style="color:#ABB2BF;">.android.support:</span><span style="color:#E06C75;">design</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">23.1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1</span><span style="color:#98C379;">&#39;</span></span>
<span class="line"><span style="color:#98C379;">    compile project(&#39;</span><span style="color:#ABB2BF;">:androLua</span><span style="color:#98C379;">&#39;)</span></span>
<span class="line"><span style="color:#98C379;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>不要急着编译 ,检查一下你的工程的 build.gradle<br> 五：使用<strong>com.android.tools.build:gradle:1.3.1</strong></p><p>我本来是用 2.0.3 支持 Android studio 的 Fast RUN 功能 ，当时编译这个 Lua 一直无法通过 ，如果你也遇到这种问题，请将插件版本换为 1.3.1</p><p>六. 基本上配置已经完成了：<br> 试着在你的项目中引入<strong>LuaState</strong>吧。<br> 七：Android studio 的 NDK 编译生成的.so 文件目录路径为：app/build/intermediates/ndk</p><h2 id="androlua-pro" tabindex="-1">androlua_pro <a class="header-anchor" href="#androlua-pro" aria-label="Permalink to &quot;androlua_pro&quot;">​</a></h2><p>androlua_pro 虽然没有解决 ndk 开发 so 库来调用，但是将 so 库在 android studio 集成为一个 so 供 alua 调用(activity.loadLib()方法就可以)，android 本身就可以执行 shell(基于 linux)，所以 linux 上面很多高级功能都阔以实现</p><p>下载地址：<a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noreferrer">nirenr/AndroLua_pro: Lua5.3.3 for android pro (github.com)</a></p><p>官方群下载：621400904，236938279。</p><h3 id="为啥要用-androlua-pro-它的优点是什么" tabindex="-1">为啥要用 androlua_pro，它的优点是什么？ <a class="header-anchor" href="#为啥要用-androlua-pro-它的优点是什么" aria-label="Permalink to &quot;为啥要用 androlua_pro，它的优点是什么？&quot;">​</a></h3><ol><li><p>优点之一：无需编译，直接运行，开发速度何止原生 app 的百十倍！</p></li><li><p>优点之二：反编译破解难度贼高，我们知道 java 或者 kotlin 编译的字节码反汇编的 smali 语言是可以修改的，jdgui 就可以查看原 java，mt 管理器基本上就可以破解没加固 app 的所有功能。</p></li><li><p>优点之三：lua 语言无障碍调用安卓 api，大量 lua 方法比 java 更加高效快捷。</p></li><li><p>优点之四：基础依赖库非常全面，全为 lua 文件库，因此 alua 编译出来的软件体积比原生安卓软件小太多！</p></li><li><p>优点之五：无障碍调用其他软件的 dex 和 so(jar 等转成 dex 也能用)</p></li></ol><h2 id="轻松实现-lua-编程语言在安卓端运行" tabindex="-1">轻松实现 Lua 编程语言在安卓端运行 <a class="header-anchor" href="#轻松实现-lua-编程语言在安卓端运行" aria-label="Permalink to &quot;轻松实现 Lua 编程语言在安卓端运行&quot;">​</a></h2><p>Lua 是一种轻量小巧的脚本语言，用标准 C 语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p><img src="https://pics2.baidu.com/feed/a1ec08fa513d2697e7b3cd03b86925fd4216d8a2.jpeg@f_auto?token=df54142e062c32c232eda00a90fb3100" alt=""></p><p>接触过|Lua 语言的都知道 Lua 是一门胶水语言，通过代码之间的调用，能够跨平台运行，在许多游戏的开发中都有 Lua 的身影，Lua 可以通过代码解释器直接运行，无需编译</p><p>实现的前提需要 Lua 的代码解释器，</p><p>如图，导入所需 Java api 以后，再导入安卓布局，</p><p>实现在 Java 上面相互调用，也算是一种安卓混合开发：Java+xml+Lua</p><p><img src="https://pics3.baidu.com/feed/c75c10385343fbf2a36a512049ec5d8664388f8c.jpeg@f_auto?token=b7da2711854c277038272e75ea44e69f" alt="">main.lua 是主要代码文件</p><p>用 import 调用 Dex 里面的类库</p><p>Lua 的安卓运行工具可以在网络上面下载，也可以在 GitHub 上面查找下载使用</p><p>如何把 Lua 做成软件，到达运行目的</p><p><img src="https://pics2.baidu.com/feed/b3fb43166d224f4ac24f8eb8f16507549a22d1e5.jpeg@f_auto?token=30ff1652b4e356f7eed4a50174670cd2" alt="">闲言 App 的 xml 清单</p><p>1.原生安卓的开发工具一般是 Android studio 所需的核心文件</p><p>Java、xml、dex、gradle、class、jar 等各种复杂的文件，</p><p>众多的文件会导致安装包的 rom 很大，对手机不利，减少运存。</p><p><img src="https://pics6.baidu.com/feed/e4dde71190ef76c63171a9066a846afcae516791.jpeg@f_auto?token=df01cf7cc95ba605570ca826ca0676a8" alt="">软件内的 Java 文件</p><p>在使用 Lua 语言这种轻量编程环境下，能减少很多文件，</p><p>比如只需要 dex、Java、xml、Lua 这四种核心文件即可，这些不需要打包可以直接运行，</p><p>2.由于 Java 的特殊性，运行时仅会加载 Lua 函数和代码，Java 代码需要打包后才能实现</p><p><img src="https://pics1.baidu.com/feed/c83d70cf3bc79f3d203c8a104d335a17738b294e.jpeg@f_auto?token=86798eb32b221a68cb4c0eb548c90788" alt="">闲言 App 内部分 Lua 代码</p><p>在 gen 文件下编写 Java 代码，在 xml 清单调用 Java 代码，</p><p>这个软件全局采用 Lua 代码，在 Lua 文件之前互相调用，形成完整的代码支持</p><p>代码文件我觉得有必要这里一下，把源码工程当作自己的家</p><p>未编译的 Lua 工程源码运行只会加载 Lua 和 table 文件代码，运行时需要 init.lua 文件的支持</p><p><img src="https://pics2.baidu.com/feed/9f510fb30f2442a751ff07a92bd13a4dd0130266.jpeg@f_auto?token=05e6b91f4fcccf60133f3e5ad2dc1f7a" alt="">xml 调用 Java 函数</p><p>总结：Lua 开发安卓软件很罕见，打包后的安装包 rom 很小，性能高效，这不属于原生开发吧，更多 Lua 开发安卓软件的实列在网络上面可以查到的，典型的实例如闲言 App，实现众多功能以后还能把 rom 大小克制在 5M 以内。</p><p>提示：Lua 文件容易被破解，建议在打包时把 Lua 和 dex 一并加密，可减少破解的可能性。</p><h2 id="lua-开发打包-apk-的源码" tabindex="-1">Lua 开发打包 APK 的源码 <a class="header-anchor" href="#lua-开发打包-apk-的源码" aria-label="Permalink to &quot;Lua 开发打包 APK 的源码&quot;">​</a></h2><p><a href="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">mkottman/AndroLua：Lua 和 LuaJava 移植到 Android (github.com)</a></p><p><a href="https://github.com/ichenhe/Android-Lua" target="_blank" rel="noreferrer">ichenhe/Android-Lua：基于 Androlua，做一些实际的改变。 (github.com)</a></p><p><a href="https://gitee.com/AideLua/AideLua" target="_blank" rel="noreferrer">Aide Lua: 依赖 Aide ，使用 Lua 快速、高效开发的工具 (gitee.com)</a></p><p><a href="https://gitee.com/three-to-three/and-lua-a" target="_blank" rel="noreferrer">AndLua: Alone 大佬所写的一个 lua 编辑器 官网:https://andlua.top/ (gitee.com)</a></p><p><a href="https://github.com/TheMostBlack/AndLuaX" target="_blank" rel="noreferrer">TheMostBlack/AndLuaX: AndLuaX+ (github.com)</a></p><p><a href="https://github.com/mythoi/ALuaJ" target="_blank" rel="noreferrer">mythoi/ALuaJ: 移动端 IDE，支持 lua 和 java 编译运行，支持打包 apk (github.com)</a></p><p><a href="https://github.com/xiao00kang/AndroLua_Project_Template" target="_blank" rel="noreferrer">xiao00kang/AndroLua_Project_Template: 使用此模板在 Android Studio 上开发 AndroLua 应用！ (github.com)</a></p><p><a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noreferrer">nirenr/AndroLua_pro: Lua5.3.3 for android pro (github.com)</a></p><p><a href="https://github.com/AideLua/AndroLuaX" target="_blank" rel="noreferrer">AideLua/AndroLuaX: 适配了 AndroidX 的 AndroLua+ (github.com)</a></p><p><a href="https://github.com/dingyi222666/AndroLua-Standalone" target="_blank" rel="noreferrer">dingyi222666/AndroLua-Standalone: 在 android 上运行 lua (github.com)</a></p><p><a href="https://github.com/xiao00kang/AndroLua_Project_Template" target="_blank" rel="noreferrer">xiao00kang/AndroLua_Project_Template: 使用此模板在 Android Studio 上开发 AndroLua 应用！ (github.com)</a></p><p><a href="https://github.com/JealousCat/AndroLua_Pro_Plus" target="_blank" rel="noreferrer">JealousCat/AndroLua_Pro_Plus: 将 AndroLua 的 Lua 版本从 5.3.x 升级到了 Lua5.4.4（Lua 5.4.4 for Android development） (github.com)</a></p><p><a href="https://github.com/haodynasty/AndroidLuaExample" target="_blank" rel="noreferrer">haodynasty/AndroidLuaExample：Lua 5.3.3 和 LuaJava 移植到 Android 示例 (github.com)</a></p><p><a href="https://github.com/haodynasty/AndroidLuaExample" target="_blank" rel="noreferrer">haodynasty/AndroidLuaExample：Lua 5.3.3 和 LuaJava 移植到 Android 示例 (github.com)</a></p><h2 id="androlua" tabindex="-1">Androlua <a class="header-anchor" href="#androlua" aria-label="Permalink to &quot;Androlua&quot;">​</a></h2><p>开源地址：<a href="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">mkottman/AndroLua：Lua 和 LuaJava 移植到 Android (github.com)</a></p><p><a href="https://lua.dianas.cyou/pages/9f7e48/#%E5%BF%AB%E9%80%9F%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8B%E6%99%AE%E9%81%8D%E5%86%99%E6%B3%95" target="_blank" rel="noreferrer">Lua 初见 | AndroluaDocs (dianas.cyou)</a></p><h2 id="androluadocs" tabindex="-1">AndroluaDocs <a class="header-anchor" href="#androluadocs" aria-label="Permalink to &quot;AndroluaDocs&quot;">​</a></h2><p><a href="https://lua.dianas.cyou/pages/ffda64/#%E6%B8%A0%E9%81%9302-%E5%BC%80%E6%BA%90%E4%BB%93%E5%BA%93" target="_blank" rel="noreferrer">项目资源下载 | AndroluaDocs (dianas.cyou)</a></p><h2 id="开源" tabindex="-1">开源 <a class="header-anchor" href="#开源" aria-label="Permalink to &quot;开源&quot;">​</a></h2><p><a href="https://github.com/sudoskys/Moonnote" target="_blank" rel="noreferrer">sudoskys/Moonnote: A note-taking application developed using the Androlua framework |使用 Androlua 框架开发的一款笔记应用 (github.com)</a></p><p><a href="https://github.com/huajiqaq/Hydrogen" target="_blank" rel="noreferrer">huajiqaq/Hydrogen: 一个基于 androlua+开发的第三方知乎安卓客户端 (github.com)</a></p><h2 id="使用-lua-语言开发-android-应用" tabindex="-1">使用 lua 语言开发 Android 应用 <a class="header-anchor" href="#使用-lua-语言开发-android-应用" aria-label="Permalink to &quot;使用 lua 语言开发 Android 应用&quot;">​</a></h2><p>做移动端开发，做蛋疼的就是不能<strong>动态发版</strong>，不能像 web 那样发版立即全部用户生效，然而  <a href="http://www.runoob.com/manual/lua53doc/" target="_blank" rel="noreferrer">lua</a>语言 为其提供了可能性。</p><p>使用 lua 来构建跨平台原生应用有许多好处，比如 lua 语言简洁高效，可移植性好， Lua 虚拟机极为轻量，仅占用 200 到 300k 的内存空间，且速度极快。</p><p>luaDevAndroid：<a href="https://github.com/hanks-zyh/luaDevAndroid" target="_blank" rel="noreferrer">hanks-zyh/luaDevAndroid: dev android use lua language (github.com)</a></p><h2 id="android-与-lua-android-与-lua-掘金" tabindex="-1">Android 与 Lua：<a href="https://juejin.cn/post/6844903715435085838" target="_blank" rel="noreferrer">Android 与 Lua - 掘金</a> <a class="header-anchor" href="#android-与-lua-android-与-lua-掘金" aria-label="Permalink to &quot;Android 与 Lua：[Android 与 Lua - 掘金](https://juejin.cn/post/6844903715435085838)&quot;">​</a></h2><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.lua.org%2F" title="https://www.lua.org/" target="_blank" rel="noreferrer">Lua</a>: 一种轻量语言，由标准 C 编写而成，体积小，启动速度快。Lua 有一个同时进行的 JIT 项目，提供在特定平台上的即时编译功能。</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.luaj.org%2Fluaj%2F3.0%2FREADME.html" title="https://www.luaj.org/luaj/3.0/README.html" target="_blank" rel="noreferrer">LuaJ</a>： Luaj 是一个 Java 的 Lua 解释器，基于 Lua 5.2.x 版本，目的是：</p><ul><li>基于 Java 的实现，可以在 Java 应用中集成 Lua 虚拟机</li><li>轻量级、高性能的执行 Lua</li><li>多平台支持</li><li>完整的库和工具支持</li><li>可在 Java ME、SE 和 EE 环境中执行</li><li>luajava api 支持</li><li>混合调试</li></ul><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmkottman%2FAndroLua" title="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">AndroLua</a> : <code>Androlua</code> 是安卓平台上的用 Lua 开发安卓程序的工具，不仅支持调用 Java API，而且支持编写安卓界面程序，还可以将自己写的 Lua 程序打包成 apk 安装文件安装。Lua 语言的简单使没有任何编程经验的用户也能在短时间内开发出安卓程序。(来自百度<a href="https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Flink%3Furl%3DuKUBS37YCr-ASuAsGJH4RaS2dTbm0AUq_1la8TGBJUHrdjkeFhTwqbxJy4OZkagOI146bPK0csWnijBr-zQ2uLOzN4f_pJGkWOcd5jWf-Hm" title="https://baike.baidu.com/link?url=uKUBS37YCr-ASuAsGJH4RaS2dTbm0AUq_1la8TGBJUHrdjkeFhTwqbxJy4OZkagOI146bPK0csWnijBr-zQ2uLOzN4f_pJGkWOcd5jWf-Hm" target="_blank" rel="noreferrer">百科</a>)</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Falibaba%2FLuaViewSDK" title="https://github.com/alibaba/LuaViewSDK" target="_blank" rel="noreferrer">LuaViewSDK - Android 版</a> <code>LuaViewSDK</code> 由阿里聚划算无线开发团队开发并维护， LuaView 是一种运行在一个 ViewController/Activity 中，可以<strong>灵活加载</strong> Lua 脚本，并能够按照 <strong>Native</strong> 的方式运行的一种面向业务的开发技术方案。可以快速开发电商应用中既要求体验又要求灵活性的页面功能，例如首页，类目首页，垂直频道，大促活动会场等。LuaViewSDK 还有 iOS 版。</p><h3 id="luaviewsdk-体验" tabindex="-1">LuaViewSDK 体验 <a class="header-anchor" href="#luaviewsdk-体验" aria-label="Permalink to &quot;LuaViewSDK 体验&quot;">​</a></h3><p>官方文档放了一个很详细的入门文档 👉<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Falibaba%2FLuaViewSDK%2Fblob%2Fmaster%2FAndroid%2FDocumentation%2F%25E6%2596%25B0%25E6%2589%258B%25E5%2585%25A5%25E9%2597%25A8-android%2F%25E6%2596%25B0%25E6%2589%258B%25E5%2585%25A5%25E9%2597%25A8%2520-%2520android.md" title="https://github.com/alibaba/LuaViewSDK/blob/master/Android/Documentation/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8-android/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%20-%20android.md" target="_blank" rel="noreferrer">新手入门 - android</a></p><p>下面的是我自己创建的项目，加载 assets 目录下的 <code>haha.lua</code> 文件</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/17/1671d4842a48b7c9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" title="" alt="图片" width="275"><p>下面尝试加载外部的脚本文件， 我在 sd 卡上新建了一个 <code>local.lua</code> 脚本文件 内容如下</p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">w,</span><span style="color:#C678DD;">h</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> System.screenSize()</span><span style="color:#7F848E;font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;">window.frame(0, 0, w, h)</span><span style="color:#7F848E;font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;">window.backgroundColor(0x220000)</span><span style="color:#7F848E;font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">label</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> Label()</span><span style="color:#7F848E;font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;">label.frame(16,16,w, 60)</span><span style="color:#7F848E;font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;">label.text(</span><span style="color:#98C379;">&quot;Local Hello World LuaView to Android&quot;</span><span style="color:#98C379;">)</span><span style="color:#7F848E;font-style:italic;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><img title="" src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/17/1671d483bade267e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="" width="411"><p>我们页可加载服务器上的 lua 脚本，注意校验服务器的文件，防止 lua 脚本恶意攻击。</p><h3 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h3><ul><li><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fopensource%2Fos-cn-LUAScript%2F" title="https://www.ibm.com/developerworks/cn/opensource/os-cn-LUAScript/" target="_blank" rel="noreferrer">Lua 在移动平台上的应用</a></li></ul>`,216),p=[o];function r(t,c,i,u,d,B){return n(),s("div",null,p)}const h=a(e,[["render",r]]);export{y as __pageData,h as default};
