import{_ as s,c as n,o as a,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const h=JSON.parse('{"title":"Docker 加持的安卓手机：随身携带的知识库","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/Docker应用/Docker 加持的安卓手机：随身携带的知识库.md","filePath":"Document/Docker/Docker应用/Docker 加持的安卓手机：随身携带的知识库.md","lastUpdated":1716297813000}'),p={name:"Document/Docker/Docker应用/Docker 加持的安卓手机：随身携带的知识库.md"},r=e(`<h1 id="docker-加持的安卓手机-随身携带的知识库" tabindex="-1">Docker 加持的安卓手机：随身携带的知识库 <a class="header-anchor" href="#docker-加持的安卓手机-随身携带的知识库" aria-label="Permalink to &quot;Docker 加持的安卓手机：随身携带的知识库&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/urIhljeFPw5hxrfaXVzdng" target="_blank" rel="noreferrer">7.4K Star这么牛!Docker里面可以运行Android系统 (qq.com)</a></p><p>这篇文章聊聊，如何借助 Docker ，尝试将一台五年前的手机，构建成一个随身携带的、本地化的知识库。</p><h2 id="写在前面" tabindex="-1">写在前面 <a class="header-anchor" href="#写在前面" aria-label="Permalink to &quot;写在前面&quot;">​</a></h2><p>本篇文章，我使用了一台去年从二手平台购入的五年前的手机，K20 Pro。</p><p>![图片](./Docker 加持的安卓手机：随身携带的知识库.assets/640.webp)用于实验的设备：K20 Pro</p><p>为了让它能够稳定持续的运行，我还为它准备了一个“加强版”的散热壳。</p><p>![图片](./Docker 加持的安卓手机：随身携带的知识库.assets/640-1714814287144-1.webp)加强的“散热装备”</p><p>设想中的平时使用场景也非常简单，不需要插卡、不需要联网，一根 Type-C 数据线把它和电脑连在一起，就可以通过“本地连接”来访问手机中运行的提供服务的软件。</p><p>因为手机本身自带“UPS”（电池），所以即使突然断电，也不会出现数据的丢失，除此之外，因为手机已经是五年前的规格了，即使大手笔的购入顶配中的至尊版，成本也并不高，但是却可以比较轻松的获得一台 8核心、12GB 内存、500GB 的硬盘设备。甚至还有一块可以用来调试或者展示内容的“全面屏”，没有任何摄像头打孔的完整玻璃屏幕。</p><p>至于性能，如果能够完全配置正常，应该是非常有性价比，但是这应该需要一些折腾，所以本篇文章是第一篇，先验证可行性。</p><p>本文中的许多资料来自开源项目 <strong>CGCL-codes/Android-Container[1]</strong>，感谢作者的辛苦劳动。不过项目距今为止已有三年没有更新，我个人推荐只做验证使用，一如本文中的使用方案。</p><h3 id="为什么选择这台-k20-pro" tabindex="-1">为什么选择这台 K20 Pro <a class="header-anchor" href="#为什么选择这台-k20-pro" aria-label="Permalink to &quot;为什么选择这台 K20 Pro&quot;">​</a></h3><p>翻阅之前的文章，我发现我差不多每年都会折腾一下小米的手机。</p><p>•今年早些时候，聊过使用搭载 8Gen3 的红米 K70 Pro 跑模型《<strong>使用搭载骁龙 8 Gen 3 的安卓手机运行 AI 大模型[2]</strong>》•2023 年的时候，折腾过闲置的小米 12 Pro《<strong>小米 12 PRO 刷 MIUI 14 海外版（Android 12）[3]</strong>》•2022 年的时候，折腾过红米 11T Pro 《<strong>红米 11T PRO 刷机 MIUI 13 海外版[4]</strong>》•2021 年的时候，折腾过 K30 Pro《<strong>小米 K30 PRO 刷机 MIUI 12.5 海外版[5]</strong>》•2019 年的时候，折腾过 K20 Pro《<strong>小米 K20Pro 体验 Android 10[6]</strong>》</p><p>因为种种原因，目前的小米开发者生态没有了过去的开放，开发者难以获取 Bootloader 权限，各种有趣的功能要排队内测，甚至 GitHub 上都出现了一些离谱的项目，比如 “<strong>小米高考题库[7]</strong>”，来解决解锁刷机权限必须度过的大量八股测试题；“<strong>小米解锁项目[8]</strong>”，“<strong>小米解锁方案合集[9]</strong>” 等等项目。</p><p>**虽然，看起来现在的小米手机型号已经不再适合折腾。**但是，过去的手机，有没有可能变成一台比较有趣的设备，做一些比较有趣的事情呢？</p><p><strong>毕竟，过去的小米手机还是很顶的！“守门员”、“焊门员”、“小金刚”这些产品形容词不光包含了营销成分，也有来自粉丝们的赞许。</strong></p><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>这次的准备工作非常简单，首先是“适合折腾的手机”，我选择的是 K20 Pro，你可以选择你喜欢的设备。</p><p>然后，是一台协助手机重获新生的“电脑”，Windows 或者 macOS 桌面系统的设备会比较方便，我使用的是 macOS。</p><p>最后，需要一根 Type-C 口的数据线，能够将手机连到电脑上。</p><h2 id="第一步-解锁手机-bootloader-权限" tabindex="-1">第一步：解锁手机 Bootloader 权限 <a class="header-anchor" href="#第一步-解锁手机-bootloader-权限" aria-label="Permalink to &quot;第一步：解锁手机 Bootloader 权限&quot;">​</a></h2><p>你可以参考上文中，我分享的之前的相关手机折腾记录，来将手机解锁，以便我们能够刷入 TWRP，并在后续过程中刷入验证 Docker 使用的新的安卓系统镜像。</p><p>如果你使用的设备也是 K20 Pro（Mi 9T Pro），可以从这里下载该设备的 <strong>TWRP 引导镜像[10]</strong>。</p><p>更新设备的 BootLoader 非常简单，只需要电脑侧执行下面两条命令即可：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>fastboot flash recovery twrp.img</span></span>
<span class="line"><span>fastboot reboot</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="第二步-按顺序刷入设备使用的系统镜像" tabindex="-1">第二步：按顺序刷入设备使用的系统镜像 <a class="header-anchor" href="#第二步-按顺序刷入设备使用的系统镜像" aria-label="Permalink to &quot;第二步：按顺序刷入设备使用的系统镜像&quot;">​</a></h2><p>在<strong>项目子目录文档的底部[11]</strong>，我们能够找到用于验证的安卓镜像。</p><p>我们需要先刷入来自小米官方的 <code>miui_RAPHAEL_V12.0.5.0.QFKCNXM_d03168fb55_10.0.zip</code> 镜像，这个镜像发布自 2020 年 10 月 18 日，基于 Android 10 构建。如果项目页面下载比较慢，你<strong>可以从这里下载官方镜像[12]</strong>。</p><p>在刷入官方镜像后，我们就可以刷入项目作者构建好的镜像 <code>PixelExperience_raphael-10.0-20201204-0354-UNOFFICIAL-48bit-docker-criu.zip</code>，来进行功能验证了。</p><p>在这个文档的上面，作者简单解释了如何进行镜像构建，而在<strong>另外一个目录中文档[13]</strong>，则包含了另外一些比较重要的信息，包括如何给镜像内核做调整，来让 Docker 能够运行起来。</p><p>当我们完成镜像的更新后，就需要手动来完善运行环境，让 Docker 运行起来啦。</p><h2 id="第三步-修复-docker-运行环境" tabindex="-1">第三步：修复 Docker 运行环境 <a class="header-anchor" href="#第三步-修复-docker-运行环境" aria-label="Permalink to &quot;第三步：修复 Docker 运行环境&quot;">​</a></h2><p>首先在一个命令行终端中执行：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>adb shell</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在进入一个交互式终端后，输入下面的命令，让我们能够修改系统中的只读目录：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>mount -o rw,remount /</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接着，我们将**项目 Docker 目录[14]**和项目 files 目录的 <strong>files/dockerd.sh[15]</strong> 使用 <code>adb push</code> 命令，传送到手机的 <code>/system/bin/</code> 目录下，一个基本的 Docker 运行环境就就绪啦。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># adb push ./dockerd.sh /system/bin/dockerd.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>./dockerd.sh: 1 file pushed, 0 skipped. 7.7 MB/s (4016 bytes in 0.000s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>为了我们操作 Docker 程序更方便，我们可以手动修复 <code>docker-compose</code> 命令，在 Compose 项目的<strong>发布页面[16]</strong>，我们找到最新版本的 <code>docker-compose-linux-aarch64</code> 文件，下载，并使用上面的方式传送到手机环境中，并设置正确的执行权限。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># adb push ./docker-compose-linux-aarch64 /system/bin/docker-compose</span></span>
<span class="line"><span></span></span>
<span class="line"><span>./docker-compose-linux-aarch64: 1 file pushed, 0 skipped. 32.2 MB/s (61276577 bytes in 1.815s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>adb shell su -c &quot;chmod +x /system/bin/docker-compose&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="改进的-dockerd-sh" tabindex="-1">改进的 <code>dockerd.sh</code> <a class="header-anchor" href="#改进的-dockerd-sh" aria-label="Permalink to &quot;改进的 \`dockerd.sh\`&quot;">​</a></h3><p>我对原始项目的 <code>dockerd.sh</code> 做了一些简单调整：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#!/system/bin/sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mount -o rw,remount /</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建 Docker 相关的目录</span></span>
<span class="line"><span>root_dirs=(&quot;/var&quot; &quot;/run&quot; &quot;/tmp&quot; &quot;/opt&quot; &quot;/usr&quot; &quot;/system/etc/docker&quot;)</span></span>
<span class="line"><span>for dir in &quot;\${root_dirs[@]}&quot;; do</span></span>
<span class="line"><span>    if [ ! -d &quot;$dir&quot; ]; then</span></span>
<span class="line"><span>        mkdir &quot;$dir&quot;</span></span>
<span class="line"><span>    fi</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建 /data 目录相关的目录</span></span>
<span class="line"><span>data_dirs=(&quot;/data/var:/var&quot; &quot;/data/run:/run&quot; &quot;/data/tmp:/tmp&quot; &quot;/data/opt:/opt&quot; &quot;/data/etc/docker:/etc/docker&quot;)</span></span>
<span class="line"><span>for dir in &quot;\${data_dirs[@]}&quot;; do</span></span>
<span class="line"><span>    # 分割目录路径和挂载点</span></span>
<span class="line"><span>    paths=$(echo &quot;$dir&quot; | tr &#39;:&#39; &#39; &#39;)</span></span>
<span class="line"><span>    data_dir=$(echo &quot;$paths&quot; | cut -d &#39; &#39; -f 1)</span></span>
<span class="line"><span>    mount_dir=$(echo &quot;$paths&quot; | cut -d &#39; &#39; -f 2)</span></span>
<span class="line"><span>    # 如果 /data/var 目录存在，清理目录中的 ./run 目录</span></span>
<span class="line"><span>    if [ &quot;$data_dir&quot; = &quot;/data/var&quot; ] &amp;&amp; [ -d &quot;$data_dir&quot; ]; then</span></span>
<span class="line"><span>        rm -rf /data/var/run</span></span>
<span class="line"><span>    fi</span></span>
<span class="line"><span>    # 尝试创建并挂载目录</span></span>
<span class="line"><span>        mkdir -p &quot;$data_dir&quot;</span></span>
<span class="line"><span>        mount --bind &quot;$data_dir&quot; &quot;$mount_dir&quot;</span></span>
<span class="line"><span>        echo &quot;mount $data_dir to $mount_dir&quot;</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建 /dev 目录相关的目录，并挂载 cgroup</span></span>
<span class="line"><span>cgroup_dirs=(&quot;cpu&quot; &quot;cpuacct&quot; &quot;devices&quot; &quot;freezer&quot; &quot;hugetlb&quot; &quot;net_cls&quot; &quot;net_prio&quot; &quot;perf_event&quot; &quot;pids&quot; &quot;rdma&quot;)</span></span>
<span class="line"><span>for dir in &quot;\${cgroup_dirs[@]}&quot;; do</span></span>
<span class="line"><span>    if [ ! -d &quot;/dev/$dir&quot; ]; then</span></span>
<span class="line"><span>        mkdir -p &quot;/dev/$dir&quot;</span></span>
<span class="line"><span>        case &quot;$dir&quot; in</span></span>
<span class="line"><span>            &quot;cpu&quot;|&quot;cpuacct&quot;)</span></span>
<span class="line"><span>            ;;</span></span>
<span class="line"><span>        *)</span></span>
<span class="line"><span>            echo &quot;mount -t cgroup -o $dir none /dev/$dir&quot;</span></span>
<span class="line"><span>            mount -t cgroup -o $dir none /dev/$dir</span></span>
<span class="line"><span>            ;;</span></span>
<span class="line"><span>        esac</span></span>
<span class="line"><span>    fi</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 为 Docker 添加路由表</span></span>
<span class="line"><span>ip_rule1=$(ip rule | grep &quot;from all lookup main&quot; | wc -l)</span></span>
<span class="line"><span>if [ &quot;$ip_rule1&quot; -ne 1 ]; then</span></span>
<span class="line"><span>    ip rule add pref 1 from all lookup main</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span>ip_rule2=$(ip rule | grep &quot;from all lookup default&quot; | wc -l)</span></span>
<span class="line"><span>if [ &quot;$ip_rule2&quot; -ne 1 ]; then</span></span>
<span class="line"><span>    ip rule add pref 2 from all lookup default</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置 Docker 镜像加速</span></span>
<span class="line"><span>echo &quot;{\\&quot;registry-mirrors\\&quot;:[\\&quot;https://mirror.baidubce.com\\&quot;],\\&quot;experimental\\&quot;:true}&quot; &gt; /etc/docker/daemon.json</span></span>
<span class="line"><span># 关闭默认防火墙，允许外部访问 Docker 容器端口</span></span>
<span class="line"><span>setenforce 0</span></span>
<span class="line"><span># 启动 Docker</span></span>
<span class="line"><span>export DOCKER_RAMDISK=true</span></span>
<span class="line"><span>dockerd --add-runtime crun=/bin/crun -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock &gt; /dev/null 2&gt;&amp;1 &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>搭配注释，做了什么应该都非常清楚啦，这里就不展开赘述了。等到重新构建镜像的时候，我们再进行进一步的优化（内置 &amp; 精简）。</p><h2 id="第四步-启动-docker-后台进程" tabindex="-1">第四步：启动 Docker 后台进程 <a class="header-anchor" href="#第四步-启动-docker-后台进程" aria-label="Permalink to &quot;第四步：启动 Docker 后台进程&quot;">​</a></h2><p>当我们将所有文件都传输到手机上之后，在 <code>adb shell</code> 环境中把 <code>docker</code> 进行拉起来，Docker 运行环境就准备就绪啦。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># dockerd.sh                                                                                                                                                                       </span></span>
<span class="line"><span></span></span>
<span class="line"><span>mount /data/var to /var</span></span>
<span class="line"><span>mount /data/run to /run</span></span>
<span class="line"><span>mount /data/tmp to /tmp</span></span>
<span class="line"><span>mount /data/opt to /opt</span></span>
<span class="line"><span>mount /data/etc/docker to /etc/docker</span></span>
<span class="line"><span>mount -t cgroup -o devices none /dev/devices</span></span>
<span class="line"><span>mount -t cgroup -o freezer none /dev/freezer</span></span>
<span class="line"><span>mount -t cgroup -o hugetlb none /dev/hugetlb</span></span>
<span class="line"><span>mount -t cgroup -o net_cls none /dev/net_cls</span></span>
<span class="line"><span>mount -t cgroup -o net_prio none /dev/net_prio</span></span>
<span class="line"><span>mount -t cgroup -o perf_event none /dev/perf_event</span></span>
<span class="line"><span>mount -t cgroup -o pids none /dev/pids</span></span>
<span class="line"><span>mount -t cgroup -o rdma none /dev/rdma</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这个时候，执行 <code>docker info</code> 就能够看到 docker 的基础运行环境状况啦：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># docker info</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Client:</span></span>
<span class="line"><span> Debug Mode: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Server:</span></span>
<span class="line"><span> Containers: 1</span></span>
<span class="line"><span>  Running: 1</span></span>
<span class="line"><span>  Paused: 0</span></span>
<span class="line"><span>  Stopped: 0</span></span>
<span class="line"><span> Images: 7</span></span>
<span class="line"><span> Server Version: 19.03.13</span></span>
<span class="line"><span> Storage Driver: overlay2</span></span>
<span class="line"><span>  Backing Filesystem: extfs</span></span>
<span class="line"><span>  Supports d_type: true</span></span>
<span class="line"><span>  Native Overlay Diff: false</span></span>
<span class="line"><span> Logging Driver: json-file</span></span>
<span class="line"><span> Cgroup Driver: cgroupfs</span></span>
<span class="line"><span> Plugins:</span></span>
<span class="line"><span>  Volume: local</span></span>
<span class="line"><span>  Network: bridge host ipvlan macvlan null overlay</span></span>
<span class="line"><span>  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span></span>
<span class="line"><span> Swarm: inactive</span></span>
<span class="line"><span> Runtimes: runc crun</span></span>
<span class="line"><span> Default Runtime: runc</span></span>
<span class="line"><span> Init Binary: docker-init</span></span>
<span class="line"><span> containerd version: 8fba4e9a7d01810a393d5d25a3621dc101981175</span></span>
<span class="line"><span> runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd</span></span>
<span class="line"><span> init version: fec3683</span></span>
<span class="line"><span> Security Options:</span></span>
<span class="line"><span>  seccomp</span></span>
<span class="line"><span>   Profile: default</span></span>
<span class="line"><span> Kernel Version: 4.14.180-F1xy-0.19-pe-ten/71771c10be</span></span>
<span class="line"><span> OSType: linux</span></span>
<span class="line"><span> Architecture: aarch64</span></span>
<span class="line"><span> CPUs: 8</span></span>
<span class="line"><span> Total Memory: 11.25GiB</span></span>
<span class="line"><span> Name: localhost</span></span>
<span class="line"><span> ID: LLQY:OOXR:BKTQ:M2ZP:MGUJ:Q3NY:RPZL:EV7D:YGQY:H45D:BKUY:RXMA</span></span>
<span class="line"><span> Docker Root Dir: /var/lib/docker</span></span>
<span class="line"><span> Debug Mode: false</span></span>
<span class="line"><span> Registry: https://index.docker.io/v1/</span></span>
<span class="line"><span> Labels:</span></span>
<span class="line"><span> Experimental: true</span></span>
<span class="line"><span> Insecure Registries:</span></span>
<span class="line"><span>  127.0.0.0/8</span></span>
<span class="line"><span> Registry Mirrors:</span></span>
<span class="line"><span>  https://mirror.baidubce.com/</span></span>
<span class="line"><span> Live Restore Enabled: false</span></span>
<span class="line"><span> Product License: Community Engine</span></span>
<span class="line"><span></span></span>
<span class="line"><span>WARNING: API is accessible on http://0.0.0.0:2375 without encryption.</span></span>
<span class="line"><span>         Access to the remote API is equivalent to root access on the host. Refer</span></span>
<span class="line"><span>         to the &#39;Docker daemon attack surface&#39; section in the documentation for</span></span>
<span class="line"><span>         more information: https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h2 id="第五步-创建一个-docker-应用" tabindex="-1">第五步：创建一个 Docker 应用 <a class="header-anchor" href="#第五步-创建一个-docker-应用" aria-label="Permalink to &quot;第五步：创建一个 Docker 应用&quot;">​</a></h2><p>Docker 环境就绪后，我们来测试 Docker 应用能否运行。先创建一个目录，用于后续存放 Docker 应用数据：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>mkdir -p kb</span></span>
<span class="line"><span>cd kb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>随后，在目录中创建一个内容如下的 <code>docker-compose.yml</code> 配置文件：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>version: &#39;3&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  wordpress:</span></span>
<span class="line"><span>    image: soulteary/sqlite-wordpress:6.5.2</span></span>
<span class="line"><span>    restart: always</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 8080:80</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - ./wordpress:/var/www/html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>没错，这个配置来自项目 <strong>soulteary/docker-sqlite-wordpress[17]</strong>，在之前的文章《<strong>WordPress 告别 MySQL：Docker SQLite WordPress[18]</strong>》、《<strong>WordPress SQLite Docker 镜像封装细节[19]</strong>》中，讲的比较详尽了，就不在此展开啦。</p><p>当我们准备好 <code>docker-compose.yml</code> 后，执行 <code>docker-compose up -d</code>：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># docker-compose up -d</span></span>
<span class="line"><span>WARN[0000] /kb/docker-compose.yml: \`version\` is obsolete </span></span>
<span class="line"><span>[+] Running 1/0</span></span>
<span class="line"><span> ✔ Container kb-wordpress-1  Running</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>WordPress 就很快的通过容器的方式启动起来啦。</p><p>启动应用后，我们使用下面的命令，可以简单验证服务是否正常运行：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker exec kb-wordpress-1 curl -L http://0.0.0.0:80</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不出意外，我们将得到类似下面的结果：</p><p>![图片](./Docker 加持的安卓手机：随身携带的知识库.assets/640-1714814287144-2.webp)使用命令行验证手机上的 Docker 应用</p><p>上面的图片中，我们使用命令行来验证了 WordPress 中的程序渲染出了 HTML 页面，虽然执行时间非常长（需要排查或重新构建 Android 验证），但是证明了 Android 上运行 Docker 程序是可行的。</p><h2 id="第六步-如何在电脑侧访问手机的应用" tabindex="-1">第六步：如何在电脑侧访问手机的应用 <a class="header-anchor" href="#第六步-如何在电脑侧访问手机的应用" aria-label="Permalink to &quot;第六步：如何在电脑侧访问手机的应用&quot;">​</a></h2><p>**Android Debug Bridge（ADB）[20]**中有一个很有用的命令叫做 <code>forward</code>，我们可以通过这个命令，将电脑上的端口和手机上应用的端口进行打通。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span> forward --list           list all forward socket connections</span></span>
<span class="line"><span></span></span>
<span class="line"><span> forward [--no-rebind] LOCAL REMOTE</span></span>
<span class="line"><span>     forward socket connection using:</span></span>
<span class="line"><span>       tcp:&lt;port&gt; (&lt;local&gt; may be &quot;tcp:0&quot; to pick any open port)</span></span>
<span class="line"><span>       localabstract:&lt;unix domain socket name&gt;</span></span>
<span class="line"><span>       localreserved:&lt;unix domain socket name&gt;</span></span>
<span class="line"><span>       localfilesystem:&lt;unix domain socket name&gt;</span></span>
<span class="line"><span>       dev:&lt;character device name&gt;</span></span>
<span class="line"><span>       jdwp:&lt;process pid&gt; (remote only)</span></span>
<span class="line"><span>       vsock:&lt;CID&gt;:&lt;port&gt; (remote only)</span></span>
<span class="line"><span>       acceptfd:&lt;fd&gt; (listen only)</span></span>
<span class="line"><span></span></span>
<span class="line"><span> forward --remove LOCAL   remove specific forward socket connection</span></span>
<span class="line"><span></span></span>
<span class="line"><span> forward --remove-all     remove all forward socket connections</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>命令支持四种参数调用方法，分别是：</p><p>•以列表形式获取所有的转发映射•进行本地和远程端口的转发映射•撤销一个本地端口的转发映射•撤销所有的转发映射</p><p>我们以实际的情况举例，上文中，我们在手机上将 WordPress 默认运行的 <code>80</code> 端口，映射到了手机的 <code>8080</code> 端口。如果我们将电脑的 <code>8088</code> 端口和手机上的 <code>8080</code> 端口打通，那么我们需要执行下面的命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>adb forward tcp:8088 tcp:8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当命令执行完毕后，我们就可以在浏览器中访问 <code>http://localhost:8088</code> 来访问手机上的应用啦。</p><p>![图片](./Docker 加持的安卓手机：随身携带的知识库.assets/640-1714814287144-3.webp)使用电脑直接访问手机容器应用</p><p>当然，这里也会遇到和上面一样的问题，访问应用的时间会比较长。这是一个需要继续排查和解决的问题。毕竟除了 <code>PHP</code> 程序执行外的资源路径的响应都在 <code>ms</code> 级别。</p><p>当然，如果你希望这台设备上运行的 Docker 程序，能够在局域网共享，只需要让手机连上 Wi-Fi，然后在浏览器中访问手机在局域网中的 IP 地址，和对应的程序端口即可。</p><p>![图片](./Docker 加持的安卓手机：随身携带的知识库.assets/640-1714814287144-4.webp)使用局域网访问手机上的容器应用</p><p>是不是十分简单，如果你想离线本地化使用，就不需要给手机网络，如果你想局域网共享，得到一台低成本、高性价比的 Linux 服务器，就让它连上 Wi-Fi。</p><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>写到这里，本文提到的验证目标就结束啦。接下来相关的文章里，我们来聊聊本文遇到的性能问题，以及如何在 2024 年更简单的构建支持 Docker 运行的安卓内核和镜像。</p><p>我们下篇文章再见。</p><p>--EOF</p><p><strong>引用链接</strong></p><p><code>[1]</code> CGCL-codes/Android-Container: <em><a href="https://github.com/CGCL-codes/Android-Container" target="_blank" rel="noreferrer">https://github.com/CGCL-codes/Android-Container</a></em><code>[2]</code> 使用搭载骁龙 8 Gen 3 的安卓手机运行 AI 大模型: <em><a href="https://soulteary.com/2024/02/29/run-large-ai-models-on-android-phones-with-snapdragon-8-gen-3.html" target="_blank" rel="noreferrer">https://soulteary.com/2024/02/29/run-large-ai-models-on-android-phones-with-snapdragon-8-gen-3.html</a></em><code>[3]</code> 小米 12 PRO 刷 MIUI 14 海外版（Android 12）: <em><a href="https://soulteary.com/2023/01/09/xiaomi-12-pro-flashing-miui-14-overseas-version.html" target="_blank" rel="noreferrer">https://soulteary.com/2023/01/09/xiaomi-12-pro-flashing-miui-14-overseas-version.html</a></em><code>[4]</code> 红米 11T PRO 刷机 MIUI 13 海外版: <em><a href="https://soulteary.com/2022/09/25/redmi-11-t-pro-flashing-miui-13-overseas-version.html" target="_blank" rel="noreferrer">https://soulteary.com/2022/09/25/redmi-11-t-pro-flashing-miui-13-overseas-version.html</a></em><code>[5]</code> 小米 K30 PRO 刷机 MIUI 12.5 海外版: <em><a href="https://soulteary.com/2021/10/22/mi-k30-pro-flashing-miui-125-overseas-version.html" target="_blank" rel="noreferrer">https://soulteary.com/2021/10/22/mi-k30-pro-flashing-miui-125-overseas-version.html</a></em><code>[6]</code> 小米 K20Pro 体验 Android 10: <em><a href="https://soulteary.com/2019/09/08/xiaomi-k20pro-experience-android-10.html" target="_blank" rel="noreferrer">https://soulteary.com/2019/09/08/xiaomi-k20pro-experience-android-10.html</a></em><code>[7]</code> 小米高考题库: <em><a href="https://github.com/MlgmXyysd/Xiaomi-BootLoader-Questionnaire" target="_blank" rel="noreferrer">https://github.com/MlgmXyysd/Xiaomi-BootLoader-Questionnaire</a></em><code>[8]</code> 小米解锁项目: <em><a href="https://github.com/MlgmXyysd/Xiaomi-HyperOS-BootLoader-Bypass" target="_blank" rel="noreferrer">https://github.com/MlgmXyysd/Xiaomi-HyperOS-BootLoader-Bypass</a></em><code>[9]</code> 小米解锁方案合集: <em><a href="https://github.com/topminipie/awesome-xiaomi-bootloader-unlock" target="_blank" rel="noreferrer">https://github.com/topminipie/awesome-xiaomi-bootloader-unlock</a></em><code>[10]</code> TWRP 引导镜像: <em><a href="https://twrp.me/xiaomi/xiaomimi9tpro.html" target="_blank" rel="noreferrer">https://twrp.me/xiaomi/xiaomimi9tpro.html</a></em><code>[11]</code> 项目子目录文档的底部: <em><a href="https://github.com/CGCL-codes/Android-Container/blob/main/pixel-OS/README.md" target="_blank" rel="noreferrer">https://github.com/CGCL-codes/Android-Container/blob/main/pixel-OS/README.md</a></em><code>[12]</code> 可以从这里下载官方镜像: <em><a href="https://xiaomirom.com/download/redmi-k20-pro-mi-9t-pro-raphael-stable-V12.0.5.0.QFKCNXM/" target="_blank" rel="noreferrer">https://xiaomirom.com/download/redmi-k20-pro-mi-9t-pro-raphael-stable-V12.0.5.0.QFKCNXM/</a></em><code>[13]</code> 另外一个目录中文档: <em><a href="https://github.com/CGCL-codes/Android-Container/tree/main/docker" target="_blank" rel="noreferrer">https://github.com/CGCL-codes/Android-Container/tree/main/docker</a></em><code>[14]</code> 项目 Docker 目录: <em><a href="https://github.com/CGCL-codes/Android-Container/tree/main/docker" target="_blank" rel="noreferrer">https://github.com/CGCL-codes/Android-Container/tree/main/docker</a></em><code>[15]</code> files/dockerd.sh: <em><a href="https://github.com/CGCL-codes/Android-Container/blob/main/files/dockerd.sh" target="_blank" rel="noreferrer">https://github.com/CGCL-codes/Android-Container/blob/main/files/dockerd.sh</a></em><code>[16]</code> 发布页面: <em><a href="https://github.com/docker/compose/releases" target="_blank" rel="noreferrer">https://github.com/docker/compose/releases</a></em><code>[17]</code> soulteary/docker-sqlite-wordpress: <em><a href="https://github.com/soulteary/docker-sqlite-wordpress" target="_blank" rel="noreferrer">https://github.com/soulteary/docker-sqlite-wordpress</a></em><code>[18]</code> WordPress 告别 MySQL：Docker SQLite WordPress: <em><a href="https://soulteary.com/2024/04/17/say-goodbye-to-mysql-docker-sqlite-wordpress.html" target="_blank" rel="noreferrer">https://soulteary.com/2024/04/17/say-goodbye-to-mysql-docker-sqlite-wordpress.html</a></em><code>[19]</code> WordPress SQLite Docker 镜像封装细节: <em><a href="https://soulteary.com/2024/04/21/wordpress-sqlite-docker-image-packaging-details.html" target="_blank" rel="noreferrer">https://soulteary.com/2024/04/21/wordpress-sqlite-docker-image-packaging-details.html</a></em><code>[20]</code> Android Debug Bridge（ADB）: <em><a href="https://developer.android.com/tools/adb" target="_blank" rel="noreferrer">https://developer.android.com/tools/adb</a></em></p>`,84),l=[r];function o(i,c,t,d,u,b){return a(),n("div",null,l)}const k=s(p,[["render",o]]);export{h as __pageData,k as default};
