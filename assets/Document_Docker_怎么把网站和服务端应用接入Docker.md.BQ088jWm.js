import{_ as s,c as a,o as e,a3 as n}from"./chunks/framework.zGi9i9Bf.js";const o="/ProgramLearnNotes/assets/image-20240612212856401.BstORjOq.png",p="/ProgramLearnNotes/assets/image-20240612212958657.DpDEwu3K.png",l="/ProgramLearnNotes/assets/image-20240612213617880.nLyv8a17.png",r="/ProgramLearnNotes/assets/image-20240612213833484.-EiJ443V.png",c="/ProgramLearnNotes/assets/image-20240612213908724.Bv9boLVG.png",t="/ProgramLearnNotes/assets/image-20240612213937311.Vg1ApcKL.png",i="/ProgramLearnNotes/assets/image-20240612214000018.BlE-00-j.png",d="/ProgramLearnNotes/assets/image-20240612214042348.C2G7U6zL.png",b="/ProgramLearnNotes/assets/image-20240612214101048.Cl9Ou3Tr.png",u="/ProgramLearnNotes/assets/image-20240612214134139.D4ngDEO3.png",m="/ProgramLearnNotes/assets/image-20240612214148845.Dy7h0iAR.png",y="/ProgramLearnNotes/assets/image-20240612214208836.DjGsgwIJ.png",h="/ProgramLearnNotes/assets/image-20240612214228154.DHzavscz.png",k="/ProgramLearnNotes/assets/2023121310181633.BKcH3aci.png",g="/ProgramLearnNotes/assets/2023121310181634.GRAIhfnv.png",C="/ProgramLearnNotes/assets/2023121310181635.BBJNFHqp.png",B="/ProgramLearnNotes/assets/2023121310181636.Ck9JFkC4.png",D="/ProgramLearnNotes/assets/2023121310181737.C6b5Z8gL.png",_="/ProgramLearnNotes/assets/2023121310181738.DNKe1wXe.png",E="/ProgramLearnNotes/assets/2023121310181739.C8ClFhJX.png",W=JSON.parse('{"title":"为什么要使用docker","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/怎么把网站和服务端应用接入Docker.md","filePath":"Document/Docker/怎么把网站和服务端应用接入Docker.md","lastUpdated":null}'),F={name:"Document/Docker/怎么把网站和服务端应用接入Docker.md"},f=n('<p>参考视频和文档：<a href="https://www.bilibili.com/video/BV1Z84y1a7nM/" target="_blank" rel="noreferrer">web前端有必要学docker吗？0基础-45分钟带你学会！包含笔记案例源代码_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/687859552" target="_blank" rel="noreferrer">前端学一点Docker，不信你学不会 - 知乎 (zhihu.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1619066" target="_blank" rel="noreferrer">谁说前端不需要学习docker？-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://juejin.cn/post/6844904088551833608" target="_blank" rel="noreferrer">30分钟带你了解Web工程师必知的Docker知识 - 掘金 (juejin.cn)</a></p><p><a href="https://www.imooc.com/article/301898" target="_blank" rel="noreferrer">30分钟带你了解Web工程师必知的Docker知识_慕课手记 (imooc.com)</a></p><p><a href="http://jartto.wang/2020/07/04/learn-docker/" target="_blank" rel="noreferrer">Docker 边学边用 - Jartto&#39;s blog</a></p><p><a href="https://help.aliyun.com/zh/simple-application-server/use-cases/deploy-and-use-docker" target="_blank" rel="noreferrer">如何使用轻量应用服务器部署并使用Docker_轻量应用服务器(SAS)-阿里云帮助中心 (aliyun.com)</a></p><p><a href="https://www.php.cn/faq/507202.html" target="_blank" rel="noreferrer">怎么用docker部署web程序-Docker-PHP中文网</a></p><p><a href="https://blog.csdn.net/weixin_43929986/article/details/109851805" target="_blank" rel="noreferrer">Docker部署网站环境_docker搭建网站-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_35716689/article/details/135833403" target="_blank" rel="noreferrer">快速上手！使用Docker和Nginx部署Web服务的完美指南_docker nginx部署web应用-CSDN博客</a></p><p><a href="https://blog.csdn.net/JackieDYH/article/details/125282819" target="_blank" rel="noreferrer">Docker中安装Nginx部署网页服务-过程_docker中nginx配置网页-CSDN博客</a></p><p><a href="https://blog.csdn.net/Why_does_it_work/article/details/131401307" target="_blank" rel="noreferrer">Docker：让应用程序轻松移植到任何地方的利器_如何把程序转到docker-CSDN博客</a></p><p><a href="https://blog.csdn.net/llg___/article/details/125725283" target="_blank" rel="noreferrer">【Docker进阶】基于Docker部署Web应用_docker部署web项目-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_42508903/article/details/119313396" target="_blank" rel="noreferrer">建立的静态网站如何在服务器运行,使用docker创建静态网站应用(多种方式)-CSDN博客</a></p><p><a href="https://blog.csdn.net/javageektech/article/details/94420350" target="_blank" rel="noreferrer">手把手教你用 Docker 部署网站——Docker 系列-8</a></p><p><a href="https://zhuanlan.zhihu.com/p/673163601" target="_blank" rel="noreferrer">一键式快速部署：Docker 和 Docker Compose 安装指南 - 知乎 (zhihu.com)</a></p><h1 id="为什么要使用docker" tabindex="-1">为什么要使用docker <a class="header-anchor" href="#为什么要使用docker" aria-label="Permalink to &quot;为什么要使用docker&quot;">​</a></h1><p><code>docker</code>提供了沙箱环境，能够隔绝物理环境，相当于是之前的虚拟机。而且<code>docker</code>内置了很多镜像可供使用。</p><p><code>Docker</code>容器技术以及<code>docker-compose</code>容器编排技术能最大限度的保证您的项目在开发环境和生产环境上的一致表现。</p><p>要想在<code>window</code>系统或<code>mac os</code>中使用<code>docker</code>，需要先安装桌面版，其实相当于是在电脑安装了一个<code>Linux</code>内核+<code>docker</code>环境。</p><p><img src="'+o+'" alt="image-20240612212856401"></p><h2 id="windows10-11系统安装docker-desktop" tabindex="-1">Windows10/11系统安装Docker Desktop <a class="header-anchor" href="#windows10-11系统安装docker-desktop" aria-label="Permalink to &quot;Windows10/11系统安装Docker Desktop&quot;">​</a></h2><p><code>Windows10</code>(无论专业版还是家庭版)都能方便安装<code>Docker Desktop</code>。</p><p>在Docker官网下载最新的<code>Docker Desktop</code>安装，下载地址：<a href="https://www.docker.com/" target="_blank" rel="noreferrer">https://www.docker.com/</a></p><p>下载安装包大约有585M，目前最新版是<code>4.15.0</code>安装时，默认C盘，大约3分钟，安装完毕：</p><ul><li>Docker Desktop启动的时候，有可能弹框提示<code>&quot;WSL2 installations is incomplete&quot;</code>，这是您的系统中没有安装<code>WSL2</code>内核的原因，打开<a href="https://aka.ms/wsl2kernel,%E5%9C%A8%E6%89%93%E5%BC%80%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%9C%89%E4%B8%80%E4%B8%AALinux%E5%86%85%E6%A0%B8%E6%9B%B4%E6%96%B0%E5%8C%85" target="_blank" rel="noreferrer">https://aka.ms/wsl2kernel,在打开的页面中有一个Linux内核更新包</a>&quot;链接，点击下载，安装。</li><li><code>WSL2 Linux</code>内核更新包安装后，重启<code>Docker Desktop</code>即可正常使用。您可在<code>cmd</code>或者<code>PowerShell</code>命令行中使用<code>docker</code>或者<code>docker-compose</code>等相关命令了。</li></ul><p><strong>PS:</strong> 如果您在安装<code>WSL2</code>的过程中遇到了问题，可能是您的系统版本较低等原因，您可按照<a href="https://aka.ms/wsl2kernel" target="_blank" rel="noreferrer">https://aka.ms/wsl2kernel</a> 页面的相关提示更新系统。该<code>Docker Desktop</code>的安装方法基于<code>Windows10</code>的<code>WSL2</code>如果您的系统没有或者不能安装WSL2，可能不能使用该方法安装<code>Docker Desktop</code>。</p><blockquote><p>对于win11 家庭版，需要在win10的基础上多一个前置步骤，才能安装成功：</p></blockquote><ol><li>在<code>win11</code> 中打开<code>启用或关闭window功能</code>，看选项中是否有<code>hyper-v</code>：</li></ol><p><img src="'+p+`" alt="image-20240612212958657"></p><p>如果没有，则需要运行一个<code>BAT</code>脚本，以便激活该功能，将以下代码保存为<code>bat</code>文件，然后使用管理员方式运行。经过大约5分钟，自动重启电脑即可：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">pushd </span><span style="color:#98C379;">&quot;%~dp0&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">dir</span><span style="color:#98C379;"> /b</span><span style="color:#98C379;"> %SystemRoot%</span><span style="color:#56B6C2;">\\s</span><span style="color:#98C379;">ervicing</span><span style="color:#56B6C2;">\\P</span><span style="color:#98C379;">ackages</span><span style="color:#56B6C2;">\\*</span><span style="color:#98C379;">Hyper-V</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">.mum</span><span style="color:#ABB2BF;"> &gt;</span><span style="color:#98C379;">hv.txt</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> /f %%i in (</span><span style="color:#61AFEF;">&#39;findstr /i . hv.txt 2^&gt;nul&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;"> dism /online /norestart /add-package:</span><span style="color:#98C379;">&quot;%SystemRoot%\\servicing\\Packages\\%%i&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">del</span><span style="color:#98C379;"> hv.txt</span></span>
<span class="line"><span style="color:#61AFEF;">Dism</span><span style="color:#98C379;"> /online</span><span style="color:#98C379;"> /enable-feature</span><span style="color:#98C379;"> /featurename:Microsoft-Hyper-V</span><span style="color:#D19A66;"> -All</span><span style="color:#98C379;"> /LimitAccess</span><span style="color:#98C379;"> /ALL</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="如何判断电脑已经安装好docker" tabindex="-1">如何判断电脑已经安装好docker <a class="header-anchor" href="#如何判断电脑已经安装好docker" aria-label="Permalink to &quot;如何判断电脑已经安装好docker&quot;">​</a></h2><p>在<code>CMD</code>输入 <code>docker</code>，如果有反应表示安装成功</p><p><img src="`+l+`" alt="image-20240612213617880"></p><h1 id="怎么把网站和服务端应用接入docker" tabindex="-1">怎么把网站和服务端应用接入Docker <a class="header-anchor" href="#怎么把网站和服务端应用接入docker" aria-label="Permalink to &quot;怎么把网站和服务端应用接入Docker&quot;">​</a></h1><h3 id="要把一个网站应用接入docker-你需要执行以下步骤" tabindex="-1">要把一个网站应用接入Docker，你需要执行以下步骤： <a class="header-anchor" href="#要把一个网站应用接入docker-你需要执行以下步骤" aria-label="Permalink to &quot;要把一个网站应用接入Docker，你需要执行以下步骤：&quot;">​</a></h3><ol><li>创建一个Dockerfile文件，定义如何构建你的Docker镜像。</li><li>编写Dockerfile，指定基础镜像、复制应用文件、安装依赖、配置环境和运行应用。</li><li>构建Docker镜像。</li><li>运行Docker容器，暴露端口。</li></ol><h3 id="以下是一个简单的示例" tabindex="-1">以下是一个简单的示例： <a class="header-anchor" href="#以下是一个简单的示例" aria-label="Permalink to &quot;以下是一个简单的示例：&quot;">​</a></h3><p>1.假设你有一个简单的Python Flask应用：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># app.py</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> flask </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Flask</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">app </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Flask</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">@app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> hello_world</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;Hello, Docker!&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> __name__</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    app.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;0.0.0.0&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">port</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>2.你的Dockerfile可能如下所示：</p><div class="language-Dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 使用官方Python运行时作为父镜像</span></span>
<span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#ABB2BF;"> python:3.8-slim</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将工作目录设为/app</span></span>
<span class="line"><span style="color:#61AFEF;">WORKDIR</span><span style="color:#ABB2BF;"> /app</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将当前目录内容复制到位于/app中的容器内</span></span>
<span class="line"><span style="color:#61AFEF;">COPY</span><span style="color:#ABB2BF;"> . /app</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#ABB2BF;"> pip install -r requirements.txt</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 对外暴露端口</span></span>
<span class="line"><span style="color:#61AFEF;">EXPOSE</span><span style="color:#ABB2BF;"> 5000</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 定义环境变量</span></span>
<span class="line"><span style="color:#61AFEF;">ENV</span><span style="color:#ABB2BF;"> NAME World</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 在容器启动时运行app.py</span></span>
<span class="line"><span style="color:#61AFEF;">CMD</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;python&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;app.py&quot;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>3.接下来，在你的应用目录中运行以下命令来构建和运行你的Docker容器：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> -t</span><span style="color:#98C379;"> my-flask-app</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 5000:5000</span><span style="color:#98C379;"> my-flask-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在，你的应用将在Docker容器中运行，并通过Docker映射的端口对外提供服务。你可以通过浏览器访问宿主机的IP和映射端口来查看你的应用。</p><h1 id="将前端项目-vue、react等-打包为docker镜像运行和发布镜像" tabindex="-1">将前端项目(Vue、React等)打包为docker镜像运行和发布镜像 <a class="header-anchor" href="#将前端项目-vue、react等-打包为docker镜像运行和发布镜像" aria-label="Permalink to &quot;将前端项目(Vue、React等)打包为docker镜像运行和发布镜像&quot;">​</a></h1><p>使用<code>docker</code>可以方便将其他人的项目直接运行，而不需要配置。</p><p>比如我这里已经有一个<code>vue</code>项目，接下来实操打包为镜像在本地运行或部署到<code>docker</code>镜像，只需要4步即可完成！</p><h3 id="_1、将vue的项目进行构建-输出dist" tabindex="-1">1、将vue的项目进行构建，输出dist <a class="header-anchor" href="#_1、将vue的项目进行构建-输出dist" aria-label="Permalink to &quot;1、将vue的项目进行构建，输出dist&quot;">​</a></h3><p>这个步骤就相当于是将vue的项目 <code>npm run build</code> 打包到服务器是一样的。</p><h3 id="_2、准备镜像内容" tabindex="-1">2、准备镜像内容 <a class="header-anchor" href="#_2、准备镜像内容" aria-label="Permalink to &quot;2、准备镜像内容&quot;">​</a></h3><p>在<code>dist</code>目录之上新建一个<code>Dockerfile</code>文件，该文件没有后缀，文件名即为此。然后输入如下内容：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">FROM</span><span style="color:#E06C75;"> nginx</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">latest</span></span>
<span class="line"><span style="color:#E5C07B;">LABEL</span><span style="color:#E06C75;"> Author</span><span style="color:#E06C75;"> imqdcn</span></span>
<span class="line"><span style="color:#E5C07B;">COPY</span><span style="color:#E06C75;"> dist</span><span style="color:#56B6C2;"> /</span><span style="color:#E06C75;">usr</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">share</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">nginx</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>第一行：设置基础镜像，基础镜像使用<code>nginx</code></p><p>第二行：作者信息</p><p>第三行：将dist文件夹下面的内容拷贝到<code>/usr/share/nginx/html</code>目录下面（<code>nginx</code>的默认项目路径）,也就是我们<code>Vue</code>项目打包之后我们正常使用<code>nginx</code>是拷贝过去的文件夹。</p><p><img src="`+r+`" alt="image-20240612213833484"></p><h3 id="_3、制作镜像" tabindex="-1">3、制作镜像 <a class="header-anchor" href="#_3、制作镜像" aria-label="Permalink to &quot;3、制作镜像&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> -t</span><span style="color:#98C379;"> 镜像名字</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 比如：</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> -t</span><span style="color:#98C379;"> vue3project</span><span style="color:#98C379;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：后面的<code>.</code>不能省略，镜像创建成功之后使用<code>docker images</code>即可看到自己创建的镜像。</p><p>整个制作过程大概为1-5分钟。</p><p><img src="`+c+'" alt="image-20240612213908724"></p><h3 id="_4、启动镜像" tabindex="-1">4、启动镜像 <a class="header-anchor" href="#_4、启动镜像" aria-label="Permalink to &quot;4、启动镜像&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> 镜像名字</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 8888:80</span><span style="color:#98C379;"> vue3project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动命令说明：</p><blockquote><p>-d：容器在后台启动</p><p>—name : 镜像名称</p><p>-p 8888:80 ：将nginx容器的80端口映射到主机的8888端口，我们访问时直接访问主机ip+映射到主机的端口，这里是8888，如果有路径，后面还要带上路径。 比如这里表示访问路径为：localhost:8888</p><p>vue3project: 我们刚刚创建的自己的镜像的名称，在创建时就要规划好名字</p></blockquote><p><strong>注意：</strong></p><p>你制作完镜像后，就可以在自己的<code>docker desktop</code>看到镜像，并且在那里直接配置访问端口和将镜像放置在容器中运行。</p><p><img src="'+t+'" alt="image-20240612213937311"></p><p>至此，你就相当于是将本地的<code>vue</code>的项目打包为一个<code>docker</code>镜像，并且可以在本地运行查看了，就像你部署到了一台虚拟服务器中！</p><p><img src="'+i+`" alt="image-20240612214000018"></p><h1 id="docker-化一个-go-web-应用" tabindex="-1">Docker 化一个 Go Web 应用 <a class="header-anchor" href="#docker-化一个-go-web-应用" aria-label="Permalink to &quot;Docker 化一个 Go Web 应用&quot;">​</a></h1><p>Web 服务拥有对整个容器的完整访问权限，所以我们不需要对服务的代码做任何修改，只要使用 Docker 并进行相应的配置就可以了。</p><p><strong>将一个 Web 应用 Docker 化并部署到本地以及云端的具体步骤：</strong></p><p><strong>部署到本地服务器</strong></p><p>（1）创建 Dockerfile</p><p>（2）使用 Dockerfile 构建 Docker 镜像</p><p>（3）根据 Docker 镜像创建出 Docker 容器</p><p><strong>部署到云端</strong></p><p>（4）在云端创建 Docker 宿主</p><p>（5）连接远程 Docker 宿主</p><p>（6）在远程宿主中构建 Docker 镜像</p><p>（7）在远程宿主中启动 Docker 容器</p><p>如果使用 chitchat 作为 Web 服务的名字。 部署的第一步是在应用程序的根目录中创建一个 Dockerfile 文件。</p><p>简单 Web 服务的 Dockerfile 文件：</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">FROM</span><span style="color:#E06C75;"> golang</span><span style="color:#7F848E;font-style:italic;">    // 使用一个安装了 Go 并且将 GOPATH 设置为 /go 的 Debian 镜像作为容器的起点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">ADD</span><span style="color:#ABB2BF;"> . </span><span style="color:#C678DD;">/go/</span><span style="color:#E06C75;">src</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">github</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">com</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">huangpengju</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">chitchat</span><span style="color:#7F848E;font-style:italic;">    // 把本地的包文件复制到容器的工作空间里面</span></span>
<span class="line"><span style="color:#E06C75;">WORKDIR</span><span style="color:#C678DD;"> /go/</span><span style="color:#E06C75;">src</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">github</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">com</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">huangpengju</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">chitchat</span></span>
<span class="line"><span style="color:#E06C75;">RUN</span><span style="color:#C678DD;"> go</span><span style="color:#E06C75;"> get</span><span style="color:#E06C75;"> github</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">com</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">lib</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">pq</span><span style="color:#7F848E;font-style:italic;">    // 在容器内部构建 chitchat 命令</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">RUN</span><span style="color:#C678DD;"> go</span><span style="color:#E06C75;"> install</span><span style="color:#E06C75;"> github</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">com</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">huangpengju</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">chitchat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">ENTRYPOINT</span><span style="color:#C678DD;"> /go/</span><span style="color:#E06C75;">bin</span><span style="color:#C678DD;">/</span><span style="color:#E06C75;">chitchat</span><span style="color:#7F848E;font-style:italic;">    // 把 chitchat 命令设置为随容器启动</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">EXPOSE</span><span style="color:#D19A66;"> 8080</span><span style="color:#7F848E;font-style:italic;">    // 注明该服务监听的端口号为8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这个 Dockerfile 文件的第一行告诉 Docker 使用 golang 镜像启动，这是一个安装了最新版 Go 并将工作空间设置为 /go 的 Debian 镜像。之后的两行会将当前目录中的本地代码复制到容器中，并设置相应的工作目录。</p><p>在此之后，文件使用 RUN 命令指示 Docker 获取 PostgreSQL 驱动并构建 Web 服务的代码，然后将可执行的二进制文件放置到 /go/bin 目录中。</p><p>在此之后，文件使用 ENTRYPOINT 命令指示 Docker 将 /go/bin/chitchat 设置为随容器启动。</p><p>最后文件使用 EXPOSE 命令指示容器将 8080 端口暴露给其他容器。需要注意的是，这个EXPOSE 命令只会对同一宿主内的其他容器打开 8080 端口，但它并不会对外开放 8080 端口。</p><p>在编好 Dockerfile 文件之后，就可以使用以下命令来构建镜像了：</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">docker</span><span style="color:#E06C75;"> build</span><span style="color:#C678DD;"> -</span><span style="color:#E06C75;">t</span><span style="color:#E06C75;"> chitchat</span><span style="color:#ABB2BF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条命令将执行 Dockerfile 文件，并根据文件中的指示构建一个本地镜像。</p><h1 id="如何发布镜像到-docker-hub中-以便分享给其他人下载和运行" tabindex="-1">如何发布镜像到 docker Hub中，以便分享给其他人下载和运行 <a class="header-anchor" href="#如何发布镜像到-docker-hub中-以便分享给其他人下载和运行" aria-label="Permalink to &quot;如何发布镜像到 docker Hub中，以便分享给其他人下载和运行&quot;">​</a></h1><h3 id="_1、发布到docker-hub库中" tabindex="-1">1、发布到docker Hub库中 <a class="header-anchor" href="#_1、发布到docker-hub库中" aria-label="Permalink to &quot;1、发布到docker Hub库中&quot;">​</a></h3><p>发布指令，其实很简单，直接在命令行输入如下命令即可：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> imqdcn/xxx:latest</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># docker push 注册用户名/镜像名:tag名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>意味着，你需要先注册和登录<code>docker-desktop</code></p><p><img src="`+d+'" alt="image-20240612214042348"></p><p>然后通过命令行，运行<code>docer login </code>登录，看是否命令行也已经登录成功：</p><p><img src="'+b+`" alt="image-20240612214101048"></p><p>如果你的镜像名字在最开始时没起好名或与其他人发布的镜像名有冲突，可以通过如下方式改名：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> tag</span><span style="color:#98C379;"> xxx</span><span style="color:#98C379;"> imqdcn/xxx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 表示将xxx改名为 imqdcn/xxx,你也可以改为任意你喜欢的名字，比如imqdcn/vue3project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>至于<code>tag</code>名，则可以通过<code>docker images</code>看到：</p><p><img src="`+u+'" alt="image-20240612214134139"></p><p>改名后：</p><p><img src="'+m+'" alt="image-20240612214148845"></p><p>以上都完成，就可以使用 第一条发布指令进行发布了。</p><p><img src="'+y+'" alt="image-20240612214208836"></p><p>你可以在<code>docker-desktop</code>通过搜索该镜像名字找到镜像地址，或打开<a href="https://hub.docker.com/%E6%9F%A5%E6%89%BE%E4%BD%A0%E5%8F%91%E5%B8%83%E7%9A%84%E9%95%9C%E5%83%8F%EF%BC%9A" target="_blank" rel="noreferrer">https://hub.docker.com/查找你发布的镜像：</a></p><p><img src="'+h+`" alt="image-20240612214228154"></p><h3 id="_2、发布后-其他人如何下载和运行呢" tabindex="-1">2、发布后，其他人如何下载和运行呢？ <a class="header-anchor" href="#_2、发布后-其他人如何下载和运行呢" aria-label="Permalink to &quot;2、发布后，其他人如何下载和运行呢？&quot;">​</a></h3><p>镜像作者发给你hub镜像地址后，上面有拉取指令：</p><p>可以在命令行中先通过执行 <code>docker pull</code>下载到本地:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> pull</span><span style="color:#98C379;"> imqdcn/xxx</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果后面没有写tagname，则使用默认的tagName：latest</span></span>
<span class="line"><span style="color:#61AFEF;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>运行以上指令，即可在<code>docker desktop</code>看到该镜像，并可运行该镜像。</p><h1 id="前端有必要学会docker吗" tabindex="-1">前端有必要学会docker吗 <a class="header-anchor" href="#前端有必要学会docker吗" aria-label="Permalink to &quot;前端有必要学会docker吗&quot;">​</a></h1><p>目前大部分公司都会将项目通过<code>docker</code>的方式部署到测试、预演、生产环境中。</p><p>虽然这些工作基本上都是由后端开发、测试工程师或运维工程师来完成，并不需要前端参与。俗话说技多不压身，从目前趋势来看，<code>docker</code>学起来简单，用起来也不复杂，仅从个人技术提升和兴趣爱好方面也是有必要学会的。</p><p>案例笔记素材源代码地址：<a href="https://www.imqd.cn/why-web-developer-should-study-docker.html" target="_blank" rel="noreferrer">https://www.imqd.cn/why-web-developer-should-study-docker.html</a></p><h1 id="利用宝塔面板和docker快速部署网站的基本流程" tabindex="-1">利用宝塔面板和docker快速部署网站的基本流程 <a class="header-anchor" href="#利用宝塔面板和docker快速部署网站的基本流程" aria-label="Permalink to &quot;利用宝塔面板和docker快速部署网站的基本流程&quot;">​</a></h1><p>当你有了一台服务器,就会折腾往这台服务器上部署各种好玩的网站,本文将以部署filebrowser举例介绍网站部署的基本流程</p><p>当你有了一台服务器，就会折腾往这台服务器上部署各种好玩的网站。市面上有许多开源的网站项目，通过docker技术可以快速部署并使用，本文将以部署filebrowser举例介绍网站部署的基本流程。</p><h2 id="_1-安装宝塔面板" tabindex="-1">1. 安装宝塔面板 <a class="header-anchor" href="#_1-安装宝塔面板" aria-label="Permalink to &quot;1. 安装宝塔面板&quot;">​</a></h2><p>宝塔面板是一款开源的网站运维工具，官网为：<a href="https://www.bt.cn/new/index.html%EF%BC%8CDebian%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E4%B8%BA" target="_blank" rel="noreferrer">https://www.bt.cn/new/index.html，Debian系统安装脚本为</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">wget</span><span style="color:#D19A66;"> -O</span><span style="color:#98C379;"> install.sh</span><span style="color:#98C379;"> https://download.bt.cn/install/install-ubuntu_6.0.sh</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">bash</span><span style="color:#98C379;"> install.sh</span><span style="color:#98C379;"> ed8484bec</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-通过宝塔面板安装docker" tabindex="-1">2. 通过宝塔面板安装docker <a class="header-anchor" href="#_2-通过宝塔面板安装docker" aria-label="Permalink to &quot;2. 通过宝塔面板安装docker&quot;">​</a></h2><p>docker是一个开源的应用容器引擎，让开发者可以打包或运行镜像实现服务器虚拟化，通过宝塔面板可直接安装</p><p><img src="`+k+'" alt="img"></p><p>安装完毕后可以通过在ssh工具输入</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#D19A66;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看安装情况</p><p><img src="'+g+'" alt="img"></p><h2 id="_3-下载filebrowser镜像" tabindex="-1">3. 下载filebrowser镜像 <a class="header-anchor" href="#_3-下载filebrowser镜像" aria-label="Permalink to &quot;3. 下载filebrowser镜像&quot;">​</a></h2><p><code>docker pull filebrowser/filebrowser</code> 通过名字可以拉取不同的镜像，也可以在宝塔可视化下载</p><p><img src="'+C+'" alt="img"></p><p>镜像下载后通过</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> images</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看</p><p><img src="'+B+'" alt="img"></p><h2 id="_4-使用容器启动镜像" tabindex="-1">4. 使用容器启动镜像 <a class="header-anchor" href="#_4-使用容器启动镜像" aria-label="Permalink to &quot;4. 使用容器启动镜像&quot;">​</a></h2><p>可以使用<code>docker run </code>指令直接启动参考 <a href="https://filebrowser.org/installation" target="_blank" rel="noreferrer">https://filebrowser.org/installation</a> 的docker指令</p><p>也可以通过宝塔可视化部署</p><p>主要关注容器名字，端口映射，挂载文件夹</p><p><img src="'+D+'" alt="img"></p><p>启动容器后通过</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> ps</span><span style="color:#D19A66;"> -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看所有容器</p><p><img src="'+_+'" alt="img"></p><h2 id="_5-启动网页" tabindex="-1">5. 启动网页 <a class="header-anchor" href="#_5-启动网页" aria-label="Permalink to &quot;5. 启动网页&quot;">​</a></h2><p>我们将filebrower容器的80端口映射到了服务器的92端口，所以首先需要保证宝塔面板开启92端口</p><p>开启位于宝塔面板</p><p>安全 —添加端口规则</p><p><img src="'+E+'" alt="img"></p><p>开启后在浏览器输入</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">IP地址：92</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>即跳转到容器的80端口，开始访问你部署的网站</p><h2 id="_6-一些docker指令" tabindex="-1">6. 一些docker指令 <a class="header-anchor" href="#_6-一些docker指令" aria-label="Permalink to &quot;6. 一些docker指令&quot;">​</a></h2><p><code>docker -v</code>：查看版本</p><p><code>docker pull filebrowser/filebrowser</code>：拉取镜像</p><p><code>docker run</code>：启动镜像</p><p><code>docker ps</code>：查看运行中的容器</p><p><code>docker ps -a</code>：查看所有容器包括停止的</p><p><code>docker kill &lt;ID&gt;</code>：杀死启动中的容器</p><p><code>docker rm &lt;ID&gt;</code>：删除容器</p>',166),A=[f];function v(w,x,q,P,N,L){return e(),a("div",null,A)}const R=s(F,[["render",v]]);export{W as __pageData,R as default};
