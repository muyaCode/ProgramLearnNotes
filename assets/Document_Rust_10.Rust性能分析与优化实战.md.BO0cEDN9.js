import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const h=JSON.parse('{"title":"10.Rust性能分析与优化实战","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/10.Rust性能分析与优化实战.md","filePath":"Document/Rust/10.Rust性能分析与优化实战.md","lastUpdated":1715867048000}'),o={name:"Document/Rust/10.Rust性能分析与优化实战.md"},l=e(`<h1 id="_10-rust性能分析与优化实战" tabindex="-1">10.Rust性能分析与优化实战 <a class="header-anchor" href="#_10-rust性能分析与优化实战" aria-label="Permalink to &quot;10.Rust性能分析与优化实战&quot;">​</a></h1><p>在软件开发过程中，性能分析和优化是提升程序执行效率、改善用户体验的关键步骤。特别是在高性能需求的系统中，理解和利用性能分析工具变得尤为重要。</p><p>对于Rust程序来说，Perf工具是一个强大的性能分析利器，它能帮助开发者精确地定位性能瓶颈，从而更有针对性地进行优化。本文将深入探讨Perf工具的使用方法，并通过实例展示如何在Rust程序中进行性能分析和优化。</p><h2 id="perf工具概述" tabindex="-1">Perf工具概述 <a class="header-anchor" href="#perf工具概述" aria-label="Permalink to &quot;Perf工具概述&quot;">​</a></h2><p>Perf（Performance analysis tools for Linux）是一组性能分析工具，它通过监控程序执行时的各种事件（如CPU周期数、指令数等）来收集统计数据，进而分析程序的执行性能。Perf工具非常适合于分析Linux下的Rust程序，能够帮助开发者发现代码中的性能瓶颈。</p><h2 id="安装和配置perf工具" tabindex="-1">安装和配置Perf工具 <a class="header-anchor" href="#安装和配置perf工具" aria-label="Permalink to &quot;安装和配置Perf工具&quot;">​</a></h2><p>在Linux系统中，可以通过包管理器安装Perf工具：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> apt-get</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> linux-tools-common</span><span style="color:#98C379;"> linux-tools-\`</span><span style="color:#61AFEF;">uname</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;">\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完成后，通过<code>perf --version</code>命令检查Perf工具是否安装成功。</p><h2 id="perf性能分析流程" tabindex="-1">Perf性能分析流程 <a class="header-anchor" href="#perf性能分析流程" aria-label="Permalink to &quot;Perf性能分析流程&quot;">​</a></h2><p>使用Perf工具进行性能分析主要包括以下几个步骤：</p><ol><li><strong>记录性能数据：</strong> 使用<code>perf record</code>命令运行你的程序，并收集其运行期间的性能数据。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">perf</span><span style="color:#98C379;"> record</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> ./your_program</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><strong>查看性能报告：</strong> 使用<code>perf report</code>命令查看收集到的性能数据，从中找出热点函数。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">perf</span><span style="color:#98C379;"> report</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><strong>深入分析：</strong> 结合<code>perf annotate</code>等命令，深入到热点函数的源代码级别，分析具体执行细节。</li></ol><h2 id="实战-优化rust程序性能" tabindex="-1">实战：优化Rust程序性能 <a class="header-anchor" href="#实战-优化rust程序性能" aria-label="Permalink to &quot;实战：优化Rust程序性能&quot;">​</a></h2><p>下面通过一个具体的例子来演示如何使用Perf工具对Rust程序进行性能分析和优化。</p><h3 id="实例分析" tabindex="-1">实例分析： <a class="header-anchor" href="#实例分析" aria-label="Permalink to &quot;实例分析：&quot;">​</a></h3><p>假设我们有一个计算斐波那契数的Rust程序，但是该程序的执行效率不高。我们将使用Perf工具来分析和优化它。</p><ol><li><p><strong>性能数据记录</strong></p><p>首先，使用<code>perf record</code>命令记录程序执行的性能数据。</p></li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">perf</span><span style="color:#98C379;"> record</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> ./fibonacci</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><p><strong>性能瓶颈定位</strong></p><p>然后，使用<code>perf report</code>命令查看性能报告，定位性能瓶颈。</p><p>经过分析，我们发现计算斐波那契数的递归函数占用了大量的CPU时间。</p></li><li><p><strong>代码优化</strong></p><p>根据分析结果，我们将递归计算方法改为动态规划的方式，减少重复计算。</p></li><li><p><strong>优化后性能对比</strong></p><p>优化后，再次使用Perf工具分析，发现执行时间大幅度降低，性能得到显著提升。</p></li><li><p><strong>总结反思</strong></p><p>通过这个例子，我们可以看到，合理使用Perf工具不仅能帮助我们准确地定位性能瓶颈，还能指导我们进行有效的优化改进。</p></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>性能分析是软件开发不可或缺的一环。对于Rust程序开发者而言，Perf工具提供了一种强大而灵活的手段来诊断和优化程序性能。通过本文的介绍和实战例子，希望能帮助读者更好地理解和运用Perf工具，提升Rust程序的性能。</p><p>在实际开发过程中，我们应该养成良好的性能分析习惯，定期对程序进行审视和优化，以确保软件系统的高效稳定运行。</p><h1 id="使用cargo的特性来优化rust项目" tabindex="-1">使用Cargo的特性来优化Rust项目 <a class="header-anchor" href="#使用cargo的特性来优化rust项目" aria-label="Permalink to &quot;使用Cargo的特性来优化Rust项目&quot;">​</a></h1><p>Rust语言使用Cargo作为其官方的包管理器和构建系统，吸取了许多现代化语言的优点，提供的特性非常强大。其中一个强大的功能就是features，通过这种方式可以让开发者有更大的灵活性去调整项目的结构和行为。这篇文章将深入介绍Cargo的features，并详细介绍如何使用。</p><h2 id="特性是什么" tabindex="-1"><strong>特性是什么？</strong> <a class="header-anchor" href="#特性是什么" aria-label="Permalink to &quot;**特性是什么？**&quot;">​</a></h2><p>在开始之前，我们需要理解“特性”是什么。在Cargo中，features是一个可选的编译时功能，它可以添加代码、改变代码的行为或者干脆禁用某些代码。开发者可以根据自身的需求，为不同的目的、平台或配置选择不同的features。实际上，我们可以把它看作是一个能够按需求启用关闭功能的开关。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[package]</span></span>
<span class="line"><span style="color:#61AFEF;">name</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;my_project&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">version</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[features]</span></span>
<span class="line"><span style="color:#61AFEF;">default</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;feat_a&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#61AFEF;">feat_a</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#61AFEF;">feat_b</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个例子中，我们定义了两个特性：<code>feat_a</code>和<code>feat_b</code>。<code>default</code>是一个特殊的特性，它会在没有指定特性的情况下启用。在这里，我们使得<code>feat_a</code>默认启用。</p><h2 id="特性如何改变代码的行为" tabindex="-1"><strong>特性如何改变代码的行为？</strong> <a class="header-anchor" href="#特性如何改变代码的行为" aria-label="Permalink to &quot;**特性如何改变代码的行为？**&quot;">​</a></h2><p>特性可以通过Rust的<code>cfg</code>属性来改变代码的行为。这是一个条件编译属性，它允许我们选择性地包含或排除部分代码。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#[cfg(feature = &quot;feat_a&quot;)]</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#98C379;"> function_a</span><span style="color:#ABB2BF;">() </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    println!(</span><span style="color:#61AFEF;">&quot;Function A is enabled&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#[cfg(feature = &quot;feat_b&quot;)]</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#98C379;"> function_b</span><span style="color:#ABB2BF;">() </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    println!(</span><span style="color:#61AFEF;">&quot;Function B is enabled&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个例子中，<code>function_a</code>只有在启用<code>feat_a</code>特性时才会编译，同样，<code>function_b</code>只有在启用<code>feat_b</code>特性时才会编译。</p><h2 id="如何启用和禁用特性" tabindex="-1"><strong>如何启用和禁用特性？</strong> <a class="header-anchor" href="#如何启用和禁用特性" aria-label="Permalink to &quot;**如何启用和禁用特性？**&quot;">​</a></h2><p>在编译时，我们可以使用<code>--features</code>参数来启用特性。例如，我们可以使用<code>cargo build --features &quot;feat_b&quot;</code>来启用<code>feat_b</code>特性。如果我们想要禁用所有默认特性，我们可以使用<code>--no-default-features</code>参数。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --features</span><span style="color:#98C379;"> &quot;feat_b&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --no-default-features</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="特性之间的依赖关系" tabindex="-1"><strong>特性之间的依赖关系</strong> <a class="header-anchor" href="#特性之间的依赖关系" aria-label="Permalink to &quot;**特性之间的依赖关系**&quot;">​</a></h2><p>特性之间可以有依赖关系，例如，我们可以使得<code>feat_b</code>依赖于<code>feat_a</code>。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[features]</span></span>
<span class="line"><span style="color:#61AFEF;">feat_a</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#61AFEF;">feat_b</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;feat_a&quot;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这个例子中，如果我们启用<code>feat_b</code>特性，那么<code>feat_a</code>特性也会自动启用。</p><h2 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p>Cargo的特性提供了强大的灵活性，使得我们可以根据需求选择性的启用关闭代码的功能，从而帮助我们更好的组织和优化你的Rust项目。希望本文能给你在Rust开发中提供帮助。</p><h1 id="给-rust-小白的依赖检查神器-cargo-outdated" tabindex="-1">给 Rust 小白的依赖检查神器：cargo-outdated <a class="header-anchor" href="#给-rust-小白的依赖检查神器-cargo-outdated" aria-label="Permalink to &quot;给 Rust 小白的依赖检查神器：cargo-outdated&quot;">​</a></h1><p><strong>cargo-outdated 官方文档</strong>：<a href="https://lib.rs/crates/cargo-outdated" target="_blank" rel="noreferrer">https://lib.rs/crates/cargo-outdated</a></p><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在使用 Rust 编程时，引入第三方依赖包是非常常见的事情。但随着项目的开发，依赖包版本落后，很容易引入 bug 或安全漏洞。手动逐个检查又太麻烦，有什么好办法吗？今天给大家介绍一个非常实用的 Cargo 子命令：<code>cargo-outdated</code>，帮你自动检查项目依赖，找出已过期的 crate。</p><h2 id="创作背景" tabindex="-1">创作背景 <a class="header-anchor" href="#创作背景" aria-label="Permalink to &quot;创作背景&quot;">​</a></h2><p>笔者在日常的 Rust 开发中，经常会遇到依赖包版本过低的问题，比如：</p><ul><li>某个依赖包修复了安全漏洞，需要尽快升级</li><li>新版本的依赖包提供了更多功能和优化，可以提升开发效率</li><li>不同项目间共用的依赖包版本不一致，造成潜在的不兼容问题</li></ul><p>手动去检查每个依赖包的最新版本，无疑是个体力活。好在 Rust 社区非常活跃，涌现了很多优秀的开源工具，<code>cargo-outdated</code> 就是其中之一。本文将手把手教你如何使用它来提升 Rust 项目依赖管理效率。</p><h2 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h2><p><code>cargo-outdated</code> 是一个 Cargo 子命令，用于检查项目的 crate 依赖是否有更新的版本。它通过比较 <code>Cargo.lock</code> 中记录的当前使用版本和 crates.io 上的最新版本，列出所有已过期的依赖包，并支持直接执行更新。主要特性包括：</p><ul><li>支持检查 SemVer 兼容的最新版本和绝对最新版本</li><li>支持根据依赖种类（如正常、开发、构建）分别展示</li><li>支持多种输出格式，如表格、JSON 等</li><li>支持配置检查深度、排除指定包等</li></ul><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><p>1.安装 <code>cargo-outdated</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --locked</span><span style="color:#98C379;"> cargo-outdated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.在项目根目录执行 <code>cargo outdated</code> 即可检查依赖：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> outdated</span></span>
<span class="line"><span style="color:#61AFEF;">Name</span><span style="color:#98C379;"> Project</span><span style="color:#98C379;"> Compat</span><span style="color:#98C379;"> Latest</span><span style="color:#98C379;"> Kind</span><span style="color:#98C379;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">clap</span><span style="color:#D19A66;"> 2.20.0</span><span style="color:#D19A66;"> 2.20.5</span><span style="color:#D19A66;"> 2.26.0</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">clap-</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">bitflags</span><span style="color:#D19A66;"> 0.7.0</span><span style="color:#D19A66;"> ---</span><span style="color:#D19A66;"> 0.9.1</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">clap-</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">libc</span><span style="color:#D19A66;"> 0.2.18</span><span style="color:#D19A66;"> 0.2.29</span><span style="color:#98C379;"> Removed</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">clap-</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">term_size</span><span style="color:#D19A66;"> 0.2.1</span><span style="color:#D19A66;"> 0.2.3</span><span style="color:#D19A66;"> 0.3.0</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">clap-</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">vec_map</span><span style="color:#D19A66;"> 0.6.0</span><span style="color:#D19A66;"> ---</span><span style="color:#D19A66;"> 0.8.0</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">num_cpus</span><span style="color:#D19A66;"> 1.6.0</span><span style="color:#D19A66;"> ---</span><span style="color:#D19A66;"> 1.6.2</span><span style="color:#98C379;"> Development</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">num_cpus-</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">libc</span><span style="color:#D19A66;"> 0.2.18</span><span style="color:#D19A66;"> 0.2.29</span><span style="color:#D19A66;"> 0.2.29</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">pkg-config</span><span style="color:#D19A66;"> 0.3.8</span><span style="color:#D19A66;"> 0.3.9</span><span style="color:#D19A66;"> 0.3.9</span><span style="color:#98C379;"> Build</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">term</span><span style="color:#D19A66;"> 0.4.5</span><span style="color:#D19A66;"> ---</span><span style="color:#D19A66;"> 0.4.6</span><span style="color:#98C379;"> Normal</span><span style="color:#D19A66;"> ---</span></span>
<span class="line"><span style="color:#61AFEF;">term_size-</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">libc</span><span style="color:#D19A66;"> 0.2.18</span><span style="color:#D19A66;"> 0.2.29</span><span style="color:#D19A66;"> 0.2.29</span><span style="color:#98C379;"> Normal</span><span style="color:#98C379;"> cfg</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">...</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>表格中几个主要字段含义如下：</p><ul><li><code>Name</code>：依赖包名称，<code>-&gt;</code> 表示依赖树中的子依赖</li><li><code>Project</code>：当前使用的版本</li><li><code>Compat</code>：SemVer 兼容的最新版本，<code>---</code> 表示无最新兼容版本</li><li><code>Latest</code>：绝对最新的版本</li><li><code>Kind</code>： 依赖种类，如 <code>Normal</code>（常规）、<code>Development</code>（开发）、<code>Build</code>（构建）</li></ul><p>可以看到一些依赖的当前版本落后于最新兼容版本（Compat），比如 <code>clap</code> 从 2.20.0 到了 2.20.5，是不破坏 API 的小版本升级。</p><p>而 <code>clap-&gt;libc</code> 的绝对最新版本（Latest）已经移除了，可能需要选择新的替代品。</p><ol><li>根据 <code>cargo outdated</code> 的结果，手动更新依赖版本，或使用 <code>cargo update</code> 命令自动更新到最新兼容版本。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[dependencies]</span></span>
<span class="line"><span style="color:#61AFEF;">clap</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;2.20.5&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">num_cpus</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;1.6.2&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>注意谨慎对待不兼容的大版本更新（Latest 版本），建议查看变更日志（CHANGELOG）评估兼容性。</p></blockquote><h2 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Rust 项目中管理依赖包版本是一个老大难的问题，cargo-outdated 提供了一个简单高效的解决方案。建议养成定期（如每周）检查依赖的习惯，尽早发现和解决潜在的过期问题，让你的项目保持健康和活力。</p><h1 id="rust-高性能编程指南" tabindex="-1">Rust 高性能编程指南 <a class="header-anchor" href="#rust-高性能编程指南" aria-label="Permalink to &quot;Rust 高性能编程指南&quot;">​</a></h1><p><strong>原书</strong>: The Rust Performance Book</p><p><strong>中文版</strong>：Rust高性能编程指南</p><p><strong>PDF下载</strong>：<a href="https://github.com/smallnest/ebooks" target="_blank" rel="noreferrer">https://github.com/smallnest/ebooks</a></p><p>对于许多 Rust 程序来说，性能⾄关重要。</p><p>本书介绍了⼀些技术，可以改善 Rust 程序的性能相关特性，如运⾏时速度、内存使 ⽤和⼆进制⼤⼩。编译时间 部分还包括⼀些可以缩短 Rust 程序编译时间的技术。有 些技术只需要修改构建配置，但很多需要改动代码。</p><p>部分技术是 Rust 特有的，⽽其他⼀些则包含了可以（经过修改）应⽤到其他编程语 ⾔程序中的思想。⼀般提示 部分也包括了适⽤于任何编程语⾔的⼀般原则。尽管如 此，本书主要关注 Rust 程序的性能，不能取代⼀本通⽤的性能分析与优化指南。</p><p>本书还专注于实⽤且经过验证的技术：许多技术都有链接到拉取请求或其他资源，展 示了这些技术如何在真实的 Rust 程序中使⽤。它反映了主要作者的背景，偏向于编 译器开发，⽽不太涉及其他领域，⽐如科学计算。</p><p>本书的内容故意写的很简练，本书更注重⼴度⽽⾮深度，使得阅读更加快捷。在适当 的情况下，会提供链接到提供更深⼊内容的外部资源。</p><p>本书的⽬标读者是中级和⾼级 Rust ⽤户。初学者 Rust ⽤户有很多需要学习的内 容，这些技术可能会给他们带来不必要的困扰。</p><h1 id="rust-性能手册-中文版" tabindex="-1">Rust 性能手册（中文版） <a class="header-anchor" href="#rust-性能手册-中文版" aria-label="Permalink to &quot;Rust 性能手册（中文版）&quot;">​</a></h1><p><a href="https://blues-star.github.io/perf-book-zh/build-configuration_zh.html" target="_blank" rel="noreferrer">https://blues-star.github.io/perf-book-zh/build-configuration_zh.html</a></p><p><a href="https://blues-star.github.io/perf-book-zh/build-configuration_zh.html" target="_blank" rel="noreferrer">构建配置 - The Rust Performance Book (blues-star.github.io)</a></p>`,83),p=[l];function r(t,c,i,d,u,b){return n(),a("div",null,p)}const m=s(o,[["render",r]]);export{h as __pageData,m as default};
