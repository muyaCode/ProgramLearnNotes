import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const l="/ProgramLearnNotes/assets/image-20240323203614206.CSwWm_Mr.png",g=JSON.parse('{"title":"1.Rust 开发环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/1.Rust开发环境搭建.md","filePath":"Document/Rust/1.Rust开发环境搭建.md","lastUpdated":1717759497000}'),o={name:"Document/Rust/1.Rust开发环境搭建.md"},p=e('<h1 id="_1-rust-开发环境搭建" tabindex="-1">1.Rust 开发环境搭建 <a class="header-anchor" href="#_1-rust-开发环境搭建" aria-label="Permalink to &quot;1.Rust 开发环境搭建&quot;">​</a></h1><p>Rust 官网：<a href="https://www.rust-lang.org/zh-CN/" target="_blank" rel="noreferrer">Rust 程序设计语言 (rust-lang.org)</a></p><p>如果你觉得安装较为麻烦，只想体验一下的话，可以进入<a href="https://play.rust-lang.org/" target="_blank" rel="noreferrer">演练场</a>在线使用。</p><h2 id="_1-下载-rust-安装程序-rustup" tabindex="-1">1.下载 Rust 安装程序 rustup <a class="header-anchor" href="#_1-下载-rust-安装程序-rustup" aria-label="Permalink to &quot;1.下载 Rust 安装程序 rustup&quot;">​</a></h2><p>访问<a href="https://www.rust-lang.org/zh-CN/tools/install" target="_blank" rel="noreferrer">Rust 官方网站</a>，下载适用于 Windows 的<code>rustup-init.exe</code>安装程序。</p><p>安装 Rust 的主要方式是通过 Rustup 这一工具，它既是一个 Rust 安装器又是一个版本管理工具。</p><p>教程：<a href="https://www.rust-lang.org/zh-CN/tools/install" target="_blank" rel="noreferrer">安装 Rust - Rust 程序设计语言 (rust-lang.org)</a></p><h3 id="_1-channel-版本" tabindex="-1">1). channel 版本 <a class="header-anchor" href="#_1-channel-版本" aria-label="Permalink to &quot;1). channel 版本&quot;">​</a></h3><p>Rust 发布在三个不同的 channel 上：stable、beta、nightly，简单说就是三种不同的版本。</p><ul><li>stable：Rust 的稳定版本，每 6 周发布一次。</li><li>beta：Rust 的公开测试版本，将是下一个 stable 版本。</li><li>nightly：每天更新，包含以一些实验性的新特性。</li></ul><h3 id="_2-toolchain" tabindex="-1">2). toolchain <a class="header-anchor" href="#_2-toolchain" aria-label="Permalink to &quot;2). toolchain&quot;">​</a></h3><p>一套 Rust 组件，包括编译器及其相关工具，并且包含 channel，版本及支持的平台信息。</p><h3 id="_3-target" tabindex="-1">3). target <a class="header-anchor" href="#_3-target" aria-label="Permalink to &quot;3). target&quot;">​</a></h3><p>指编译的目标平台，即：编译后的程序在哪种操作系统上运行。</p><h2 id="_2-运行安装程序-rustup" tabindex="-1">2.运行安装程序 rustup <a class="header-anchor" href="#_2-运行安装程序-rustup" aria-label="Permalink to &quot;2.运行安装程序 rustup&quot;">​</a></h2><p>双击运行<code>rustup-init.exe</code>，并按照屏幕上的指示进行操作。</p><p><img src="'+l+`" alt="image-20240323203614206"></p><p>按照提示，给出三个选项，分别是：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">1.</span><span style="color:#98C379;"> 默认安装</span></span>
<span class="line"><span style="color:#61AFEF;">2.</span><span style="color:#98C379;"> 自定义安装</span></span>
<span class="line"><span style="color:#61AFEF;">3.</span><span style="color:#98C379;"> 取消安装</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里我么选择 2，进行自定义安装。</p><p>输入：<code>x86_64-pc-windows-gnu</code>，其他的默认。</p><p>最后会确认安装信息，回车进行安装，会从网上下载文件，所以安装过程需要保证网络正常。</p><h3 id="_4-component" tabindex="-1">4). component <a class="header-anchor" href="#_4-component" aria-label="Permalink to &quot;4). component&quot;">​</a></h3><p>toolchain 是由 component 组成的。</p><p>查看所有可用和已经安装的组件命令如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> component</span><span style="color:#98C379;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>rustup 默认安装的组件：</p><ul><li>rustc：Rust 编译器。</li><li>rust-std：Rust 标准库。</li><li>cargo：包管理和构建工具。</li><li>rust-docs：Rust 文档。</li><li>rustfmt：用来格式化 Rust 源代码。</li><li>clippy：Rust 的代码检查工具。</li></ul><h3 id="_5-profile" tabindex="-1">5). profile <a class="header-anchor" href="#_5-profile" aria-label="Permalink to &quot;5). profile&quot;">​</a></h3><p>为了方便对 component 进行管理，使用 profile 定义一组 component。</p><p>不同的 profile 包含不同的组件，安装 rustup 时有三种 profile 可选：</p><table><thead><tr><th>Profile</th><th>components</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>修改 profile 命令如下：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>rustup set profile minimal</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-验证安装" tabindex="-1">3.验证安装 <a class="header-anchor" href="#_3-验证安装" aria-label="Permalink to &quot;3.验证安装&quot;">​</a></h2><p>在命令提示符或终端中输入验证 Rust 是否正确安装。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rustc</span><span style="color:#D19A66;"> --version</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#D19A66;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_4-配置-c-构建工具" tabindex="-1">4.配置 C++构建工具 <a class="header-anchor" href="#_4-配置-c-构建工具" aria-label="Permalink to &quot;4.配置 C++构建工具&quot;">​</a></h2><p>在安装过程中，可能需要安装 Microsoft C++构建工具。</p><p>默认情况，Rust 依赖 <code>C++ build tools</code>，没有安装也关系。</p><p><a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/" target="_blank" rel="noreferrer">Microsoft C++ 生成工具 - Visual Studio</a></p><p>点击链接进入页面后，点击<code>下载生成工具</code>，然后就和正常安装包一样安装即可。</p><h2 id="_5-配置环境变量" tabindex="-1">5.配置环境变量 <a class="header-anchor" href="#_5-配置环境变量" aria-label="Permalink to &quot;5.配置环境变量&quot;">​</a></h2><p>安装完成后，确保<code>~/.cargo/bin</code>目录被添加到 PATH 环境变量中。</p><h3 id="配置工具链安装位置" tabindex="-1">配置工具链安装位置 <a class="header-anchor" href="#配置工具链安装位置" aria-label="Permalink to &quot;配置工具链安装位置&quot;">​</a></h3><p>在系统环境变量中添加如下变量：</p><p><code>CARGO_HOME</code> 指定 <code>cargo</code> 的安装目录</p><p><code>RUSTUP_HOME</code> 指定 <code>rustup</code> 的安装目录</p><p>默认分别安装到用户目录下的<code>.cargo</code> 和<code>.rustup</code> 目录</p><h2 id="_6-配置国内镜像" tabindex="-1">6.配置国内镜像 <a class="header-anchor" href="#_6-配置国内镜像" aria-label="Permalink to &quot;6.配置国内镜像&quot;">​</a></h2><p>为了提高下载速度，你可以配置 Rust 和 cargo 的国内镜像源。</p><h3 id="_1-配置-rustup-国内镜像" tabindex="-1">1). 配置 rustup 国内镜像 <a class="header-anchor" href="#_1-配置-rustup-国内镜像" aria-label="Permalink to &quot;1). 配置 rustup 国内镜像&quot;">​</a></h3><p>在系统环境变量中添加如下变量（选一个就可以，可以组合）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 清华大学</span></span>
<span class="line"><span style="color:#61AFEF;">RUSTUP_DIST_SERVER：https://mirrors.tuna.tsinghua.edu.cn/rustup</span></span>
<span class="line"><span style="color:#61AFEF;">RUSTUP_UPDATE_ROOT：https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 中国科学技术大学</span></span>
<span class="line"><span style="color:#61AFEF;">RUSTUP_DIST_SERVER：https://mirrors.ustc.edu.cn/rust-static</span></span>
<span class="line"><span style="color:#61AFEF;">RUSTUP_UPDATE_ROOT：https://mirrors.ustc.edu.cn/rust-static/rustup</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-配置-cargo-国内镜像" tabindex="-1">2). 配置 cargo 国内镜像 <a class="header-anchor" href="#_2-配置-cargo-国内镜像" aria-label="Permalink to &quot;2). 配置 cargo 国内镜像&quot;">​</a></h3><p>在 cargo 安装目录下新建 config 文件（注意 config 没有任何后缀），文件内容如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[source.crates-io]</span></span>
<span class="line"><span style="color:#61AFEF;">registry</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;https://github.com/rust-lang/crates.io-index&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">replace-with</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &#39;tuna&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 清华大学</span></span>
<span class="line"><span style="color:#ABB2BF;">[source.tuna]</span></span>
<span class="line"><span style="color:#61AFEF;">registry</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 中国科学技术大学</span></span>
<span class="line"><span style="color:#ABB2BF;">[source.ustc]</span></span>
<span class="line"><span style="color:#61AFEF;">registry</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置代理</span></span>
<span class="line"><span style="color:#ABB2BF;">[http]</span></span>
<span class="line"><span style="color:#61AFEF;">proxy</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;127.0.0.1:8889&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">[https]</span></span>
<span class="line"><span style="color:#61AFEF;">proxy</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;127.0.0.1:8889&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_7-交叉编译配置-可选" tabindex="-1">7.交叉编译配置（可选） <a class="header-anchor" href="#_7-交叉编译配置-可选" aria-label="Permalink to &quot;7.交叉编译配置（可选）&quot;">​</a></h2><p>如果需要进行交叉编译，可以安装相应的 target 和工具链。</p><h3 id="windows-交叉编译-linux-程序" tabindex="-1">Windows 交叉编译 Linux 程序 <a class="header-anchor" href="#windows-交叉编译-linux-程序" aria-label="Permalink to &quot;Windows 交叉编译 Linux 程序&quot;">​</a></h3><p>目标服务器是 <code>Linux(CentOS 7) 64bit</code>, 所以我们添加的 target 应该是<code>x86_64-unknown-linux-gnu</code>(动态依赖) 或者<code>x86_64-unknown-linux-musl</code>（静态依赖）</p><p>解释：</p><ul><li>动态依赖：目标服务器需要包含动态依赖的相关库（用户共享库）</li><li>静态依赖，目标服务器不需要包含相应的库，但是打包文件会更大些 1). 添加需要的 target</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> target</span><span style="color:#98C379;"> add</span><span style="color:#98C379;">  x86_64-unknown-linux-musl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2). 在 cargo 安装目录下新建 config 文件（注意 config 没有任何后缀），添加的文件内容如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[target.x86_64-unknown-linux-musl]</span></span>
<span class="line"><span style="color:#61AFEF;">linker</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;rust-lld&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3). 构建</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --target</span><span style="color:#98C379;"> x86_64-unknown-linux-musl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="rustup-命令相关" tabindex="-1">rustup 命令相关 <a class="header-anchor" href="#rustup-命令相关" aria-label="Permalink to &quot;rustup 命令相关&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 显示当前安装的工具链信息</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> show</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检查安装更新</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> update</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 卸载</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> self</span><span style="color:#98C379;"> uninstall</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置当前默认工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> default</span><span style="color:#98C379;"> stable-x86_64-pc-windows-gnu</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看帮助</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#D19A66;"> -h</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># --------------------------&gt;配置工具链</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> toolchain</span><span style="color:#98C379;"> list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> toolchain</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> stable-x86_64-pc-windows-gnu</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 卸载工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> toolchain</span><span style="color:#98C379;"> uninstall</span><span style="color:#98C379;"> stable-x86_64-pc-windows-gnu</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置自定义工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> toolchain</span><span style="color:#98C379;"> link</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">toolchain-nam</span><span style="color:#ABB2BF;">e&gt; </span><span style="color:#98C379;">&quot;&lt;toolchain-path&gt;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># --------------------------&gt;配置一个目录以及其子目录的默认工具链</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看已设置的默认工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> override</span><span style="color:#98C379;"> list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置该目录以及其子目录的默认工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> override</span><span style="color:#98C379;"> set</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">toolchai</span><span style="color:#ABB2BF;">n&gt; </span><span style="color:#D19A66;">--path</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">pat</span><span style="color:#ABB2BF;">h&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 取消目录以及其子目录的默认工具链</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> override</span><span style="color:#98C379;"> unset</span><span style="color:#D19A66;"> --path</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">pat</span><span style="color:#ABB2BF;">h&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># --------------------------&gt;配置工具链的可用目标</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看目标列表</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> target</span><span style="color:#98C379;"> list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装目标</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> target</span><span style="color:#98C379;"> add</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">targe</span><span style="color:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 卸载目标</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> target</span><span style="color:#98C379;"> remove</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">targe</span><span style="color:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 为特定工具链安装目标</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> target</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> --toolchain</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">toolchai</span><span style="color:#ABB2BF;">n&gt; &lt;</span><span style="color:#98C379;">targe</span><span style="color:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># --------------------------&gt;配置 rustup 安装的组件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看可用组件</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> component</span><span style="color:#98C379;"> list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装组件</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> component</span><span style="color:#98C379;"> add</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">componen</span><span style="color:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 卸载组件</span></span>
<span class="line"><span style="color:#61AFEF;">rustup</span><span style="color:#98C379;"> component</span><span style="color:#98C379;"> remove</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">componen</span><span style="color:#ABB2BF;">t&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>rustc 相关</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 查看rustc版本</span></span>
<span class="line"><span style="color:#61AFEF;">rustc</span><span style="color:#D19A66;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="cargo-常用" tabindex="-1">cargo 常用 <a class="header-anchor" href="#cargo-常用" aria-label="Permalink to &quot;cargo 常用&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 查看cargo版本</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#D19A66;"> --version</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 新建项目</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> new</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">project_nam</span><span style="color:#ABB2BF;">e&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 构建项目</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> build</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 运行项目</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> run</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检查项目</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> check</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看帮助</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#D19A66;"> -h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="最全-cargo-命令" tabindex="-1">最全 cargo 命令 <a class="header-anchor" href="#最全-cargo-命令" aria-label="Permalink to &quot;最全 cargo 命令&quot;">​</a></h3><p>文档：</p><p>涵盖了从项目创建到开发、测试、文档生成、安全审核、代码格式化和发布的各个方面。这些命令的完整细节和更多选项可以在 Cargo 的官方文档或相应的第三方文档中找到。</p><table><thead><tr><th>命令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>cargo new</code></td><td>创建一个新的 Rust 项目</td><td><code>cargo new my_project</code></td></tr><tr><td><code>cargo build</code></td><td>编译项目和其依赖</td><td><code>cargo build --release</code></td></tr><tr><td><code>cargo run</code></td><td>编译并运行 Rust 项目</td><td><code>cargo run</code></td></tr><tr><td><code>cargo test</code></td><td>运行项目的测试</td><td><code>cargo test</code></td></tr><tr><td><code>cargo doc</code></td><td>为项目的依赖生成文档</td><td><code>cargo doc --open</code></td></tr><tr><td><code>cargo update</code></td><td>更新 <code>Cargo.lock</code> 文件中的依赖版本</td><td><code>cargo update</code></td></tr><tr><td><code>cargo check</code></td><td>快速检查代码能否编译</td><td><code>cargo check</code></td></tr><tr><td><code>cargo clean</code></td><td>清除编译生成的文件</td><td><code>cargo clean</code></td></tr><tr><td><code>cargo publish</code></td><td>将包发布到 crates.io</td><td><code>cargo publish</code></td></tr><tr><td><code>cargo bench</code></td><td>运行基准测试</td><td><code>cargo bench</code></td></tr><tr><td><code>cargo fetch</code></td><td>下载项目依赖的 crate，但不进行编译</td><td><code>cargo fetch</code></td></tr><tr><td><code>cargo install</code></td><td>安装和管理 Rust 二进制文件</td><td><code>cargo install [crate_name]</code></td></tr><tr><td><code>cargo uninstall</code></td><td>卸载通过 Cargo 安装的 Rust 二进制文件</td><td><code>cargo uninstall [crate_name]</code></td></tr><tr><td><code>cargo package</code></td><td>准备一个本地 crate 以便发布</td><td><code>cargo package</code></td></tr><tr><td><code>cargo search</code></td><td>在 crates.io 上搜索 crate</td><td><code>cargo search [search_query]</code></td></tr><tr><td><code>cargo login</code></td><td>使用 API token 登录 crates.io</td><td><code>cargo login [token]</code></td></tr><tr><td><code>cargo owner</code></td><td>管理 crate 的所有者</td><td><code>cargo owner --add [username]</code></td></tr><tr><td><code>cargo init</code></td><td>在现有目录中初始化新的 Rust 项目</td><td><code>cargo init my_project</code></td></tr><tr><td><code>cargo version</code></td><td>显示 Cargo 的版本信息</td><td><code>cargo version</code></td></tr><tr><td><code>cargo vendor</code></td><td>将所有依赖复制到本地目录</td><td><code>cargo vendor</code></td></tr><tr><td><code>cargo metadata</code></td><td>输出 JSON 格式的项目元数据</td><td><code>cargo metadata</code></td></tr><tr><td><code>cargo tree</code></td><td>显示项目依赖树</td><td><code>cargo tree</code></td></tr><tr><td><code>cargo fix</code></td><td>自动修复 Rust 代码中的警告</td><td><code>cargo fix</code></td></tr><tr><td><code>cargo audit</code></td><td>审核 Cargo.lock 以查找不安全的依赖</td><td><code>cargo audit</code></td></tr><tr><td><code>cargo rustc</code></td><td>提供对 rustc 编译器参数的访问</td><td><code>cargo rustc -- [options]</code></td></tr><tr><td><code>cargo rustdoc</code></td><td>为项目运行 rustdoc 工具</td><td><code>cargo rustdoc -- [options]</code></td></tr><tr><td><code>cargo clippy</code></td><td>运行 clippy 来进行代码审查</td><td><code>cargo clippy</code></td></tr><tr><td><code>cargo fmt</code></td><td>使用 rustfmt 格式化代码</td><td><code>cargo fmt</code></td></tr><tr><td><code>cargo miri</code></td><td>运行 miri 以执行内存安全检查</td><td><code>cargo miri test</code></td></tr><tr><td><code>cargo outdated</code></td><td>检查过时的依赖</td><td><code>cargo outdated</code></td></tr><tr><td><code>cargo release</code></td><td>自动化 crate 发布流程</td><td><code>cargo release</code></td></tr><tr><td><code>cargo add</code></td><td>向 Cargo.toml 添加新依赖</td><td><code>cargo add [crate_name]</code></td></tr><tr><td><code>cargo rm</code></td><td>从 Cargo.toml 中移除依赖</td><td><code>cargo rm [crate_name]</code></td></tr><tr><td><code>cargo upgrade</code></td><td>升级 Cargo.toml 的依赖版本</td><td><code>cargo upgrade [crate_name]</code></td></tr></tbody></table><p>请注意，一些命令如 <code>cargo audit</code>, <code>cargo clippy</code>, <code>cargo fmt</code>, <code>cargo miri</code>, <code>cargo outdated</code>, <code>cargo release</code>, <code>cargo add</code>, <code>cargo rm</code>, 和 <code>cargo upgrade</code> 实际上是由第三方提供的 Cargo 扩展（也称为 &quot;cargo 子命令&quot;），并可能需要单独安装。</p><h1 id="rust下载依赖慢或卡住的问题及解决方法" tabindex="-1">Rust下载依赖慢或卡住的问题及解决方法 <a class="header-anchor" href="#rust下载依赖慢或卡住的问题及解决方法" aria-label="Permalink to &quot;Rust下载依赖慢或卡住的问题及解决方法&quot;">​</a></h1><p>如果你在使用Rust进行编程时，你可能会遇到下载依赖库时出现下载缓慢或者卡住的情况。由于Rust默认的镜像下载地址是在国外，因此在某些网络环境下，下载速度可能会受到影响。</p><h2 id="解决方案" tabindex="-1"><strong>解决方案</strong> <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;**解决方案**&quot;">​</a></h2><p>对于以上的问题，我们有几种可能的解决方案：</p><h3 id="_1-开启命令行或全局代理" tabindex="-1"><strong>1. 开启命令行或全局代理</strong> <a class="header-anchor" href="#_1-开启命令行或全局代理" aria-label="Permalink to &quot;**1. 开启命令行或全局代理**&quot;">​</a></h3><p>在大多数情况下，代理工具默认只会开启浏览器的代理，对于命令行或其他软件的访问，并不会代理流量。这意味着这些通过命令行或其他软件进行的网络访问还是通过正常的网络进行的，导致下载速度非常慢。</p><p>因此，你需要在你的代理工具中开启终端代理或全局代理。以ClashX为例，你可以通过点击“复制终端代理命令”来自动复制以下的代理命令，并在终端中执行这些命令以完成代理设置：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#E06C75;"> https_proxy</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">http</span><span style="color:#ABB2BF;">://</span><span style="color:#E06C75;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">7890</span><span style="color:#E06C75;"> http_proxy</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">http</span><span style="color:#ABB2BF;">://</span><span style="color:#E06C75;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">7890</span><span style="color:#E06C75;"> all_proxy</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">socks5</span><span style="color:#ABB2BF;">://</span><span style="color:#E06C75;">127</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">7891</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-修改rust的下载镜像为国内镜像地址" tabindex="-1"><strong>2. 修改Rust的下载镜像为国内镜像地址</strong> <a class="header-anchor" href="#_2-修改rust的下载镜像为国内镜像地址" aria-label="Permalink to &quot;**2. 修改Rust的下载镜像为国内镜像地址**&quot;">​</a></h3><p>另一种解决方案是直接修改Rust的默认下载镜像地址为国内的镜像地址。这种方法可以一劳永逸地解决问题，但配置过程可能稍显麻烦。</p><p>要使用crates.io之外的镜像服务，你需要修改<code>$HOME/.cargo/config.toml</code>文件，以添加新的服务提供商。有两种方式可以实现这个目标：新增镜像地址和覆盖默认的镜像地址。</p><h4 id="_2-1-新增镜像地址" tabindex="-1"><strong>2.1 新增镜像地址</strong> <a class="header-anchor" href="#_2-1-新增镜像地址" aria-label="Permalink to &quot;**2.1 新增镜像地址**&quot;">​</a></h4><p>首先是在crates.io之外添加新的注册服务。在<code>$HOME/.cargo/config.toml</code>文件中添加以下内容：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[registries]</span></span>
<span class="line"><span style="color:#61AFEF;">ustc</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> index</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><span style="color:#98C379;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这种方式只会新增一个新的镜像地址，因此在引入依赖的时候，你需要指定该地址。例如，如果你想在你的项目中引入<code>time</code>包，你需要在<code>Cargo.toml</code>文件中使用以下方式进行引入：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[dependencies]</span></span>
<span class="line"><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;"> = {  </span><span style="color:#61AFEF;">registry</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;ustc&quot;</span><span style="color:#98C379;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这种方法的缺点是，每次添加新的依赖时，都需要在<code>Cargo.toml</code>文件中指定新的镜像地址。因此，如果你的项目非常大，这种方法可能会非常麻烦。</p><h4 id="_2-2-覆盖默认的镜像地址" tabindex="-1"><strong>2.2 覆盖默认的镜像地址</strong> <a class="header-anchor" href="#_2-2-覆盖默认的镜像地址" aria-label="Permalink to &quot;**2.2 覆盖默认的镜像地址**&quot;">​</a></h4><p>相比于新增镜像地址，我们更推荐覆盖默认的镜像地址这种方法，因为这种方法无需修改<code>Cargo.toml</code>文件，而是直接使用新注册服务来替代默认的crates.io。</p><p>在<code>$HOME/.cargo/config.toml</code>文件中添加以下内容：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[source.crates-io]</span></span>
<span class="line"><span style="color:#61AFEF;">replace-with</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &#39;ustc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[source.ustc]</span></span>
<span class="line"><span style="color:#61AFEF;">registry</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这种方法的好处是，任何需要从crates.io下载的包，都将从中国科大的镜像地址下载，从而极大地提高下载速度。</p><h3 id="下载卡住的问题" tabindex="-1"><strong>下载卡住的问题</strong> <a class="header-anchor" href="#下载卡住的问题" aria-label="Permalink to &quot;**下载卡住的问题**&quot;">​</a></h3><p>如果你遇到了下载进程完全卡住不动的问题，那么问题的原因可能是索引更新速度太慢。Rust的包数量越来越多，索引文件也越来越大，如果不使用国内镜像，这种情况可能会比较常见。不过，一旦你配置好了国内镜像，这个问题应该就可以得到缓解了。</p><p>另外，如果你同时使用了VSCode和命令行，而VSCode的rust-analyzer插件在下载新的依赖时锁定了当前项目，那么你可能会看到以下的错误消息：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> build</span></span>
<span class="line"><span style="color:#61AFEF;">    Blocking</span><span style="color:#98C379;"> waiting</span><span style="color:#98C379;"> for</span><span style="color:#98C379;"> file</span><span style="color:#98C379;"> lock</span><span style="color:#98C379;"> on</span><span style="color:#98C379;"> package</span><span style="color:#98C379;"> cache</span></span>
<span class="line"><span style="color:#61AFEF;">    Blocking</span><span style="color:#98C379;"> waiting</span><span style="color:#98C379;"> for</span><span style="color:#98C379;"> file</span><span style="color:#98C379;"> lock</span><span style="color:#98C379;"> on</span><span style="color:#98C379;"> package</span><span style="color:#98C379;"> cache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个问题出现的原因是，VSCode的下载进程正在运行，而该下载进程已经锁住了当前的项目，导致你无法在另一个地方再次进行构建。解决这个问题的方法有几种：</p><ul><li>增加下载速度（见前面的解决方法）</li><li>耐心等待持有锁的用户构建完成</li><li>强行停止正在构建的进程，例如杀掉IDE使用的rust-analyzer插件进程，然后删除<code>$HOME/.cargo/.package_cache</code>目录</li></ul><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p>以上就是在使用Rust下载依赖时可能遇到的问题以及解决方法。希望对你有所帮助，也欢迎你在留言区分享你的经验或者提出你的疑问！</p><h1 id="配置-vscode-开发环境" tabindex="-1">配置 VSCode 开发环境 <a class="header-anchor" href="#配置-vscode-开发环境" aria-label="Permalink to &quot;配置 VSCode 开发环境&quot;">​</a></h1><p>配置开发环境相当简单，只要安装以下插件即可：</p><p>rust-analyzer</p><p>Rust Syntax</p><p>Rust Extension Pack</p><p>Rust Doc Viewer</p><p>Rust Assist</p><h2 id="与-rust-直接相关的插件" tabindex="-1"><strong>与 Rust 直接相关的插件</strong> <a class="header-anchor" href="#与-rust-直接相关的插件" aria-label="Permalink to &quot;**与 Rust 直接相关的插件**&quot;">​</a></h2><h3 id="_1-rust-analyzer-rust-语言支持" tabindex="-1"><strong>1. rust-analyzer：Rust 语言支持</strong> <a class="header-anchor" href="#_1-rust-analyzer-rust-语言支持" aria-label="Permalink to &quot;**1. rust-analyzer：Rust 语言支持**&quot;">​</a></h3><p>rust-analyzer 是 Rust 官方的语言服务器实现,提供了代码补全、跳转定义、类型推断等一系列强大的功能。它是 Rust 开发者必备的插件之一。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // rust-analyzer 会自动补全 println! 宏</span></span>
<span class="line"><span>    println!(&quot;Hello, world!&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-crates-rust-包管理" tabindex="-1"><strong>2. crates：Rust 包管理</strong> <a class="header-anchor" href="#_2-crates-rust-包管理" aria-label="Permalink to &quot;**2. crates：Rust 包管理**&quot;">​</a></h3><p>crates 插件提供了方便的 Rust 包管理功能,你可以直接在 VS Code 中搜索、安装和更新 Rust 库。</p><h3 id="_3-codelldb-rust-调试支持" tabindex="-1"><strong>3. CodeLLDB：Rust 调试支持</strong> <a class="header-anchor" href="#_3-codelldb-rust-调试支持" aria-label="Permalink to &quot;**3. CodeLLDB：Rust 调试支持**&quot;">​</a></h3><p>CodeLLDB 是一个基于 LLDB 的调试器插件,提供了对 Rust 的调试支持。使用 CodeLLDB,你可以方便地在 VS Code 中调试 Rust 程序。</p><h2 id="与-rust-开发相关但不限于-rust-的插件" tabindex="-1"><strong>与 Rust 开发相关但不限于 Rust 的插件</strong> <a class="header-anchor" href="#与-rust-开发相关但不限于-rust-的插件" aria-label="Permalink to &quot;**与 Rust 开发相关但不限于 Rust 的插件**&quot;">​</a></h2><h3 id="_4-even-better-toml-toml-文件支持" tabindex="-1"><strong>4. Even Better TOML：TOML 文件支持</strong> <a class="header-anchor" href="#_4-even-better-toml-toml-文件支持" aria-label="Permalink to &quot;**4. Even Better TOML：TOML 文件支持**&quot;">​</a></h3><p>Even Better TOML 为 VS Code 提供了增强的 TOML 文件支持,包括语法高亮、格式化等功能。</p><h3 id="_5-error-lens-错误提示优化" tabindex="-1"><strong>5. Error Lens：错误提示优化</strong> <a class="header-anchor" href="#_5-error-lens-错误提示优化" aria-label="Permalink to &quot;**5. Error Lens：错误提示优化**&quot;">​</a></h3><p>Error Lens 可以在编辑器中直接显示错误信息,方便快速定位和修复问题。</p><h3 id="_6-gitlens-git-增强" tabindex="-1"><strong>6. GitLens：Git 增强</strong> <a class="header-anchor" href="#_6-gitlens-git-增强" aria-label="Permalink to &quot;**6. GitLens：Git 增强**&quot;">​</a></h3><p>GitLens 是一个强大的 Git 工具,提供了代码历史、文件注解等功能,方便代码追踪和管理。</p><h3 id="_7-prettier-code-formatter-代码格式化" tabindex="-1"><strong>7. Prettier - Code formatter：代码格式化</strong> <a class="header-anchor" href="#_7-prettier-code-formatter-代码格式化" aria-label="Permalink to &quot;**7. Prettier - Code formatter：代码格式化**&quot;">​</a></h3><p>Prettier 是一个通用的代码格式化工具,支持多种编程语言。虽然 Rust 已经内置了 rustfmt,但 Prettier 可以格式化项目中的其他文件,如 JSON、YAML 等。</p><h3 id="_8-todo-highlight-todo-高亮" tabindex="-1"><strong>8. TODO Highlight：TODO 高亮</strong> <a class="header-anchor" href="#_8-todo-highlight-todo-高亮" aria-label="Permalink to &quot;**8. TODO Highlight：TODO 高亮**&quot;">​</a></h3><p>TODO Highlight 可以高亮显示代码中的 TODO 和 FIXME 等标记,方便开发者追踪待办事项。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// TODO: 完善错误处理逻辑</span></span>
<span class="line"><span>fn some_function() {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="与-rust-开发关系较远的插件" tabindex="-1"><strong>与 Rust 开发关系较远的插件</strong> <a class="header-anchor" href="#与-rust-开发关系较远的插件" aria-label="Permalink to &quot;**与 Rust 开发关系较远的插件**&quot;">​</a></h2><h3 id="_9-better-comments-优化注释显示" tabindex="-1"><strong>9. Better Comments：优化注释显示</strong> <a class="header-anchor" href="#_9-better-comments-优化注释显示" aria-label="Permalink to &quot;**9. Better Comments：优化注释显示**&quot;">​</a></h3><p>Better Comments 可以为不同类型的注释添加不同的颜色和样式,提高注释的可读性。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// ! 这是一个重要的注释</span></span>
<span class="line"><span>// ? 这是一个问题</span></span>
<span class="line"><span>// TODO: 这是一个待办事项</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_10-bookmarks-代码书签" tabindex="-1"><strong>10. Bookmarks：代码书签</strong> <a class="header-anchor" href="#_10-bookmarks-代码书签" aria-label="Permalink to &quot;**10. Bookmarks：代码书签**&quot;">​</a></h3><p>Bookmarks 插件允许你在代码中添加书签,方便快速定位重要的代码片段。当项目变得庞大时,使用书签可以显著提高导航效率。</p><h1 id="cargo-make-强大的构建工具" tabindex="-1">cargo-make：强大的构建工具 <a class="header-anchor" href="#cargo-make-强大的构建工具" aria-label="Permalink to &quot;cargo-make：强大的构建工具&quot;">​</a></h1><ul><li>cargo-make Github Repo: <a href="https://github.com/sagiegurari/cargo-make" target="_blank" rel="noreferrer">https://github.com/sagiegurari/cargo-make</a></li><li>cargo-make 文档: <a href="https://sagiegurari.github.io/cargo-make/" target="_blank" rel="noreferrer">https://sagiegurari.github.io/cargo-make/</a></li></ul><p>推荐一个非常强大的 Rust 构建和任务运行工具——cargo-make。</p><h2 id="引言" tabindex="-1"><strong>引言</strong> <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;**引言**&quot;">​</a></h2><p>相信不少 Rust 开发者都使用过 Makefile 来管理项目的构建流程。Makefile 确实很强大，但在跨平台支持、可读性和可维护性上还是有一些不足之处。有没有一个更加现代化、Rust 原生、功能更强大的替代品呢？</p><h2 id="创作背景" tabindex="-1"><strong>创作背景</strong> <a class="header-anchor" href="#创作背景" aria-label="Permalink to &quot;**创作背景**&quot;">​</a></h2><p>最近在做 Rust 项目时发现了 cargo-make 这个超级好用的工具，它完全是用 Rust 编写的，可以非常方便地在 Rust 项目中定义各种任务，诸如：</p><ul><li>格式化代码</li><li>构建项目</li><li>运行测试</li><li>生成文档</li><li>执行自定义脚本</li><li>...</li></ul><h2 id="主要特性" tabindex="-1"><strong>主要特性</strong> <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;**主要特性**&quot;">​</a></h2><p>cargo-make 主要有以下特性：</p><ul><li>使用简单的 TOML 配置文件定义 task</li><li>支持 task 之间的依赖关系</li><li>内置大量常用 task，开箱即用</li><li>支持自定义 task，可以使用 shell 脚本、Python、Rust 等实现</li><li>支持在 task 中设置环境变量</li><li>友好的命令行提示，带语法高亮</li><li>支持 workspace 和多 package 项目</li><li>跨平台，可在 Linux、macOS、Windows 上使用</li></ul><h2 id="快速上手" tabindex="-1"><strong>快速上手</strong> <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;**快速上手**&quot;">​</a></h2><p>安装 cargo-make：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --force</span><span style="color:#98C379;"> cargo-make</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在项目根目录创建 Makefile.toml 文件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[env]</span></span>
<span class="line"><span style="color:#61AFEF;">CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[tasks.format]</span></span>
<span class="line"><span style="color:#61AFEF;">install_crate</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;rustfmt&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;cargo&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">args</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;fmt&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;--&quot;,</span><span style="color:#98C379;"> &quot;--emit=files&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[tasks.build]</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;cargo&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">args</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;build&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#61AFEF;">dependencies</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;format&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;"># 构建前先进行代码格式化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[tasks.test]</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;cargo&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">args</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#61AFEF;">dependencies</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;build&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;"># 测试前先进行构建</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>运行 task：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> make</span><span style="color:#98C379;"> test</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 相当于依次执行 format、build、test 三个 task</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>输出：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[cargo-make] INFO - cargo make 0.35.7</span></span>
<span class="line"><span style="color:#ABB2BF;">[cargo-make] INFO - Running Task: format</span></span>
<span class="line"><span style="color:#ABB2BF;">[cargo-make] INFO - Running Task: build</span></span>
<span class="line"><span style="color:#61AFEF;">   Compiling</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> v0.1.0</span><span style="color:#ABB2BF;"> (/path/to/hello)</span></span>
<span class="line"><span style="color:#61AFEF;">    Finished</span><span style="color:#98C379;"> dev</span><span style="color:#ABB2BF;"> [unoptimized </span><span style="color:#98C379;">+</span><span style="color:#98C379;"> debuginfo]</span><span style="color:#98C379;"> target</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">in</span><span style="color:#98C379;"> 1.24s</span></span>
<span class="line"><span style="color:#ABB2BF;">[cargo-make] INFO - Running Task: test</span></span>
<span class="line"><span style="color:#61AFEF;">   Compiling</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> v0.1.0</span><span style="color:#ABB2BF;"> (/path/to/hello)</span></span>
<span class="line"><span style="color:#61AFEF;">    Finished</span><span style="color:#98C379;"> test</span><span style="color:#ABB2BF;"> [unoptimized </span><span style="color:#98C379;">+</span><span style="color:#98C379;"> debuginfo]</span><span style="color:#98C379;"> target</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">in</span><span style="color:#98C379;"> 1.31s</span></span>
<span class="line"><span style="color:#61AFEF;">     Running</span><span style="color:#98C379;"> unittests</span><span style="color:#98C379;"> src/lib.rs</span><span style="color:#ABB2BF;"> (target/debug/deps/hello-1082c0f1850e2ea3)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">running</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> test</span></span>
<span class="line"><span style="color:#56B6C2;">test</span><span style="color:#98C379;"> tests::it_works</span><span style="color:#98C379;"> ...</span><span style="color:#98C379;"> ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">test</span><span style="color:#98C379;"> result:</span><span style="color:#98C379;"> ok.</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> passed</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">0</span><span style="color:#98C379;"> failed</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">0</span><span style="color:#98C379;"> ignored</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">0</span><span style="color:#98C379;"> measured</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">0</span><span style="color:#98C379;"> filtered</span><span style="color:#98C379;"> out</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">finished</span><span style="color:#98C379;"> in</span><span style="color:#98C379;"> 0.00s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>通过在 dependencies 字段指定依赖的 task，cargo-make 就能自动确保先执行依赖项，非常方便。</p><h2 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p>cargo-make 是一个功能丰富、使用简单的 Rust 项目构建工具，非常适合各种规模的 Rust 项目使用。有了 cargo-make，我们可以把项目的各种构建、测试任务统一由它来管理，让项目更加规范和易于维护。感兴趣的同学赶快试试吧！</p><h1 id="cargo-generate-rust-项目生成利器" tabindex="-1">cargo-generate：Rust 项目生成利器 <a class="header-anchor" href="#cargo-generate-rust-项目生成利器" aria-label="Permalink to &quot;cargo-generate：Rust 项目生成利器&quot;">​</a></h1><h2 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h2><ul><li>cargo-generate 官方文档：<a href="https://cargo-generate.github.io/cargo-generate/" target="_blank" rel="noreferrer">https://cargo-generate.github.io/cargo-generate/</a></li><li>cargo-generate GitHub 仓库：<a href="https://github.com/cargo-generate/cargo-generate" target="_blank" rel="noreferrer">https://github.com/cargo-generate/cargo-generate</a></li></ul><h2 id="引言-1" tabindex="-1">引言 <a class="header-anchor" href="#引言-1" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>作为一名 Rust 开发者，你是否曾为如何快速创建一个新项目而苦恼？是否希望能够基于已有的模板来生成项目，从而节省时间和精力？本文将为你介绍一个强大的工具：cargo-generate，它能够帮助你快速生成 Rust 项目，提高开发效率。</p><h2 id="创作背景-1" tabindex="-1">创作背景 <a class="header-anchor" href="#创作背景-1" aria-label="Permalink to &quot;创作背景&quot;">​</a></h2><p>在日常的 Rust 开发中，我们经常需要创建新的项目。虽然可以手动创建项目目录和文件，但这个过程较为繁琐，尤其是当项目结构较为复杂时。因此，我们希望能够有一种工具，能够根据预定义的模板快速生成项目，并且支持自定义和扩展。这就是 cargo-generate 的由来。</p><h2 id="主要特性-1" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性-1" aria-label="Permalink to &quot;主要特性&quot;">​</a></h2><p>cargo-generate 是一个基于 Rust 编写的项目生成工具，它具有以下主要特性：</p><ol><li>支持基于 Git 仓库作为模板生成项目</li><li>使用 Liquid 模板引擎，支持条件判断、循环等功能</li><li>支持正则表达式替换占位符</li><li>支持自定义 Hook 脚本，可以在生成项目的不同阶段执行自定义操作</li><li>内置多个常用占位符，如项目名称、作者信息等</li><li>支持排除某些文件或目录，不进行模板渲染</li><li>支持条件判断，根据条件生成不同的文件或内容</li></ol><h2 id="快速上手-1" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手-1" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><p>下面我们通过一个简单的示例来演示如何使用 cargo-generate 生成项目。</p><p>首先，确保你已经安装了 Rust 和 Cargo。然后，使用以下命令安装 cargo-generate：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cargo-generate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，我们以官方提供的示例模板为例，生成一个新项目：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> generate</span><span style="color:#D19A66;"> --git</span><span style="color:#98C379;"> https://github.com/ashleygwilliams/wasm-pack-template</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行上述命令后，cargo-generate 会提示你输入项目名称和其他相关信息。输入完成后，它会基于模板生成一个新的项目目录。</p><p>让我们来看看生成的项目结构：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> my-project</span></span>
<span class="line"><span style="color:#61AFEF;">tree</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#56B6C2;">.</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> Cargo.toml</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> LICENSE</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> README.md</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> src</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> lib.rs</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   └──</span><span style="color:#98C379;"> utils.rs</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> tests</span></span>
<span class="line"><span style="color:#61AFEF;">    └──</span><span style="color:#98C379;"> web.rs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到，生成的项目包含了 Cargo.toml 配置文件、LICENSE 许可证文件、README.md 说明文档以及 src 和 tests 目录。</p><p>接下来，我们可以尝试构建和测试这个项目：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> build</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果一切正常，项目应该可以成功编译和通过测试。</p><h2 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>cargo-generate 是一个非常实用的工具，它可以帮助 Rust 开发者快速生成项目，提高开发效率。通过使用预定义的模板和自定义的占位符、Hook 脚本等功能，我们可以轻松地创建符合特定需求的项目结构。如果你经常需要创建新的 Rust 项目，不妨试试 cargo-generate，相信它会给你的开发工作带来很大的便利。</p>`,190),t=[p];function r(c,i,d,u,b,y){return n(),a("div",null,t)}const m=s(o,[["render",r]]);export{g as __pageData,m as default};
