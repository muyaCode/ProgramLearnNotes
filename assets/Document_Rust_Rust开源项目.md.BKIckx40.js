import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const l="/ProgramLearnNotes/assets/image-20240605133419531.Dl1Q8-eG.png",p="/ProgramLearnNotes/assets/image-20240605140807392.CSBKpki0.png",r="/ProgramLearnNotes/assets/a5bc29117b.CrIRAxrT.webp",o="/ProgramLearnNotes/assets/d0e4d17f.B3DPQfW-.webp",t="/ProgramLearnNotes/assets/mark3024000q75.GaGoczV-.webp",i="/ProgramLearnNotes/assets/a5faf98.DV-DUS3z.webp",c="/ProgramLearnNotes/assets/790d03895e.hJ566ztK.webp",u="/ProgramLearnNotes/assets/f4baeaa15.CqmeKMwM.webp",b="/ProgramLearnNotes/assets/Warp%E4%B8%8B%E8%BD%BD.CL4Vl7zk.webp",d="/ProgramLearnNotes/assets/image-20240512214105764.CWD9c5F_.png",h="/ProgramLearnNotes/assets/image-20240512214132385.CvOSEBu8.png",m="/ProgramLearnNotes/assets/image-20240508184809451.BV0pxNlu.png",y="/ProgramLearnNotes/assets/image-20240508184833233.DLHKb4Yf.png",g="/ProgramLearnNotes/assets/640-789456.DX8WatjQ.webp",_=JSON.parse('{"title":"Rust 开源项目","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/Rust开源项目.md","filePath":"Document/Rust/Rust开源项目.md","lastUpdated":1717757371000}'),C={name:"Document/Rust/Rust开源项目.md"},F=e(`<h1 id="rust-开源项目" tabindex="-1">Rust 开源项目 <a class="header-anchor" href="#rust-开源项目" aria-label="Permalink to &quot;Rust 开源项目&quot;">​</a></h1><h2 id="awesome-alternatives-in-rust-用-rust-编写的现有软件的精选替代品列表" tabindex="-1">awesome-alternatives-in-rust：用 Rust 编写的现有软件的精选替代品列表 <a class="header-anchor" href="#awesome-alternatives-in-rust-用-rust-编写的现有软件的精选替代品列表" aria-label="Permalink to &quot;awesome-alternatives-in-rust：用 Rust 编写的现有软件的精选替代品列表&quot;">​</a></h2><p>GitHub：<a href="https://github.com/TaKO8Ki/awesome-alternatives-in-rust" target="_blank" rel="noreferrer">TaKO8Ki/awesome-alternatives-in-rust：用 Rust 编写的现有软件的精选替代品列表 (github.com)</a></p><h3 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h3><p>awesome-alternatives-in-rust 收录了大量 Rust 编写的替代方案，涵盖了命令行工具、系统工具、Web 框架、游戏引擎等多个领域。它的主要特性包括：</p><ul><li>全面：涵盖了各个领域的 Rust 项目，满足不同开发者的需求</li><li>优质：每个项目都经过精心挑选，代码质量高，文档齐全</li><li>分类清晰：按照应用类型进行分类，方便查找</li><li>持续更新：定期更新新的优质 Rust 项目，与时俱进</li></ul><h3 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h3><p>下面我们通过一个简单的例子，来体验一下 awesome-alternatives-in-rust 中的项目。我们选择 <code>ripgrep</code>，它是一个用 Rust 编写的、更快的 <code>grep</code> 替代品。</p><p>首先安装 <code>ripgrep</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> ripgrep</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后在命令行中使用 <code>rg</code> 命令进行文本搜索：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"># 在当前目录递归搜索包含 </span><span style="color:#98C379;">&quot;fn main&quot;</span><span style="color:#ABB2BF;"> 的文件</span></span>
<span class="line"><span style="color:#E06C75;">rg</span><span style="color:#98C379;"> &quot;fn main&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;"># 搜索结果：</span></span>
<span class="line"><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">:    </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello, world!&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以看到，<code>ripgrep</code> 以较快的速度搜索到了包含指定文本的文件及其内容，展示了其优秀的性能。类似的，awesome-alternatives-in-rust 中的其他项目也各有特色，非常值得尝试和学习。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Rust 凭借其独特的优势，正在被越来越多的开发者所接受。awesome-alternatives-in-rust 这个项目，为 Rust 开发者提供了一站式的开源项目资源，帮助大家快速找到高质量的 Rust 库和工具。相信通过学习这些优秀项目的源码，能让你的 Rust 编程技巧更上一层楼。</p><h2 id="相关排行和和仓库" tabindex="-1">相关排行和和仓库 <a class="header-anchor" href="#相关排行和和仓库" aria-label="Permalink to &quot;相关排行和和仓库&quot;">​</a></h2><p>rust 项目排行榜：<a href="https://github.com/trending/rust?since=daily" target="_blank" rel="noreferrer">今天 GitHub 上的热门 Rust 存储库</a></p><p>rust 项目仓库收集：<a href="https://github.com/rust-unofficial/awesome-rust" target="_blank" rel="noreferrer">rust-unofficial/awesome-rust：Rust 代码和资源的精选列表。 (github.com)</a></p><h2 id="以下是一些值得关注的-rust-项目-它们涵盖了不同的应用领域" tabindex="-1">以下是一些值得关注的 Rust 项目，它们涵盖了不同的应用领域： <a class="header-anchor" href="#以下是一些值得关注的-rust-项目-它们涵盖了不同的应用领域" aria-label="Permalink to &quot;以下是一些值得关注的 Rust 项目，它们涵盖了不同的应用领域：&quot;">​</a></h2><p><strong>Deno</strong>：一个现代化、安全的 JavaScript/TypeScript 运行时，旨在成为 Node.js 的替代品。</p><ul><li>开源地址：<a href="https://www.denojs.cn/" target="_blank" rel="noreferrer">GitHub - denoland/deno</a></li><li>官网：<a href="https://deno.com/" target="_blank" rel="noreferrer">deno.land</a></li></ul><p><strong>Alacritty</strong>：一个跨平台、基于 OpenGL 的高性能终端。</p><ul><li>开源地址：<a href="https://alacritty.org/" target="_blank" rel="noreferrer">GitHub - alacritty/alacritty</a></li><li>官网：<a href="https://www.igeekbb.com/2023/04/26/Alacritty/" target="_blank" rel="noreferrer">alacritty.org</a></li></ul><p><strong>Starship</strong>：一个快速、高度可配置的命令行提示工具。</p><ul><li>开源地址：<a href="https://github.com/starship/starship" target="_blank" rel="noreferrer">星际飞船/星际飞船：☄🌌️ 适用于任何炮弹的最小、超快且可无限定制的提示！ (github.com)</a>。</li><li>官网：<a href="https://starship.rs/zh-cn/" target="_blank" rel="noreferrer">https://starship.rs/zh-cn/</a></li><li>使用文章：<a href="https://mp.weixin.qq.com/s/RRZVNZCQuSlaeAfKkZkphA" target="_blank" rel="noreferrer">太强了，Rust 开发的终端提示符 Starship 工具，轻量、易用，速度极快且可无限定制的提示！ (qq.com)</a></li><li><a href="https://mp.weixin.qq.com/s/Wd5_Q6PpzO1wCDF1gs9cgg" target="_blank" rel="noreferrer">探索 Rust 生态：使用 Starship 打造炫酷命令行体验 (qq.com)</a></li></ul><p><strong>MeiliSearch</strong>：一个轻量级的即时搜索平台，适用于终端用户。</p><ul><li>开源地址：<a href="https://github.com/meilisearch/meilisearch" target="_blank" rel="noreferrer">GitHub - meilisearch/meilisearch</a></li><li>官网：<a href="https://www.meilisearch.com/" target="_blank" rel="noreferrer">meilisearch.com</a></li></ul><p><strong>SWC</strong>：一个高性能的 TypeScript/Javascript 编译器，被多个知名项目使用。</p><ul><li><p>开源地址：<a href="https://swc.rs/" target="_blank" rel="noreferrer">GitHub - swc-project/swc</a></p></li><li><p>官网：<a href="https://www.swc.net.cn/docs/getting-started" target="_blank" rel="noreferrer">swc.rs</a></p></li><li><p>rolldown：</p><ul><li>开源地址：<a href="https://github.com/rolldown/rolldown" target="_blank" rel="noreferrer">https://github.com/rolldown/rolldown</a></li></ul></li></ul><p><strong>Tauri</strong>：</p><p>Tauri 是一个框架，用于为所有主要桌面平台构建小巧、快速的二进制文件。开发人员可以集成任何编译成 HTML、JS 和 CSS 的前端框架来构建他们的用户界面。应用程序的后端是一个 Rust 的二进制文件，带有可以与前端交互的 API。</p><p>用于构建小型、快速、安全的桌面应用，旨在替代 Electron.js。</p><ul><li>开源地址：<a href="https://tauri.app/" target="_blank" rel="noreferrer">GitHub - tauri-apps/tauri</a></li><li>官网：<a href="https://tauri.app/zh-cn/v1/guides/getting-started/setup/" target="_blank" rel="noreferrer">tauri.app</a></li></ul><p><strong>Yew</strong>：一个用于构建 Web 应用的 Rust/Wasm 框架。</p><ul><li>开源地址：<a href="https://github.com/yewstack/yew" target="_blank" rel="noreferrer">GitHub - yewstack/yew</a></li><li>官网：<a href="https://yew.rs/" target="_blank" rel="noreferrer">yew.rs</a></li></ul><p><strong>Firecracker</strong>：由 Amazon 开发的安全、高性能的无服务计算虚拟机。</p><ul><li>开源地址：<a href="https://firecracker-microvm.github.io/" target="_blank" rel="noreferrer">GitHub - firecracker-microvm/firecracker</a></li><li>官网：<a href="https://www.zhihu.com/question/303920344" target="_blank" rel="noreferrer">firecracker-microvm.github.io</a></li></ul><h2 id="nushell-一个现代化的-shell-支持使用-sql-语法选择内容" tabindex="-1">Nushell：一个现代化的 shell，支持使用 SQL 语法选择内容 <a class="header-anchor" href="#nushell-一个现代化的-shell-支持使用-sql-语法选择内容" aria-label="Permalink to &quot;Nushell：一个现代化的 shell，支持使用 SQL 语法选择内容&quot;">​</a></h2><ul><li>开源地址：<a href="https://github.com/nushell/nushell" target="_blank" rel="noreferrer">GitHub - nushell/nushell</a></li></ul><p><a href="https://mp.weixin.qq.com/s/p6r6gdhKTJcBMlj4I2zn8w" target="_blank" rel="noreferrer">一个使用Rust开发的跨平台shell：Nushell (qq.com)</a></p><h2 id="tokio-一个异步-io-的运行时-提供了-i-o、网络、调度、定时器等异步编程所必须的功能和工具" tabindex="-1">Tokio：一个异步 IO 的运行时，提供了 I/O、网络、调度、定时器等异步编程所必须的功能和工具 <a class="header-anchor" href="#tokio-一个异步-io-的运行时-提供了-i-o、网络、调度、定时器等异步编程所必须的功能和工具" aria-label="Permalink to &quot;Tokio：一个异步 IO 的运行时，提供了 I/O、网络、调度、定时器等异步编程所必须的功能和工具&quot;">​</a></h2><ul><li>开源地址：<a href="https://tokio.rs/" target="_blank" rel="noreferrer">GitHub - tokio-rs/tokio</a></li><li>官网：<a href="https://gitee.com/rustup/tokio" target="_blank" rel="noreferrer">tokio.rs</a></li></ul><p>这些项目展示了 Rust 在不同领域的应用，从 Web 开发到系统编程，再到桌面和终端应用。你可以根据自己的兴趣和需求，选择一个项目进行深入学习和实践。</p><h2 id="效率提升工具-espanso——在日常输入中使用代码提示" tabindex="-1">效率提升工具 espanso——在日常输入中使用代码提示 <a class="header-anchor" href="#效率提升工具-espanso——在日常输入中使用代码提示" aria-label="Permalink to &quot;效率提升工具 espanso——在日常输入中使用代码提示&quot;">​</a></h2><p><a href="https://blog.csdn.net/weixin_47754149/article/details/127131691" target="_blank" rel="noreferrer">【一起学 Rust | 开源项目】效率提升工具 espanso——在日常输入中使用代码提示-CSDN 博客</a></p><h1 id="待定" tabindex="-1">待定 <a class="header-anchor" href="#待定" aria-label="Permalink to &quot;待定&quot;">​</a></h1><p><a href="https://github.com/YiNNx/cmd-wrapped" target="_blank" rel="noreferrer">YiNNx/cmd-wrapped：在命令行中找出过去的一年是什么样子的！ (github.com)</a></p><h2 id="星绽-系统内核" tabindex="-1">星绽：系统内核 <a class="header-anchor" href="#星绽-系统内核" aria-label="Permalink to &quot;星绽：系统内核&quot;">​</a></h2><p>github链接：<a href="https://github.com/asterinas/asterinas" target="_blank" rel="noreferrer">https://github.com/asterinas/asterinas</a></p><p>星绽（英文名：Asterinas）是一个安全、快速、通用的操作系统内核。 它提供于Linux相同的ABI，可无缝运行Linux应用， 但比Linux更加内存安全和对开发者友好。</p><p>星绽在内存安全性方面远胜Linux。 它使用Rust作为唯一的编程语言， 并将unsafe Rust的使用限制在一个明确定义且最小的可信计算基础（TCB）上。 这种新颖的方法， 被称为框内核架构， 使星绽成为一个更安全、更可靠的内核选择。</p><p>星绽在开发者友好性方面优于Linux：</p><p>（1）使用生产力更高的Rust编程语言</p><p>（2）利用一个专为内核开发者设计的工具包（称为OSDK）来简化他们的工作流程 （3）享受MPL所带来的灵活性， 可自由选择开源或闭源为星绽开发内核模块或驱动。</p><p>当前，星绽仅支持x86-64虚拟机。</p><h2 id="rathole-内网穿透-反向代理工具" tabindex="-1">Rathole：内网穿透|反向代理工具 <a class="header-anchor" href="#rathole-内网穿透-反向代理工具" aria-label="Permalink to &quot;Rathole：内网穿透|反向代理工具&quot;">​</a></h2><p>github链接：<a href="https://github.com/rapiz1/rathole" target="_blank" rel="noreferrer">https://github.com/rapiz1/rathole</a></p><p>Rathole是一个安全、稳定、高性能的内网穿透工具，用 Rust 语言编写。类似于 frp 和 ngrok。可以让 NAT 后的设备上的服务通过具有公网 IP 的服务器暴露在公网上。</p><p>Rathole特性：</p><ul><li>高性能：具有更高的吞吐量，高并发下更稳定。</li><li>低资源消耗：内存占用远低于同类工具。二进制文件最小可以到 ~500KiB，可以部署在嵌入式设备，如路由器上。</li><li>安全性：每个服务单独强制鉴权。Server 和 Client 负责各自的配置。使用 Noise Protocol 可以简单地配置传输加密，而不需要自签证书。同时也支持 TLS。</li><li>热重载：支持配置文件热重载，动态修改端口转发服务。HTTP API 正在开发中。</li></ul><h2 id="rolldown-javascript捆绑器" tabindex="-1">Rolldown：JavaScript捆绑器 <a class="header-anchor" href="#rolldown-javascript捆绑器" aria-label="Permalink to &quot;Rolldown：JavaScript捆绑器&quot;">​</a></h2><p>github链接：<a href="https://github.com/rolldown/rolldown" target="_blank" rel="noreferrer">https://github.com/rolldown/rolldown</a></p><p>Rolldown是一个用Rust编写的JavaScript捆绑器，旨在作为未来在Vite中使用的捆绑器。它提供了rollup兼容的api和插件接口，但在作用域上更类似于esbuild。</p><p>Rolldown的目标是尽可能地与Rollup的API和插件接口保持一致，以简化采用。在简单的用例中，它很可能可以作为临时替代品。但是，在边缘情况下也可能存在细微的差异，特别是涉及高级选项时。</p><p>Rolldown的作用域比Rollup更大，更类似于esbuild。它有内置的CommonJS支持，node_modules解析，将来还会支持TypeScript / JSX转换和缩小。</p><h2 id="netscanner-网络扫描工具" tabindex="-1">netscanner：网络扫描工具 <a class="header-anchor" href="#netscanner-网络扫描工具" aria-label="Permalink to &quot;netscanner：网络扫描工具&quot;">​</a></h2><p>github地址：<a href="https://github.com/Chleba/netscanner" target="_blank" rel="noreferrer">https://github.com/Chleba/netscanner</a></p><p>netscanner是一个网络扫描工具，具有以下功能：</p><ul><li>接口列表</li><li>无线扫描</li><li>WiFi信号强度</li><li>Ping CIDR与主机名，oui和mac地址</li><li>获取数据包(TCP, UDP, ICMP, ARP)</li></ul><p>必须以sudo权限运行。</p><h1 id="rust-编写的开源工具" tabindex="-1">Rust 编写的开源工具 <a class="header-anchor" href="#rust-编写的开源工具" aria-label="Permalink to &quot;Rust 编写的开源工具&quot;">​</a></h1><h2 id="musicgpt-使用本地运行的-llm-根据自然语言提示生成音乐" tabindex="-1">MusicGPT：使用本地运行的 LLM 根据自然语言提示生成音乐 <a class="header-anchor" href="#musicgpt-使用本地运行的-llm-根据自然语言提示生成音乐" aria-label="Permalink to &quot;MusicGPT：使用本地运行的 LLM 根据自然语言提示生成音乐&quot;">​</a></h2><p>GitHub：<a href="https://github.com/gabotechs/MusicGPT" target="_blank" rel="noreferrer">gabotechs/MusicGPT：使用本地运行的 LLM 根据自然语言提示生成音乐 (github.com)</a></p><h2 id="journal-基于-rust-构建的自动化生成变更日志的利器-书写与自动化生成-git-提交消息和变更日志的框架" tabindex="-1">Journal：基于 RUST 构建的自动化生成变更日志的利器(书写与自动化生成 Git 提交消息和变更日志的框架) <a class="header-anchor" href="#journal-基于-rust-构建的自动化生成变更日志的利器-书写与自动化生成-git-提交消息和变更日志的框架" aria-label="Permalink to &quot;Journal：基于 RUST 构建的自动化生成变更日志的利器(书写与自动化生成 Git 提交消息和变更日志的框架)&quot;">​</a></h2><p>在软件开发过程中，维护一个清晰、准确的变更日志对于项目维护者和用户来说都至关重要。然而，手动维护变更日志往往耗时且容易出错。为了解决这一问题，<code>git-journal</code> 作为一个自动化的 Git 提交消息和变更日志生成框架，应运而生。</p><h3 id="什么是-git-journal" tabindex="-1">什么是 Git-Journal？ <a class="header-anchor" href="#什么是-git-journal" aria-label="Permalink to &quot;什么是 Git-Journal？&quot;">​</a></h3><p><code>git-journal</code> 是一个基于 Git 提交历史的自动化变更日志生成工具。它通过分析 Git 提交消息，自动生成格式统一、内容详尽的变更日志。这一过程无需额外的工作，大大减轻了维护者的工作负担，同时提高了变更日志的准确性和可读性。</p><h3 id="为什么选择-git-journal" tabindex="-1">为什么选择 Git-Journal？ <a class="header-anchor" href="#为什么选择-git-journal" aria-label="Permalink to &quot;为什么选择 Git-Journal？&quot;">​</a></h3><h4 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h4><p><code>git-journal</code> 最大的优势在于其自动化特性。它能够自动解析 Git 提交消息，并按照预设的模板生成变更日志。这意味着，只要遵循一定的提交消息规范，维护者无需手动编写变更日志。</p><h4 id="标准化" tabindex="-1">标准化 <a class="header-anchor" href="#标准化" aria-label="Permalink to &quot;标准化&quot;">​</a></h4><p><code>git-journal</code> 鼓励使用标准化的提交消息格式。这不仅有助于生成结构化的变更日志，还能使 Git 历史更加清晰，为项目贡献者提供更多关于实际变更的信息。</p><h4 id="可定制性" tabindex="-1">可定制性 <a class="header-anchor" href="#可定制性" aria-label="Permalink to &quot;可定制性&quot;">​</a></h4><p>通过配置文件，用户可以自定义提交消息的类别、模板输出、排除模式等。这种高度的可定制性使得 <code>git-journal</code> 能够适应不同的项目需求。</p><h3 id="如何使用-git-journal" tabindex="-1">如何使用 Git-Journal？ <a class="header-anchor" href="#如何使用-git-journal" aria-label="Permalink to &quot;如何使用 Git-Journal？&quot;">​</a></h3><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><p>要将 <em>git-journal</em> 作为 git 扩展使用，需要安装 <strong>Rust</strong>[1]，包括包管理器 <strong>cargo</strong>[2]。不同的包管理器也会提供这些，例如通过 <strong>Pacman</strong>[3] 在 Arch Linux 上：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo pacman -S rust cargo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了更简单的安装过程，也可以使用 <strong>rustup</strong>[4]。一旦这两个依赖安装完成，可以通过以下命令安装 <em>git-journal</em>：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>cargo install git-journal</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调整您的 <code>$PATH</code> 变量，以便在 <code>~/.cargo/bin</code> 中搜索，之后应该可以通过调用 <code>git journal</code> 来运行它。</p><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><p>二进制文件 <code>git-journal</code> 依赖于 Rust 库 <code>gitjournal</code>，它也可以独立于二进制应用程序使用，以编写定制解决方案。<strong>该仓库</strong>[5] 将用作以下说明的示例。</p><h4 id="默认输出" tabindex="-1">默认输出 <a class="header-anchor" href="#默认输出" aria-label="Permalink to &quot;默认输出&quot;">​</a></h4><p>如果在该仓库的任何位置运行 <code>git journal</code>，输出将是基于仓库 git 日志的美观的 <strong>Markdown</strong>[6] 格式变更日志：</p><h4 id="模板输出" tabindex="-1">模板输出 <a class="header-anchor" href="#模板输出" aria-label="Permalink to &quot;模板输出&quot;">​</a></h4><p>用户可以通过定义模板来定制变更日志的输出格式。<code>git-journal</code> 支持 TOML 格式的模板文件，允许用户定义不同的日志部分和子部分。</p><h4 id="提交消息准备与验证" tabindex="-1">提交消息准备与验证 <a class="header-anchor" href="#提交消息准备与验证" aria-label="Permalink to &quot;提交消息准备与验证&quot;">​</a></h4><p><code>git-journal</code> 还提供了提交消息的自动准备和验证功能。通过在本地仓库中执行 <code>git journal setup</code>，可以安装 Git 钩子，自动完成提交消息的准备和验证。</p><h3 id="功能亮点" tabindex="-1">功能亮点 <a class="header-anchor" href="#功能亮点" aria-label="Permalink to &quot;功能亮点&quot;">​</a></h3><ul><li><strong>自动补全</strong>：为 bash、fish 和 zsh 等 shell 生成自动补全脚本。</li><li><strong>自定义类别支持</strong>：在提交准备、验证和输出中支持自定义类别。</li><li><strong>多线程解析</strong>：自动支持多线程，提高解析效率。</li><li><strong>模板支持</strong>：包括标签和名称映射，支持自定义头部和尾部字段。</li><li><strong>排序方法</strong>：支持按日期或名称排序输出。</li><li><strong>提交哈希链接</strong>：在标准和模板输出中支持提交哈希链接。</li></ul><h3 id="深入阅读" tabindex="-1">深入阅读 <a class="header-anchor" href="#深入阅读" aria-label="Permalink to &quot;深入阅读&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal</span></span>
<span class="line"><span>[git-journal] [INFO] 跳过提交：摘要解析：&#39;合并分支 &#39;test_branch&#39;&#39;</span></span>
<span class="line"><span>[git-journal] [OKAY] 解析完成。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 未发布 (2016-09-18)：</span></span>
<span class="line"><span>- [新增] file4 再次</span></span>
<span class="line"><span>    这段段落详细解释了变更</span></span>
<span class="line"><span>    - [修复] 多个问题</span></span>
<span class="line"><span>    - [移除] 不需要的内容</span></span>
<span class="line"><span>- [移除] file4.txt</span></span>
<span class="line"><span>- [新增] file4.txt</span></span>
<span class="line"><span>- [新增] file1.txt 再次</span></span>
<span class="line"><span>- [移除] file1.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修复：</span></span>
<span class="line"><span>#1, #2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v2 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file3.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>所有提交都按时间排序，这意味着最新的元素出现在顶部。提交消息的解析将根据 <strong>RFC0001</strong>[7] 进行，该标准描述了提交消息中的不同语法元素。类别 (<code>[新增]</code>, <code>[修复]</code>, ...) 如果可用，会自动用方括号括起来。也可以在配置文件中定义自己的类别。日志自动列出从上次发布到未发布条目的日志。</p><p>提交消息的页脚（在 RFC0001 中描述）会自动累积并按其值的顺序在变更日志列表之后打印。也可以跳过未发布的条目：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal -u</span></span>
<span class="line"><span>[git-journal] [OKAY] 解析完成。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v2 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file3.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>也可以使用特定提交范围的格式 <code>REV..REV</code> 或与 <code>HEAD</code> 不同的起始点进行解析：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal v1</span></span>
<span class="line"><span>&gt; git journal v2</span></span>
<span class="line"><span>&gt; git journal v1...HEAD^</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还可以使用 <code>-a</code> 打印所有发布（git 标签），或通过 <code>-n &lt;计数&gt;</code> 打印过去 <code>n</code> 个发布：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal -a</span></span>
<span class="line"><span>[git-journal] [INFO] 跳过提交：摘要解析：&#39;合并分支 &#39;test_branch&#39;&#39;</span></span>
<span class="line"><span>[git-journal] [OKAY] 解析完成。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 未发布 (2016-09-18)：</span></span>
<span class="line"><span>- [新增] file4 再次</span></span>
<span class="line"><span>    这段段落详细解释了变更</span></span>
<span class="line"><span>    - [修复] 多个问题</span></span>
<span class="line"><span>    - [移除] 不需要的内容</span></span>
<span class="line"><span>- [移除] file4.txt</span></span>
<span class="line"><span>- [新增] file4.txt</span></span>
<span class="line"><span>- [新增] file1.txt 再次</span></span>
<span class="line"><span>- [移除] file1.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v2 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file3.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v1 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file2.txt</span></span>
<span class="line"><span>- [新增] file1.txt</span></span>
<span class="line"><span>&gt; git journal -un1</span></span>
<span class="line"><span>[git-journal] [OKAY] 解析完成。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v2 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file3.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>除了通常的详细日志，还有一个简短版本 (<code>-s</code>) 存在，它只使用提交摘要：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal -as</span></span>
<span class="line"><span>[git-journal] [INFO] 跳过提交：摘要解析：&#39;合并分支 &#39;test_branch&#39;&#39;</span></span>
<span class="line"><span>[git-journal] [OKAY] 解析完成。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 未发布 (2016-09-18)：</span></span>
<span class="line"><span>- [新增] file4 再次</span></span>
<span class="line"><span>- [移除] file4.txt</span></span>
<span class="line"><span>- [新增] file4.txt</span></span>
<span class="line"><span>- [新增] file1.txt 再次</span></span>
<span class="line"><span>- [移除] file1.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v2 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file3.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v1 (2016-09-12)：</span></span>
<span class="line"><span>- [新增] file2.txt</span></span>
<span class="line"><span>- [新增] file1.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>还可以将日志的输出附加到文件 (<code>-o</code>)，这将以换行符 (<code>---</code>) 分隔，每次调用 git 日志时都会添加。具有特定模式的 git 标签，如 <code>rc</code> 标签，将自动被排除，这可以通过 <code>-e</code> 自定义。</p><p>有关更多信息，请参考帮助 <code>git journal -h</code>。</p><h4 id="模板输出-1" tabindex="-1">模板输出 <a class="header-anchor" href="#模板输出-1" aria-label="Permalink to &quot;模板输出&quot;">​</a></h4><p>提交消息模板的设计在 <strong>RFC0002</strong>[8] 中描述。从现在开始，我们将为测试仓库使用此模板：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>[[tag]]</span></span>
<span class="line"><span>tag = &quot;default&quot;</span></span>
<span class="line"><span>name = &quot;默认&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[[tag]]</span></span>
<span class="line"><span>tag = &quot;tag1&quot;</span></span>
<span class="line"><span>name = &quot;第 1 部分&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[[tag]]</span></span>
<span class="line"><span>[[tag.subtag]]</span></span>
<span class="line"><span>tag= &quot;tag2&quot;</span></span>
<span class="line"><span>name = &quot;小节 1&quot;</span></span>
<span class="line"><span>footers = [&quot;修复&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>要使用这样的模板，只需使用 <code>-t</code> 选项：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal -t CHANGELOG.toml</span></span>
<span class="line"><span>[git-journal] [INFO] 跳过提交：摘要解析：&#39;合并分支 &#39;test_branch&#39;&#39;</span></span>
<span class="line"><span>[git-journal] [OKAY] 解析完成。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 未发布 (2016-09-21)：</span></span>
<span class="line"><span>## 默认</span></span>
<span class="line"><span>- [移除] file3.txt</span></span>
<span class="line"><span>- [移除] file4.txt</span></span>
<span class="line"><span>- [移除] file5.txt</span></span>
<span class="line"><span>- [新增] new .gitjournal</span></span>
<span class="line"><span>- [改进] file5.txt</span></span>
<span class="line"><span>- [修复] 这个</span></span>
<span class="line"><span>- [移除] 那个</span></span>
<span class="line"><span>- [新增] .gitjournal.toml 文件</span></span>
<span class="line"><span>- [移除] 不需要的内容</span></span>
<span class="line"><span>- [移除] file4.txt</span></span>
<span class="line"><span>- [新增] file4.txt</span></span>
<span class="line"><span>- [新增] file1.txt 再次</span></span>
<span class="line"><span>- [移除] file1.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 第 1 部分</span></span>
<span class="line"><span>- [新增] file4 再次</span></span>
<span class="line"><span>- 这段段落解释了变更的详细信息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 小节 1</span></span>
<span class="line"><span>- [修复] 多个问题</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修复：</span></span>
<span class="line"><span>#1, #2, #1, #2, #3, #5, #6, #7</span></span>
<span class="line"><span></span></span>
<span class="line"><span># v2 (2016-09-12)：</span></span>
<span class="line"><span>## 默认</span></span>
<span class="line"><span>- [新增] file3.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>所有未标记的内容都将进入 <code>default</code> 部分。<code>tag1</code> 的名称将映射为 <code>第 1 部分</code>，<code>tag2</code> 是 <code>tag1</code> 的子标签（见 markdown 标题）。这也意味着现在可能存在未分类的列表项，因为模板引擎提供了将提交拆分为多部分的可能性。解析后的段落被转换为单个列表项，以始终提供干净的 markdown。页脚被指定为 toml 数组字符串，这将在日志的正确位置输出选定的页脚键。请注意，页脚的累积与整个标签相关，而不仅仅是打印它们的部分。其他命令行选项在默认输出中也可用。</p><p>还可以为每个输出或每个标签添加自定义标题或页脚文本。有关更多信息，请阅读 <strong>RFC0002</strong>[9]。</p><h4 id="提交消息准备和验证" tabindex="-1">提交消息准备和验证 <a class="header-anchor" href="#提交消息准备和验证" aria-label="Permalink to &quot;提交消息准备和验证&quot;">​</a></h4><p>要使用自动提交消息准备和验证，必须在每个本地仓库上执行 git 日志设置：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git journal setup</span></span>
<span class="line"><span>[git-journal] [OKAY] 默认值写入 &#39;.gitjournal.toml&#39; 文件。</span></span>
<span class="line"><span>[git-journal] [OKAY] Git 钩子安装到 &#39;.git/hooks/commit-msg&#39;。</span></span>
<span class="line"><span>[git-journal] [OKAY] Git 钩子安装到 &#39;.git/hooks/prepare-commit-msg&#39;。</span></span>
<span class="line"><span>[git-journal] [OKAY] 安装了 bash 自动补全到路径。</span></span>
<span class="line"><span>[git-journal] [OKAY] 安装了 fish 自动补全到路径。</span></span>
<span class="line"><span>[git-journal] [OKAY] 安装了 zsh 自动补全到路径。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果这些钩子已经存在，<em>git-journal</em> 尝试追加所需的命令，之后必须手动验证。为 bash 和 fish 生成的命令行自动补全需要放在您的 shell 的正确目录中。默认配置文件是一个 <strong>toml</strong>[10] 文件，它表示 <strong>这个结构</strong>[11]。还可以在 <strong>这里</strong>[12] 找到带注释的默认配置。</p><p>如果设置完成，<em>git-journal</em> 将验证您输入的提交消息，以及执行提交消息准备。例如，如果我们现在尝试提交无法解析的内容：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; touch my_file</span></span>
<span class="line"><span>&gt; git add my_file</span></span>
<span class="line"><span>&gt; git commit -m &quot;This commit contains no category&quot;</span></span>
<span class="line"><span>[git-journal] [ERROR] 提交消息准备失败：GitJournal: Parser: Summary parsing: &#39;This commit contains no category&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>由于我们使用了 <code>-m</code> 标志，用户没有机会再编辑消息，<em>git-journal</em> 将拒绝它。如果我们通过通常的 <code>git commit</code> 而不带 <code>-m</code> 使用提交消息编辑器，我们将得到一个默认的提交消息模板：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>JIRA-1234 新增 ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果需要，添加更详细的描述</span></span>
<span class="line"><span></span></span>
<span class="line"><span># - 新增 ...</span></span>
<span class="line"><span># - 更改 ...</span></span>
<span class="line"><span># - 修复 ...</span></span>
<span class="line"><span># - 改进 ...</span></span>
<span class="line"><span># - 移除 ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>JIRA-1234</code> 前缀只是默认值，可以通过 <code>.gitjournal.toml</code> 文件配置。如果提交的提交消息也无效，我们将得到这样的错误：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>[git-journal] [ERROR] 提交消息无效：GitJournal: Parser: Summary parsing: &#39;This commit message is also invalid&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果一切顺利，它应该像这样：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; git commit -m &quot;Added my_file&quot;</span></span>
<span class="line"><span>[git-journal] [OKAY] 提交消息准备就绪。</span></span>
<span class="line"><span>[git-journal] [OKAY] 提交消息有效。</span></span>
<span class="line"><span>[master 1b1fcad] 新增 my_file</span></span>
<span class="line"><span> 1 file changed, 0 insertions(+), 0 deletions(-)</span></span>
<span class="line"><span> create mode 100644 my_file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果配置了默认模板，那么 <em>git-journal</em> 还将检查模板中的可用标签与您的提交消息标签。因此，如果提交消息中的一个标签在定义的模板中不可用，将会出现错误：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>[git-journal] [WARN] 这些标签不是默认模板的一部分：&#39;tag1&#39;。</span></span>
<span class="line"><span>[git-journal] [ERROR] 提交消息无效：GitJournal: Verify: Not all tags exist in the default template.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这意味着详细地说，<em>git-journal</em> 将在用户提交过程中建立两个关卡（一个用于准备，一个用于验证）。这张图将总结 <em>git-journal</em> 对本地 git 仓库的影响：</p><p><img src="`+l+'" alt="image-20240605133419531"></p><ul><li><p><strong>通用</strong></p></li><li><ul><li>[x] 在设置期间为 bash、fish 和 zsh shell 生成自动补全。</li><li>[x] 提交准备、验证和输出的自定义类别支持 (<code>categories</code>)。</li><li>[x] 自动多线程支持解析。</li></ul></li><li><p><strong>日志生成和输出</strong></p></li><li><ul><li>[x] 如果指定了 git 仓库的子路径，则自动搜索上级仓库。</li><li>[x] 自定义提交范围或不同的 git 提交起始点进行解析。</li><li>[x] 在与当前工作目录不同的指定路径 (<code>-p</code>) 中运行。</li><li>[x] 解析并打印完整历史 (<code>-a</code>) 或过去 <code>n</code> 个发布 (<code>-n</code>)。</li><li>[x] 基于提交消息摘要打印提交历史的简短版本 (<code>-s</code>)。</li><li>[x] 将解析后的日志以有效的 Markdown 输出到命令行或文件 (<code>-o</code>)。</li><li>[x] 自定义 git 标签排除模式，例如 <code>rc</code> 标签 (<code>-e</code>)。</li><li>[x] 启用/禁用调试消息输出 (<code>enable_debug</code>)。</li><li>[x] 通过命令行启用/禁用彩色输出 (<code>colored_output</code>)。</li><li>[x] 自动将提交消息类别包装在方括号中。</li><li>[x] 包括标签和名称映射的模板支持 (<code>default_template</code>)。</li><li>[x] 支持累积页脚数据（也用于模板引擎）。</li><li>[x] 默认和基于模板的输出的不同排序方法 (<code>&quot;date&quot;</code> 和 <code>&quot;name&quot;</code>) (<code>sort_by</code>)。</li><li>[x] 支持在模板中使用多个或单个输出的自定义标题和页脚字段。</li><li>[x] 根据解析结果生成默认模板 (<code>-g</code>)。</li><li>[x] 标准和模板输出中提交哈希链接 (<code>show_commit_hash</code>)。</li><li>[x] 支持自定义类别分隔符 (<code>category_delimiters</code>)。</li></ul></li><li><p><strong>提交消息的准备和验证</strong></p></li><li><ul><li>[x] 在本地仓库中自动安装 git 钩子。</li><li>[x] 在设置期间生成默认配置文件。</li><li>[x] 基于实现的解析器进行提交消息验证。</li><li>[x] 使用自定义提交前缀进行消息准备 (<code>template_prefix</code>)。</li><li>[x] 区分修订和新提交。</li><li>[x] 使用默认模板中的标签进行提交消息验证。</li></ul></li></ul><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p><code>git-journal</code> 作为一个强大的自动化工具，极大地简化了变更日志的维护工作。它不仅提高了效率，还保证了日志的一致性和准确性。无论是个人项目还是团队协作，<code>git-journal</code> 都是一个值得尝试的工具。</p><h3 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">​</a></h3><p><a href="https://github.com/saschagrunert/git-journal" target="_blank" rel="noreferrer">https://github.com/saschagrunert/git-journal</a></p><h4 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h4><p>[1] Rust: <em><a href="https://www.rust-lang.org/en-US/downloads.html" target="_blank" rel="noreferrer">https://www.rust-lang.org/en-US/downloads.html</a></em></p><p>[2] cargo: <em><a href="https://crates.io/install" target="_blank" rel="noreferrer">https://crates.io/install</a></em></p><p>[3] Pacman: <em><a href="https://wiki.archlinux.de/title/pacman" target="_blank" rel="noreferrer">https://wiki.archlinux.de/title/pacman</a></em></p><p>[4] rustup: <em><a href="https://rustup.rs/" target="_blank" rel="noreferrer">https://rustup.rs/</a></em></p><p>[5] 该仓库: <em><a href="https://github.com/saschagrunert/test" target="_blank" rel="noreferrer">https://github.com/saschagrunert/test</a></em></p><p>[6] Markdown: <em><a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/Markdown</a></em></p><p>[7] RFC0001: <em><a href="https://github.com/saschagrunert/git-journal/blob/master/rfc/0001-commit-msg.md" target="_blank" rel="noreferrer">https://github.com/saschagrunert/git-journal/blob/master/rfc/0001-commit-msg.md</a></em></p><p>[8] RFC0002: <em><a href="https://github.com/saschagrunert/git-journal/blob/master/rfc/0002-output-templating.md" target="_blank" rel="noreferrer">https://github.com/saschagrunert/git-journal/blob/master/rfc/0002-output-templating.md</a></em></p><p>[9] RFC0002: <em><a href="https://github.com/saschagrunert/git-journal/blob/master/rfc/0002-output-templating.md" target="_blank" rel="noreferrer">https://github.com/saschagrunert/git-journal/blob/master/rfc/0002-output-templating.md</a></em></p><p>[10] toml: <em><a href="https://github.com/toml-lang/toml" target="_blank" rel="noreferrer">https://github.com/toml-lang/toml</a></em></p><p>[11] 这个结构: <em><a href="https://saschagrunert.github.io/git-journal/gitjournal/config/struct.Config.html" target="_blank" rel="noreferrer">https://saschagrunert.github.io/git-journal/gitjournal/config/struct.Config.html</a></em></p><p>[12] 这里: <em><a href="https://saschagrunert.github.io/git-journal/gitjournal/struct.GitJournal.html#examples-1" target="_blank" rel="noreferrer">https://saschagrunert.github.io/git-journal/gitjournal/struct.GitJournal.html#examples-1</a></em></p><h2 id="quickwit-搜索引擎库-替代es-成本降低-10-倍-查询亚秒级别" tabindex="-1">Quickwit：搜索引擎库，替代ES，成本降低 10 倍，查询亚秒级别 <a class="header-anchor" href="#quickwit-搜索引擎库-替代es-成本降低-10-倍-查询亚秒级别" aria-label="Permalink to &quot;Quickwit：搜索引擎库，替代ES，成本降低 10 倍，查询亚秒级别&quot;">​</a></h2><h3 id="quickwit-是什么" tabindex="-1">Quickwit 是什么？ <a class="header-anchor" href="#quickwit-是什么" aria-label="Permalink to &quot;Quickwit 是什么？&quot;">​</a></h3><p>Quickwit 它是云存储上最快的搜索引擎，它非常适合用于可观察性的云原生搜索引擎，如日志、跟踪以及即将推出的指标。同时也是 Datadog、Elasticsearch、Loki 和 Tempo 的开源替代方案。</p><h3 id="quickwit-功能" tabindex="-1">Quickwit 功能 <a class="header-anchor" href="#quickwit-功能" aria-label="Permalink to &quot;Quickwit 功能&quot;">​</a></h3><ul><li><strong>全文搜索和聚合查询</strong>：提供对文本内容的全面搜索能力，以及对数据进行聚合分析的功能。</li><li><strong>Elasticsearch兼容API</strong>：允许使用现有的 Elasticsearch 或 OpenSearch 客户端与 Quickwit集成，保证了良好的兼容性和易用性。</li><li><strong>Jaeger 原生支持</strong>：内置对 Jaeger 的支持，有助于跟踪和监控微服务架构中的请求。</li><li><strong>OTEL原生支持</strong>：原生支持 OpenTelemetry（OTEL），用于日志和追踪，便于进行性能监控和故障排查。</li><li><strong>灵活的索引选项</strong>：支持无模式（Schemaless）和严格模式（Strict Schema）索引，以适应不同的数据结构需求。</li><li><strong>云存储上的亚秒级搜索</strong>：能够在Amazon S3、Azure Blob Storage、Google Cloud Storage等云存储服务上实现快速搜索。</li><li><strong>计算与存储解耦</strong>：采用计算和存储解耦的架构，使得索引器和搜索器是无状态的，有助于提高系统的可扩展性和弹性。</li><li><strong>Grafana 数据源</strong>：可以作为 Grafana 的数据源，方便用户在Grafana中进行数据可视化。</li><li><strong>Kubernetes 就绪</strong>：支持在 Kubernetes 上部署，提供了helm-chart以简化部署过程。</li><li><strong>RESTful API</strong>：提供REST风格的API，便于开发者通过HTTP请求与 Quickwit 进行交互</li></ul><p>架构图描述如下：</p><p><img src="'+p+'" alt="image-20240605140807392"></p><p>Quickwit 拥有卓越的性能，正如当前 Quickwit 的 docstore 存储技术升级，从 LZ4 到 ZSTD 的压缩算法转变，默认块大小从16KB 提升至1MB，使得压缩率显著提高，根据不同数据集可达到25%至60%的优化。</p><h3 id="参考资料-1" tabindex="-1">参考资料： <a class="header-anchor" href="#参考资料-1" aria-label="Permalink to &quot;参考资料：&quot;">​</a></h3><ul><li>GIthub地址：<a href="https://github.com/quickwit-oss/quickwit" target="_blank" rel="noreferrer">https://github.com/quickwit-oss/quickwit</a></li><li>官网文档：<a href="https://quickwit.io/blog/quickwit-0.8" target="_blank" rel="noreferrer">https://quickwit.io/blog/quickwit-0.8</a></li><li><a href="https://quickwit.io/docs/deployment/kubernetes/helm" target="_blank" rel="noreferrer">https://quickwit.io/docs/deployment/kubernetes/helm</a></li></ul><h2 id="_1-多功能文件清理工具-czkawka" tabindex="-1">1.多功能文件清理工具：czkawka <a class="header-anchor" href="#_1-多功能文件清理工具-czkawka" aria-label="Permalink to &quot;1.多功能文件清理工具：czkawka&quot;">​</a></h2><p>这是一款用 Rust 编写的多功能文件清理工具。项目旨在查找和清理重复文件、空文件夹和类似图像文件等。它是免费的、开源的、无广告的，具有速度快、跨平台兼容性和多语言支持等特点。使用此工具，可以轻松清理计算机上不必要的文件，释放存储空间。</p><ul><li>GitHub 仓库地址：<a href="https://github.com/qarmin/czkawka" target="_blank" rel="noreferrer">https://github.com/qarmin/czkawka</a></li></ul><p><img src="'+r+`" alt="czkawka.gif"></p><h4 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> rustup</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">rustup-init</span></span>
<span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> gtk4</span><span style="color:#98C379;"> adwaita-icon-theme</span><span style="color:#98C379;"> librsvg</span><span style="color:#98C379;"> libheif</span><span style="color:#98C379;"> pkg-config</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> https://github.com/qarmin/czkawka.git</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> czkawka</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#E06C75;"> LIBRARY_PATH</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">$LIBRARY_PATH</span><span style="color:#ABB2BF;">:/</span><span style="color:#E06C75;">opt</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">homebrew</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">Cellar</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">libheif</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">17</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">6</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">/</span></span>
<span class="line"><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;">$HOME</span><span style="color:#98C379;">/.cargo/env&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> --release</span><span style="color:#D19A66;"> --bin</span><span style="color:#98C379;"> czkawka_gui</span><span style="color:#D19A66;"> --features</span><span style="color:#98C379;"> &quot;heif,libraw&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_2-lsd" tabindex="-1">2. lsd <a class="header-anchor" href="#_2-lsd" aria-label="Permalink to &quot;2. lsd&quot;">​</a></h2><p>下一代 <code>ls</code> 命令，项目是一个用 Rust 编写的工具，用于查看与命令类似的目录列表 <code>ls</code>，并添加了颜色和图标等功能，使其更具视觉吸引力。</p><ul><li>Stars：<code>12.1k</code></li><li>Forks：<code>395</code></li><li>仓库地址：<a href="https://github.com/lsd-rs/lsd" target="_blank" rel="noreferrer">https://github.com/lsd-rs/lsd</a></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b2a2c8501c14276a1d64f98cfe1178e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1328&amp;h=720&amp;s=5183564&amp;e=gif&amp;f=71&amp;b=000000" alt="lsd.gif"></p><h4 id="安装-2" tabindex="-1">安装 <a class="header-anchor" href="#安装-2" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> lsd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-tailspin" tabindex="-1">3. tailspin <a class="header-anchor" href="#_3-tailspin" aria-label="Permalink to &quot;3. tailspin&quot;">​</a></h2><p>项目是一个基于 Rust 的命令行日志查看器，无需配置即可使用。它突出显示数字、日期、IP、URL 等，使重要信息脱颖而出。</p><ul><li>Stars：<code>4.9k</code></li><li>Forks：<code>65</code></li><li>仓库地址：<a href="https://github.com/bensadeh/tailspin" target="_blank" rel="noreferrer">https://github.com/bensadeh/tailspin</a></li></ul><p><img src="`+o+'" alt="image.png"></p><h4 id="安装-3" tabindex="-1">安装 <a class="header-anchor" href="#安装-3" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> tailspin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_4-privaxy" tabindex="-1">4. privaxy <a class="header-anchor" href="#_4-privaxy" aria-label="Permalink to &quot;4. privaxy&quot;">​</a></h2><p>基于 Rust 的追踪和广告拦截工具，项目基于 MITM（中间人）攻击原理，在两端建立双向隧道，通过过滤 URL 地址来屏蔽广告请求，从而拦截广告。具有占用内存更少，运行速度更快，支持自动更新过滤列表、显示统计信息以及自定义过滤列表。</p><ul><li>Stars：<code>2.2k</code></li><li>Forks：<code>87</code></li><li>仓库地址：<a href="https://github.com/Barre/privaxy" target="_blank" rel="noreferrer">https://github.com/Barre/privaxy</a></li></ul><p><img src="'+t+'" alt="image.png"></p><h2 id="_5-cmd-wrapped" tabindex="-1">5. cmd-wrapped <a class="header-anchor" href="#_5-cmd-wrapped" aria-label="Permalink to &quot;5. cmd-wrapped&quot;">​</a></h2><p>用 Rust 编写的命令行历史分析工具，这个命令行工具可以读取命令行操作历史并生成详细的分析报告，包括过去一年的命令行活动时段、常用命令等信息，支持 <code>Zsh</code>、<code>Bash</code>、<code>Fish</code> 等。</p><ul><li>Stars：<code>837</code></li><li>Forks：<code>23</code></li><li>仓库地址：<a href="https://github.com/YiNNx/cmd-wrapped" target="_blank" rel="noreferrer">https://github.com/YiNNx/cmd-wrapped</a></li></ul><p><img src="'+i+'" alt="cmd-wrapped.gif"></p><h4 id="安装-4" tabindex="-1">安装 <a class="header-anchor" href="#安装-4" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cmd-wrapped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用-1" tabindex="-1">使用 <a class="header-anchor" href="#使用-1" aria-label="Permalink to &quot;使用&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cmd-wrapped</span><span style="color:#D19A66;"> 2024</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> zsh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_6-veloren" tabindex="-1">6. veloren <a class="header-anchor" href="#_6-veloren" aria-label="Permalink to &quot;6. veloren&quot;">​</a></h2><p>用 Rust 编写的像素风格 RPG 游戏。它的灵感来自《塞尔达传说：荒野之息》、《矮人要塞》和《我的世界》等游戏。虽然这款游戏的图形分辨率较低，但它提供了一个广阔的开放世界，玩家可以在其中制作物品、合成物品、战斗、升级、驯服宠物、探索地下城和洞穴、在空中滑翔以及与 NPC 交易。</p><ul><li>Stars：<code>5.2k</code></li><li>Forks：<code>350</code></li><li>仓库地址：<a href="https://github.com/veloren/veloren" target="_blank" rel="noreferrer">https://github.com/veloren/veloren</a></li></ul><p><img src="'+c+'" alt="veloren.gif"></p><h2 id="_7-lettura" tabindex="-1">7. lettura <a class="header-anchor" href="#_7-lettura" aria-label="Permalink to &quot;7. lettura&quot;">​</a></h2><p>一款极简的开源 RSS 阅读器，基于 Tauri 开发的桌面 RSS 阅读器，免费、无广告、界面简洁，适用于 macOS 和 Windows 操作系统。</p><ul><li>Stars：<code>1.1k</code></li><li>Forks：<code>51</code></li><li>仓库地址：<a href="https://github.com/zhanglun/lettura" target="_blank" rel="noreferrer">https://github.com/zhanglun/lettura</a></li></ul><p><img src="'+u+`" alt="image.png"></p><h2 id="_8-sniffnet" tabindex="-1">8.sniffnet <a class="header-anchor" href="#_8-sniffnet" aria-label="Permalink to &quot;8.sniffnet&quot;">​</a></h2><p>舒适地监控您的互联网流量工具</p><p>GitHub：<a href="https://github.com/GyulyVGC/sniffnet" target="_blank" rel="noreferrer">GyulyVGC/sniffnet：舒适地监控您的互联网流量 🕵️ ♂️ (github.com)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg5MjA1ODYzNg==&amp;mid=2247486572&amp;idx=1&amp;sn=5359d273c866f358246bec488a63db5b&amp;chksm=ce36f676e0d6eae5b30044cd1792300c5105b036affdd57680e1d8d6780ae691385333b06d01&amp;scene=132&amp;exptype=timeline_recommend_article_extendread_samebiz&amp;show_related_article=1&amp;subscene=132&amp;scene=132#wechat_redirect" target="_blank" rel="noreferrer">开源的、基于 Rust 的网络监控工具：Sniffnet (qq.com)</a></p><h2 id="_9-全新的反向代理服务器-pingora" tabindex="-1">9.全新的反向代理服务器：pingora <a class="header-anchor" href="#_9-全新的反向代理服务器-pingora" aria-label="Permalink to &quot;9.全新的反向代理服务器：pingora&quot;">​</a></h2><p>这是一个更快速、更可靠、更强大的 Web 反向代理服务器，它采用 Rust 异步多线程，具有快速和可靠的特点，支持 HTTP/1 和 HTTP/2 端到端、gRPC 和 WebSocket 代理、不停机重启、可定制的负载均衡和故障转移策略等功能。</p><blockquote><p>GitHub 地址：<a href="https://github.com/cloudflare/pingora" target="_blank" rel="noreferrer">https://github.com/cloudflare/pingora</a></p></blockquote><h2 id="_10-rust-编写-helix-编辑器" tabindex="-1">10.Rust 编写 Helix 编辑器 <a class="header-anchor" href="#_10-rust-编写-helix-编辑器" aria-label="Permalink to &quot;10.Rust 编写 Helix 编辑器&quot;">​</a></h2><p><strong>参考资料：</strong></p><ul><li>Helix：<a href="https://github.com/helix-editor/helix" target="_blank" rel="noreferrer">https://github.com/helix-editor/helix</a></li><li>Vim：<a href="https://github.com/vim/vim" target="_blank" rel="noreferrer">https://github.com/vim/vim</a></li><li><a href="https://helix-editor.com/" target="_blank" rel="noreferrer">https://helix-editor.com/</a></li></ul><p>Rust 开发神器编辑器 Helix，它还比 vim 占用资源少，更加强大。</p><blockquote><p>Helix 的介绍</p></blockquote><p>Helix 是一款程序员喜欢的编辑器，使用 Rust 编写，它受到了包括 kakoune 和 neovim 在内的现代编辑器的启发。</p><p>Helix 设计中融合了多选功能、语言服务器协议（LSP）和 tree-sitter 等系列技术，为用户提供一个高效、灵活且强大的编辑体验，赶紧去体验吧！</p><blockquote><p>Helix 特点</p></blockquote><p>Helix 编辑器，很多特性受到许多开发者的喜爱，具备以下几个特点：</p><ul><li><strong>多选功能</strong>：它核心特性之一是支持多选，允许用户同时选择并编辑多个文本块，这在处理复杂的代码结构或进行批量修改时尤其有用。</li><li><strong>语言服务器协议（LSP）支持</strong>：内置了对 LSP 的支持，轻松与各种语言服务器无缝集成，提供实时的语法高亮、代码补全、错误检查等功能。</li><li><strong>tree-sitter 解析器</strong>：Helix 利用 tree-sitter 解析器来实现对代码的精确理解和操作，提高了编辑器的精确度和性能。</li><li><strong>模式编辑器</strong>：Helix 是一个模态文本编辑器，具有多种模式，适应不同情况的编辑需求。</li><li>丰富插件支持：Helix 遵循 UNIX 哲学，可以通过插件的形式实现，保持了编辑器的简洁性。</li><li><strong>易于理解的编辑模式</strong>：Helix 注重编辑的易理解性，即使可能需要比 Vim 或 Kakoune 多敲一两下键盘。</li></ul><blockquote><p>Helix 和 Vim 有什么区别？</p></blockquote><ul><li><strong>命令模式</strong>：Helix 的命令模式设计更规整，易于记忆，而 Vim 的命令模式则更传统，需要用户记忆更多的快捷键。</li><li><strong>内置功能</strong>：Helix 提供了更多开箱即用的内置功能，减少了用户配置的复杂性，Vim 则更依赖于插件来扩展功能。</li><li><strong>LSP 支持</strong>：Helix 对语言服务器协议（LSP）有良好的内置支持，而 Vim 虽然也支持 LSP，但通常需要通过插件实现。</li><li><strong>插件系统</strong>：Vim 的确拥有一个庞大的插件生态系统，提供了极高的可定制性，相比之下，Helix 目前缺乏成熟的插件系统。</li><li><strong>性能和高亮</strong>：Helix 使用 tree-sitter 进行语法高亮和代码分析，可能在性能上优于 Vim 的正则表达式高亮方式。</li><li><strong>使用难度</strong>：Helix 提供了一些现代编辑器的特性，如内建菜单，对新手更友好，Vim 的虽然简洁，但学习曲线较陡峭，需要有折腾的心。</li></ul><p>总之，Helix 更倾向于集成更多现代编辑器特性，然而 Vim 更侧重于提供一个高度可定制的编辑环境，可以根据自己喜欢进行配置，Vim 对初学肯定存在困难的。</p><h2 id="_11-用于-markdown-的-cat-mdcat" tabindex="-1">11.用于 markdown 的 cat：mdcat <a class="header-anchor" href="#_11-用于-markdown-的-cat-mdcat" aria-label="Permalink to &quot;11.用于 markdown 的 cat：mdcat&quot;">​</a></h2><p>使用 rust 开发的 markdown 命令行查看工具。</p><p>GitHub：<a href="https://github.com/swsnr/mdcat" target="_blank" rel="noreferrer">https://github.com/swsnr/mdcat</a></p><p>库：<a href="https://crates.io/crates/mdcat" target="_blank" rel="noreferrer">https://crates.io/crates/mdcat</a></p><h2 id="_12-yazi-用-rust-编写的基于异步-i-o-的超快终端文件管理器。" tabindex="-1">12.yazi：用 Rust 编写的基于异步 I/O 的超快终端文件管理器。 <a class="header-anchor" href="#_12-yazi-用-rust-编写的基于异步-i-o-的超快终端文件管理器。" aria-label="Permalink to &quot;12.yazi：用 Rust 编写的基于异步 I/O 的超快终端文件管理器。&quot;">​</a></h2><p>GitHub：<a href="https://github.com/sxyazi/yazi/" target="_blank" rel="noreferrer">sxyazi/yazi：💥 用 Rust 编写的基于异步 I/O 的超快终端文件管理器。 (github.com)</a></p><p>官网：<a href="https://yazi-rs.github.io/" target="_blank" rel="noreferrer">https://yazi-rs.github.io/</a></p><h2 id="_13-uv-rust-写的-python-打包工具" tabindex="-1">13.uv：Rust 写的 Python 打包工具 <a class="header-anchor" href="#_13-uv-rust-写的-python-打包工具" aria-label="Permalink to &quot;13.uv：Rust 写的 Python 打包工具&quot;">​</a></h2><p>GitHub：<a href="https://github.com/astral-sh/uv" target="_blank" rel="noreferrer">https://github.com/astral-sh/uv</a></p><p>官网：<a href="https://astral.sh/" target="_blank" rel="noreferrer">https://astral.sh/</a></p><p>博文：<a href="https://astral.sh/blog/uv" target="_blank" rel="noreferrer">uv：Rust 中的 Python 打包 (astral.sh)</a></p><h2 id="_14-sshx-通过网络快速、协作的实时终端共享工具" tabindex="-1">14.sshx：通过网络快速、协作的实时终端共享工具 <a class="header-anchor" href="#_14-sshx-通过网络快速、协作的实时终端共享工具" aria-label="Permalink to &quot;14.sshx：通过网络快速、协作的实时终端共享工具&quot;">​</a></h2><p>GitHub：<a href="https://github.com/ekzhang/sshx" target="_blank" rel="noreferrer">ekzhang/sshx：通过网络快速、协作的实时终端共享 (github.com)</a></p><p>官网：<a href="https://sshx.io/" target="_blank" rel="noreferrer">https://sshx.io/</a></p><p><a href="https://mp.weixin.qq.com/s/K-g41BTnVSMjb2ysnRki2g" target="_blank" rel="noreferrer">sshx 使用指南：一款简易的终端共享工具 (qq.com)</a></p><h2 id="_15-universal-android-debloater" tabindex="-1">15.universal-android-debloater <a class="header-anchor" href="#_15-universal-android-debloater" aria-label="Permalink to &quot;15.universal-android-debloater&quot;">​</a></h2><p>使用 ADB 用 Rust 编写的跨平台 GUI，用于消除无根 Android 设备的膨胀。改善您的隐私、安全性和设备的电池寿命。</p><p>GitHub：<a href="https://github.com/0x192/universal-android-debloater/" target="_blank" rel="noreferrer">0x192/universal-android-debloater：使用 ADB 用 Rust 编写的跨平台 GUI，用于消除无根 Android 设备的膨胀。改善您的隐私、安全性和设备的电池寿命。 (github.com)</a></p><h2 id="_2、fyrox-用-rust-编写的-3d-和-2d-游戏引擎" tabindex="-1">2、Fyrox：用 Rust 编写的 3D 和 2D 游戏引擎 <a class="header-anchor" href="#_2、fyrox-用-rust-编写的-3d-和-2d-游戏引擎" aria-label="Permalink to &quot;2、Fyrox：用 Rust 编写的 3D 和 2D 游戏引擎&quot;">​</a></h2><p>一个功能丰富，准备用于生产，通用的 2D/3D 游戏引擎，用 Rust 编写的场景编辑器，以前称为 rg3d。</p><p>Github 地址：<a href="https://github.com/FyroxEngine/Fyrox" target="_blank" rel="noreferrer">https://github.com/FyroxEngine/Fyrox</a></p><h2 id="_3、leptos-rust-web-全栈框架" tabindex="-1">3、Leptos：Rust Web 全栈框架 <a class="header-anchor" href="#_3、leptos-rust-web-全栈框架" aria-label="Permalink to &quot;3、Leptos：Rust Web 全栈框架&quot;">​</a></h2><p>Leptos 是一个全栈、同构的 Rust web 框架，利用细粒度的响应性来构建声明式用户界面。特性如下：</p><ul><li>创建立即开始工作的全栈应用程序，并通过客户端交互性逐步增强。</li><li>使用简单的工具以最少的配置快速启动项目。</li><li>轻松管理状态，而不需要用反应性信号对抗借用检查器。</li><li>编写跨服务器和客户端工作的“服务器函数”。</li><li>Rust 的类型安全可以保护你的整个应用。</li></ul><p>地址：<a href="https://leptos.dev/" target="_blank" rel="noreferrer">https://leptos.dev/</a></p><h2 id="_4、diesel-安全的-可扩展的-orm-和-rust-查询生成器" tabindex="-1">4、Diesel：安全的，可扩展的 ORM 和 Rust 查询生成器 <a class="header-anchor" href="#_4、diesel-安全的-可扩展的-orm-和-rust-查询生成器" aria-label="Permalink to &quot;4、Diesel：安全的，可扩展的 ORM 和 Rust 查询生成器&quot;">​</a></h2><p>Diesel 去掉了数据库交互的样板，在不牺牲性能的情况下消除了运行时错误。它充分利用了 Rust 的类型系统来创建一个“感觉像 Rust”的低开销查询构建器。</p><p>地址：<a href="https://github.com/diesel-rs/diesel" target="_blank" rel="noreferrer">https://github.com/diesel-rs/diesel</a></p><h2 id="_5、genact-摸鱼神器-一个无意义的活动生成器" tabindex="-1">5、GenAct：（摸鱼神器） 一个无意义的活动生成器 <a class="header-anchor" href="#_5、genact-摸鱼神器-一个无意义的活动生成器" aria-label="Permalink to &quot;5、GenAct：（摸鱼神器） 一个无意义的活动生成器&quot;">​</a></h2><p>**假装很忙或等待你的电脑，而你实际上应该在做真正的工作！**用你疯狂的多任务处理技能给人们留下深刻印象。只需打开几个实例并观看节目即可。</p><p>GitHub：<a href="https://github.com/svenstaro/genact" target="_blank" rel="noreferrer">svenstaro/genact：🌀 一个无意义的活动生成器 (github.com)</a></p><p>下载：<a href="https://github.com/svenstaro/genact/releases" target="_blank" rel="noreferrer">https://github.com/svenstaro/genact/releases</a></p><p>在线地址：<a href="https://svenstaro.github.io/genact/" target="_blank" rel="noreferrer">https://svenstaro.github.io/genact/</a></p><h2 id="imager-io-基于-rust-构建-让你的图片秒瘦-提升网站性能" tabindex="-1">Imager.io 基于 rust 构建：让你的图片秒瘦，提升网站性能 <a class="header-anchor" href="#imager-io-基于-rust-构建-让你的图片秒瘦-提升网站性能" aria-label="Permalink to &quot;Imager.io 基于 rust 构建：让你的图片秒瘦，提升网站性能&quot;">​</a></h2><blockquote><p>❝</p><p>在数字时代，图像已成为我们日常生活中不可或缺的一部分。无论是社交媒体、电子商务还是新闻网站，高质量的图像对于吸引用户和提供信息都至关重要。然而，高分辨率图像往往伴随着较大的文件大小，这不仅增加了服务器的负担，也影响了网页的加载速度。为了解决这一问题，今天，我们将介绍一个开源项目——Imager.io。</p><p>❞</p></blockquote><h3 id="「项目简介」" tabindex="-1"><strong>「项目简介」</strong> <a class="header-anchor" href="#「项目简介」" aria-label="Permalink to &quot;**「项目简介」**&quot;">​</a></h3><blockquote><blockquote><p>Imager.io 是一个自动化图像压缩工具，它能够高效地优化高分辨率且含有较多噪点的图片，将其转换为体积更小的文件，同时保持图像质量。这对于需要在网页上分发大量图片的网站来说，是一个巨大的福音。</p></blockquote></blockquote><h3 id="「性能对比」" tabindex="-1"><strong>「性能对比」</strong> <a class="header-anchor" href="#「性能对比」" aria-label="Permalink to &quot;**「性能对比」**&quot;">​</a></h3><p>Imager.io 在图像压缩方面的表现如何呢？让我们通过一个简单的性能对比来一探究竟：</p><ul><li><strong>「源图像」</strong>：39.00MB（4 张图片）</li><li><strong>「Kraken.io」</strong>：24MB</li><li><strong>「Jpegmini.com」</strong>：16MB</li><li><strong>「Compression.ai」</strong>：8.90MB</li><li><strong>「Imager.io」</strong>：<strong>「4.20MB」</strong></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>source        : ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 39.00M (4 images)</span></span>
<span class="line"><span>kraken.io     : ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 24M</span></span>
<span class="line"><span>jpegmini.com  : ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 16M</span></span>
<span class="line"><span>compression.ai: ▇▇▇▇▇▇▇▇ 8.90M</span></span>
<span class="line"><span>imager        : ▇▇▇▇ 4.20M</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>从上面的数据可以看出，Imager.io 在压缩效率上具有明显的优势，能够将源图像压缩到最小的体积，这对于提升网页性能和用户体验有着直接的影响。</p><h3 id="「项目特点」" tabindex="-1"><strong>「项目特点」</strong> <a class="header-anchor" href="#「项目特点」" aria-label="Permalink to &quot;**「项目特点」**&quot;">​</a></h3><ol><li><strong>「自动化」</strong>：Imager.io 自动化地进行图像压缩，无需手动干预，节省了大量时间。</li><li><strong>「高效压缩」</strong>：通过先进的压缩算法，Imager.io 能够在不牺牲图像质量的前提下，大幅度减小文件大小。</li><li><strong>「开源」</strong>：作为一个开源项目，Imager.io 允许社区成员参与改进，共同推动项目的发展。</li></ol><h3 id="「如何使用」" tabindex="-1"><strong>「如何使用」</strong> <a class="header-anchor" href="#「如何使用」" aria-label="Permalink to &quot;**「如何使用」**&quot;">​</a></h3><p>Imager.io 提供了详尽的文档，指导用户如何安装和使用该工具。用户可以通过项目的 GitHub 页面访问相关的安装和配置指南。</p><h3 id="「技术细节」" tabindex="-1"><strong>「技术细节」</strong> <a class="header-anchor" href="#「技术细节」" aria-label="Permalink to &quot;**「技术细节」**&quot;">​</a></h3><p>Imager.io 主要使用 Rust 语言编写，这使得它在性能上具有优势。Rust 是一种注重安全和并发的系统编程语言，非常适合处理这类性能敏感的任务。</p><h3 id="dockerfile" tabindex="-1">dockerFile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;dockerFile&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">###############################################################################</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># BUILD PHASE</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">###############################################################################</span></span>
<span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#98C379;"> rust:latest</span><span style="color:#98C379;"> as</span><span style="color:#98C379;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># SETUP</span></span>
<span class="line"><span style="color:#61AFEF;">WORKDIR</span><span style="color:#98C379;"> /code/</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> update</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">    apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> upgrade</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">    apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> software-properties-common</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> vim</span><span style="color:#98C379;"> tree</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># SYSTEM DEPENDENCIES</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -y</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    build-essential</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    llvm-dev</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    libclang-dev</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    clang</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    openssl</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    pkg-config</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    libssl-dev</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    xz-utils</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># BUILD PROJECT DEPENDENCIES FIRST</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> mkdir</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> src</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> echo</span><span style="color:#98C379;"> &#39;fn main() {panic!(&quot;stub&quot;)}&#39;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">src/main.rs</span></span>
<span class="line"><span style="color:#61AFEF;">ADD</span><span style="color:#98C379;"> Cargo.toml</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --release</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ASSETS</span></span>
<span class="line"><span style="color:#61AFEF;">ADD</span><span style="color:#98C379;"> assets/test</span><span style="color:#98C379;"> assets/test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># BUILD PROJECT CODE</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> rm</span><span style="color:#98C379;"> target/release/deps/imager-</span><span style="color:#E5C07B;">*</span></span>
<span class="line"><span style="color:#61AFEF;">ADD</span><span style="color:#98C379;"> src</span><span style="color:#98C379;"> src</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --release</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># INSTALL</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --force</span><span style="color:#D19A66;"> --path</span><span style="color:#98C379;"> .</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">###############################################################################</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># RUNTIME ENVIRONMENT</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">###############################################################################</span></span>
<span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#98C379;"> ubuntu:18.04</span><span style="color:#98C379;"> as</span><span style="color:#98C379;"> runtime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># SETUP</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> update</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">    apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> upgrade</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">    apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> build-essential</span><span style="color:#98C379;"> software-properties-common</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> vim</span><span style="color:#98C379;"> tree</span></span>
<span class="line"><span style="color:#61AFEF;">COPY</span><span style="color:#D19A66;"> --from=build</span><span style="color:#98C379;"> /usr/local/cargo/bin/imager</span><span style="color:#98C379;"> /bin/imager</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># # SECURITY &amp; SANITY CHECK</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> sha1sum</span><span style="color:#98C379;"> /bin/imager</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">/bin/imager.sha1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h3 id="自我构建" tabindex="-1">自我构建 <a class="header-anchor" href="#自我构建" aria-label="Permalink to &quot;自我构建&quot;">​</a></h3><h4 id="github-预构建-发布-1" tabindex="-1">GitHub (预构建) 发布[1] <a class="header-anchor" href="#github-预构建-发布-1" aria-label="Permalink to &quot;GitHub (预构建) 发布[1]&quot;">​</a></h4><p>非常简单的方法。</p><h2 id="例如-macos-用户" tabindex="-1">例如，MacOS 用户 <a class="header-anchor" href="#例如-macos-用户" aria-label="Permalink to &quot;例如，MacOS 用户&quot;">​</a></h2><p>下载 &amp; 解压：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ http --follow https://github.com/imager-io/imager/releases/download/imager-0.3.4/imager-v0.3.4-apple.tar.gz  &gt; imager-v0.3.4-apple.tar.gz</span></span>
<span class="line"><span>$ tar -xvzf imager.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>验证：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ ./apple/bin/imager --help</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="例如-linux-用户" tabindex="-1">例如，Linux 用户 <a class="header-anchor" href="#例如-linux-用户" aria-label="Permalink to &quot;例如，Linux 用户&quot;">​</a></h2><p>下载 &amp; 解压：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ wget https://github.com/imager-io/imager/releases/download/imager-0.3.4/imager-v0.3.4-apple.tar.gz</span></span>
<span class="line"><span>$ tar -xvzf imager.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>验证：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ ./linux/bin/imager --help</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="imager-库-命令行工具-从源代码构建" tabindex="-1">Imager 库/命令行工具 - 从源代码构建 <a class="header-anchor" href="#imager-库-命令行工具-从源代码构建" aria-label="Permalink to &quot;Imager 库/命令行工具 - 从源代码构建&quot;">​</a></h2><h3 id="通用要求" tabindex="-1">通用要求 <a class="header-anchor" href="#通用要求" aria-label="Permalink to &quot;通用要求&quot;">​</a></h3><ul><li>make/cargo 构建工具</li><li>libclang</li><li>C/C++ 编译器（带 c++ 标准库）</li><li>支持 xz 解压缩的 tar</li></ul><h4 id="第-1-步-cargo-2" tabindex="-1">第 1 步. Cargo[2] <a class="header-anchor" href="#第-1-步-cargo-2" aria-label="Permalink to &quot;第 1 步. Cargo[2]&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs  | sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第-2-步" tabindex="-1">第 2 步 <a class="header-anchor" href="#第-2-步" aria-label="Permalink to &quot;第 2 步&quot;">​</a></h4><h5 id="对于-macos" tabindex="-1">对于 MacOS <a class="header-anchor" href="#对于-macos" aria-label="Permalink to &quot;对于 MacOS&quot;">​</a></h5><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ brew install llvm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="对于基于-debian-的-linux" tabindex="-1">对于基于 Debian 的 Linux <a class="header-anchor" href="#对于基于-debian-的-linux" aria-label="Permalink to &quot;对于基于 Debian 的 Linux&quot;">​</a></h5><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ apt-get install -y build-essential llvm-dev libclang-dev clang openssl pkg-config libssl-dev xz-utils</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第-3-步-可选" tabindex="-1">第 3 步. 可选 <a class="header-anchor" href="#第-3-步-可选" aria-label="Permalink to &quot;第 3 步. 可选&quot;">​</a></h4><p>报告任何问题。</p><h3 id="安装-5" tabindex="-1">安装 <a class="header-anchor" href="#安装-5" aria-label="Permalink to &quot;安装&quot;">​</a></h3><h4 id="第-1-步-下载" tabindex="-1">第 1 步. 下载 <a class="header-anchor" href="#第-1-步-下载" aria-label="Permalink to &quot;第 1 步. 下载&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ git clone https://github.com/imager-io/imager.git  &amp;&amp; cd imager</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第-2-步-构建-安装" tabindex="-1">第 2 步. 构建 &amp; 安装 <a class="header-anchor" href="#第-2-步-构建-安装" aria-label="Permalink to &quot;第 2 步. 构建 &amp; 安装&quot;">​</a></h4><blockquote><p>❝</p><p>将安装 <code>imager</code> 到 <code>~/.cargo/bin</code>。</p><p>❞</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ cargo install --path imager --force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="「社区贡献」" tabindex="-1">「社区贡献」 <a class="header-anchor" href="#「社区贡献」" aria-label="Permalink to &quot;「社区贡献」&quot;">​</a></h4><p>Imager.io 项目由 Colbyn Wadman 主导开发，并得到了社区成员的积极贡献。目前已有 599 个星标和 34 个分支，显示出社区对该项目的广泛认可和支持。</p><h4 id="「结语」" tabindex="-1">「结语」 <a class="header-anchor" href="#「结语」" aria-label="Permalink to &quot;「结语」&quot;">​</a></h4><p>随着互联网上图像内容的不断增长，高效的图像压缩工具对于提升网站性能至关重要。Imager.io 以其出色的压缩性能和自动化处理能力，为图像优化提供了一个强有力的解决方案。如果你正在寻找一个能够提升网页加载速度和用户体验的工具，不妨试试 Imager.io。</p><p><strong>「了解更多」</strong>：</p><ul><li><strong>「GitHub 项目页面」</strong>：Imager.io：<a href="https://github.com/imager-io/imager" target="_blank" rel="noreferrer">https://github.com/imager-io/imager</a></li><li>Cargo：<a href="https://rustup.rs" target="_blank" rel="noreferrer">https://rustup.rs</a></li><li><strong>「许可证」</strong>：MPL-2.0</li></ul><h2 id="使用-tokio-实现的-redis-客户端和服务器不完整-仅用于学习目的" tabindex="-1">使用 Tokio 实现的 Redis 客户端和服务器不完整 - 仅用于学习目的 <a class="header-anchor" href="#使用-tokio-实现的-redis-客户端和服务器不完整-仅用于学习目的" aria-label="Permalink to &quot;使用 Tokio 实现的 Redis 客户端和服务器不完整 - 仅用于学习目的&quot;">​</a></h2><p>GitHub：<a href="https://github.com/tokio-rs/mini-redis" target="_blank" rel="noreferrer">https://github.com/tokio-rs/mini-redis</a></p><h2 id="rust-驱动的极速终端-alacritty-opengl-模拟器安装与配置全攻略" tabindex="-1">Rust 驱动的极速终端：Alacritty OpenGL 模拟器安装与配置全攻略 <a class="header-anchor" href="#rust-驱动的极速终端-alacritty-opengl-模拟器安装与配置全攻略" aria-label="Permalink to &quot;Rust 驱动的极速终端：Alacritty OpenGL 模拟器安装与配置全攻略&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzkwNjYxNTY3Mg==&amp;mid=2247495958&amp;idx=1&amp;sn=55dacc822b42d4e73c3cae872b5bc494&amp;chksm=c18f577d3681124a871c154e5ea9d266b8497fe19a51dbab40379873bcb55e3234fecf4fd4e1&amp;scene=132&amp;exptype=timeline_recommend_article_extendread_samebiz&amp;show_related_article=1&amp;subscene=0&amp;scene=132#wechat_redirect" target="_blank" rel="noreferrer">Rust 驱动的极速终端：Alacritty OpenGL 模拟器安装与配置全攻略 (qq.com)</a></p><h2 id="warp-rust-开发的-新一代终端工具" tabindex="-1">Warp：Rust 开发的，新一代终端工具 <a class="header-anchor" href="#warp-rust-开发的-新一代终端工具" aria-label="Permalink to &quot;Warp：Rust 开发的，新一代终端工具&quot;">​</a></h2><ul><li><strong>Warp 开源地址</strong>：<a href="https://github.com/warpdotdev/Warp" target="_blank" rel="noreferrer">https://github.com/warpdotdev/Warp</a></li><li><strong>Warp 官网</strong>：<a href="https://www.warp.dev/" target="_blank" rel="noreferrer">https://www.warp.dev/</a></li></ul><h4 id="warp-介绍" tabindex="-1">Warp 介绍 <a class="header-anchor" href="#warp-介绍" aria-label="Permalink to &quot;Warp 介绍&quot;">​</a></h4><p>Warp 它是一个款现代化的终端工具，是基于 Rust 语言开发的，并且内置了人工智能（AI）功能，提高开发者和团队的软件构建效率。</p><p>Warp 被设计为一个 21 世纪新一代的终端工具，不仅保留传统终端功能的同时，还增加了一些创新特性。如智能提示、命令导航、区域选择、历史命令的滚动列表等，这些特性使得用户在使用过程中更加便捷和高效。</p><h4 id="warp-亮点" tabindex="-1">Warp 亮点 <a class="header-anchor" href="#warp-亮点" aria-label="Permalink to &quot;Warp 亮点&quot;">​</a></h4><p>介绍了 Warp 的基本情况，相信大家也迫不及待，都有哪些特性呢，会吸引到你呢！特点如下：</p><ul><li><strong>智能提示</strong>：Warp 能够猜测用户接下来可能输入的命令，并提供相应的提示。</li><li><strong>智能记忆</strong>：Warp 会记录上一次执行的命令，并允许用户快速回溯。</li><li><strong>区域选择</strong>：与需要手动选择的传统终端不同，Warp 允许用户通过点击选择命令和输出，然后进行复制粘贴。</li><li><strong>历史命令</strong>：Warp 将历史命令以滚动列表的形式展示，方便用户选择。</li><li><strong>命令导航</strong>：Warp 提供了集成的命令导航功能，可以帮助用户快速找到并执行正确的命令，还是非常不错。</li><li>现代 UI 设计：Warp 的 UI 设计采用了现代的设计理念，提供了清晰、直观且用户友好的界面。</li><li><strong>AI 植入</strong>：还有更加重要的，Warp 提供了 AI 智能搜索功能，用户可以通过快捷键快速访问，不愧是新一代终端工具。</li></ul><h4 id="warp-的技术栈组成" tabindex="-1">Warp 的技术栈组成 <a class="header-anchor" href="#warp-的技术栈组成" aria-label="Permalink to &quot;Warp 的技术栈组成&quot;">​</a></h4><p>作为一款，主导未来新一代终端工具，Warp 的技术栈基于 Rust 语言，并结合了多种技术以实现其高性能和现代化的终端功能。</p><ul><li><p>采用 Rust 作为主要的编程语言，提供了内存安全、并发性以及跨平台支持，同时保持了高性能。包括利用 WebAssembly 来支持跨平台特性，使得它可以在多种环境中运行，不仅限于原生应用程序。</p></li><li><p><strong>Xcode 工具链</strong>：Warp 团队使用 Xcode 提供的 Metal 调试工具来优化渲染性能，测量帧速率和 GPU 内存使用情况。</p></li><li><p><strong>跨平台支持</strong>：虽然最初在 macOS 上推出，Warp 计划支持 Linux 和 Windows 平台，这表明它在设计时就考虑了跨平台的需求。</p></li><li><p><strong>终端协议</strong>：Warp 作为一个终端工具，实现了对常见的终端协议和标准的兼容，以确保良好的互操作性。</p></li><li><p>好的互操作性。</p></li></ul><p><img src="`+b+'" alt="图片"></p><h2 id="carbonyl—在终端内运行的-chromium-实现在终端展示展示-web-页面内容" tabindex="-1">carbonyl—在终端内运行的 Chromium：实现在终端展示展示 web 页面内容 <a class="header-anchor" href="#carbonyl—在终端内运行的-chromium-实现在终端展示展示-web-页面内容" aria-label="Permalink to &quot;carbonyl—在终端内运行的 Chromium：实现在终端展示展示 web 页面内容&quot;">​</a></h2><p>chromium：<a href="https://source.chromium.org/chromium/chromium/src/+/main:;drc=c8b537923f4fdbdf492a1e475b0f2bff0340a32b" target="_blank" rel="noreferrer">chromium</a></p><p>GitHub：<a href="https://github.com/fathyb/carbonyl" target="_blank" rel="noreferrer">fathyb/carbonyl：在终端内运行的铬 (github.com)</a></p><p>效果：</p><p><img src="https://user-images.githubusercontent.com/7185356/215657721-cc161cb2-1567-43c5-ab63-6aa079f76235.gif" alt="output"></p><p><img src="https://user-images.githubusercontent.com/7185356/215657797-f7bc3e9b-dbf9-45f2-ace0-737e6f9728d0.gif" alt="output2"></p><p><img src="https://user-images.githubusercontent.com/7185356/215657918-8ac150be-0b11-483a-a0ff-2f2e4c7dfaa5.gif" alt="2"></p><h2 id="miniob-像素风-rpg-游戏" tabindex="-1">miniob：像素风 RPG 游戏 <a class="header-anchor" href="#miniob-像素风-rpg-游戏" aria-label="Permalink to &quot;miniob：像素风 RPG 游戏&quot;">​</a></h2><p><strong>项目地址：<a href="https://github.com/veloren/veloren.git" target="_blank" rel="noreferrer">https://github.com/veloren/veloren.git</a></strong></p><p><img src="'+d+'" alt="image-20240512214105764"></p><p>Veloren 是一款用 Rust 编写的多人体素 RPG 游戏。它的灵感来源于《魔方世界》、《塞尔达传说：狂野之息》、《矮人堡垒》和《我的世界》等游戏。该游戏正在积极开发中，玩家群体也在蓬勃发展中。这款游戏支持主流的 RPG 的大多数功能，包括开放世界，玩家在游戏里可以打造道具、合成物品、战斗、升级、驯养宠物，还可以探索地牢洞穴、在空中滑翔、与 NPC 交易等。</p><p><img src="'+h+`" alt="image-20240512214132385"></p><p>在想学习 Rust 语言，同时对游戏开发感兴趣的同学可以去瞅瞅了，争取成为 Veloren 的开发贡献者吧！</p><h2 id="hurl-使用纯文本搜索、运行和测试-http-请求的命令行工具" tabindex="-1">hurl：使用纯文本搜索、运行和测试 HTTP 请求的命令行工具 <a class="header-anchor" href="#hurl-使用纯文本搜索、运行和测试-http-请求的命令行工具" aria-label="Permalink to &quot;hurl：使用纯文本搜索、运行和测试 HTTP 请求的命令行工具&quot;">​</a></h2><p><strong>GitHub 开源地址</strong>：<a href="https://github.com/Orange-OpenSource/hurl" target="_blank" rel="noreferrer">https://github.com/Orange-OpenSource/hurl</a></p><p><strong>官网</strong>：<a href="https://hurl.dev/" target="_blank" rel="noreferrer">https://hurl.dev/</a></p><p>目前市面上测试 API 的工具大概可类：</p><ul><li>第一类：提供可视化界面，主要通过可视化界面编写 API 测试用例和运行测试集，比如 Postman 和 Bruno、Jmeter、国产的 MeterSphere 等都是此类工具。</li><li>第二类：采用命令行编写和运行测试用例，此类工具一般提供给开发或者测开人员用于快速测试和验证 API 接口。比如 python 的 <em>requests</em> 库，Java 的 <em>HttpURLConnection</em> 类，或者 Curl 命令等等。</li></ul><p>此两类工具各有各的优缺点，第一类工具简单易用，学习难度低，方便无编程基础的人员快速开展测试，只需要掌握工具的具体用法即可，但是很多的时候不太符合开发人员或者测开人员的使用习惯。第二类工具需要具备一定的编程经验，对开发和测开人员相对友好，但有一定的上手难度，需要掌握基本的编程知识和代码逻辑思维。具体选择哪一类测试工具作为测试标准，企业可以综合参考业务系统的接口类型和复杂度，还有测试、测开、开发人员的习惯、能力水平而决定，简单来说没有最好的，只有最适合的。</p><p>所以，今天给大家介绍的是不同于 Bruno 这类界面可视化使用的 API 测试工具，而是一个超简单、采用简单的普通文本即可编写脚本的测试工具-Hurl。</p><h3 id="_01-hurl-介绍" tabindex="-1">01 Hurl 介绍 <a class="header-anchor" href="#_01-hurl-介绍" aria-label="Permalink to &quot;01 Hurl 介绍&quot;">​</a></h3><p>一句话介绍 Hurl：一个基于 Curl 封装的命令行测试工具，采用 Rust 语言，在 API 测试方面超越了 Curl，只要用户定义在一个简单的普通文本，即可快速进行 API 测试。</p><h4 id="🚀-功能特性" tabindex="-1">🚀 功能特性 <a class="header-anchor" href="#🚀-功能特性" aria-label="Permalink to &quot;🚀 功能特性&quot;">​</a></h4><ul><li>**请求与提取：**发送 HTTP 请求，并支持提取响应中的值，可以方便地执行各种 HTTP 操作，和数据上下文引用。</li><li>**数据断言：**支持对请求头、正文响应等进行多种方式断言，可以使用 XPath 和 JSONPath 等多种提取断言，以满足不同的测试需求。</li><li>**批量运行：**支持多个请求的批量运行，可以方便地构建复杂的测试用例，从而更全面地测试 API。</li><li>**集成与报告：**易于集成到 CI/CD（持续集成/持续部署）流程中，支持生成多种格式的报告，如文本报告、JUnit 报告和 HTML 报告，有助于分享和分享测试结果。</li><li>**适用于多种场景：**不仅适用于 REST/JSON API 的测试，还适用于 HTML、GraphQL 以及 SOAP API 等多种场景。</li></ul><h4 id="🛠-和其他语言编写测试脚本对比" tabindex="-1"><strong>🛠</strong> 和其他语言编写测试脚本对比 <a class="header-anchor" href="#🛠-和其他语言编写测试脚本对比" aria-label="Permalink to &quot;**🛠** 和其他语言编写测试脚本对比&quot;">​</a></h4><p>通过一个简单的对比示例感受下 Hurl 编写测试脚本的简单：</p><p>python 编写 API 测试脚本：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> requests</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TestAPI</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">unittest</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TestCase</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#98C379;">    &quot;&quot;&quot;测试API是否返回预期的响应&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    def</span><span style="color:#61AFEF;"> setUp</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.url </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;http://api.example.com/data&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    def</span><span style="color:#61AFEF;"> test_api_status</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#98C379;">        &quot;&quot;&quot;测试API状态码&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        response </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> requests.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.url)</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assertEqual</span><span style="color:#ABB2BF;">(response.status_code, </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> __name__</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    unittest.</span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Curl 编写 API 测试脚本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用curl命令测试API并断言响应中的字段</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置API URL</span></span>
<span class="line"><span style="color:#E06C75;">API_URL</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;http://example.com/api/data&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 发送请求并获取响应</span></span>
<span class="line"><span style="color:#E06C75;">response</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">$(</span><span style="color:#61AFEF;">curl</span><span style="color:#D19A66;"> -s</span><span style="color:#E06C75;"> $API_URL</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检查响应中的字段</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 假设我们期望的字段是&quot;status&quot;: &quot;200&quot;</span></span>
<span class="line"><span style="color:#E06C75;">expected_status</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">status</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">: </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">200</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#56B6C2;"> echo</span><span style="color:#E06C75;"> $response</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">grep</span><span style="color:#D19A66;"> -q</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;">$expected_status</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;测试通过：响应包含预期的状态字段&quot;</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;测试失败：响应未包含预期的状态字段&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;响应内容：</span><span style="color:#E06C75;">$response</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Hurl 编写 API 测试脚本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 请求API URL地址</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://api.example.com/data</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 状态码断言</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_02-hurl-安装" tabindex="-1">02 Hurl 安装 <a class="header-anchor" href="#_02-hurl-安装" aria-label="Permalink to &quot;02 Hurl 安装&quot;">​</a></h3><h4 id="一、二进制安装" tabindex="-1">一、二进制安装 <a class="header-anchor" href="#一、二进制安装" aria-label="Permalink to &quot;一、二进制安装&quot;">​</a></h4><p><strong>Linux</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> INSTALL_DIR=/tmp</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> VERSION=</span><span style="color:#D19A66;">4.3.0</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#D19A66;"> --silent</span><span style="color:#D19A66;"> --location</span><span style="color:#98C379;"> https://github.com/Orange-OpenSource/hurl/releases/download/</span><span style="color:#E06C75;">$VERSION</span><span style="color:#98C379;">/hurl-</span><span style="color:#E06C75;">$VERSION</span><span style="color:#98C379;">-x86_64-unknown-linux-gnu.tar.gz</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">tar</span><span style="color:#98C379;"> xvz</span><span style="color:#D19A66;"> -C</span><span style="color:#E06C75;"> $INSTALL_DIR</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> export</span><span style="color:#98C379;"> PATH=</span><span style="color:#E06C75;">$INSTALL_DIR</span><span style="color:#98C379;">/hurl-</span><span style="color:#E06C75;">$VERSION</span><span style="color:#98C379;">:</span><span style="color:#E06C75;">$PATH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Debian / Ubuntu</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> VERSION=</span><span style="color:#D19A66;">4.3.0</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#D19A66;"> --location</span><span style="color:#D19A66;"> --remote-name</span><span style="color:#98C379;"> https://github.com/Orange-OpenSource/hurl/releases/download/</span><span style="color:#E06C75;">$VERSION</span><span style="color:#98C379;">/hurl_</span><span style="color:#ABB2BF;">\${</span><span style="color:#E06C75;">VERSION</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">_amd64.deb</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> sudo</span><span style="color:#98C379;"> apt</span><span style="color:#98C379;"> update</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> apt</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> ./hurl_</span><span style="color:#ABB2BF;">\${</span><span style="color:#E06C75;">VERSION</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">_amd64.deb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>macOS-Homebrew</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> brew</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> hurl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>macOS-MacPorts</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> sudo</span><span style="color:#98C379;"> port</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> hurl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>Windows</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># windows操作系统安装hurl，可以在github release界面直接下载安装包即可</span></span>
<span class="line"><span style="color:#61AFEF;">https://github.com/Orange-OpenSource/hurl/releases</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>docker 安装</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> docker</span><span style="color:#98C379;"> pull</span><span style="color:#98C379;"> ghcr.io/orange-opensource/hurl:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="二、源码构建" tabindex="-1"><strong>二、源码构建</strong> <a class="header-anchor" href="#二、源码构建" aria-label="Permalink to &quot;**二、源码构建**&quot;">​</a></h4><p><em>注：Hurl 依赖于 libssl、libcurl 和 libxml2 库。构建的平台需要提前安装好。</em></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> https://github.com/Orange-OpenSource/hurl</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> cd</span><span style="color:#98C379;"> hurl</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --release</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> ./target/release/hurl</span><span style="color:#D19A66;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_03-hurl-使用" tabindex="-1">03 Hurl 使用 <a class="header-anchor" href="#_03-hurl-使用" aria-label="Permalink to &quot;03 Hurl 使用&quot;">​</a></h3><h4 id="一、请求" tabindex="-1">一、请求 <a class="header-anchor" href="#一、请求" aria-label="Permalink to &quot;一、请求&quot;">​</a></h4><h5 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/api/dogs?id=</span><span style="color:#D19A66;">4567</span></span>
<span class="line"><span style="color:#61AFEF;">User-Agent:</span><span style="color:#98C379;"> My</span><span style="color:#98C379;"> User</span><span style="color:#98C379;"> Agent</span></span>
<span class="line"><span style="color:#61AFEF;">Content-Type:</span><span style="color:#98C379;"> application/json</span></span>
<span class="line"><span style="color:#ABB2BF;">[BasicAuth]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Basic Authentication，使用 username：password</span></span>
<span class="line"><span style="color:#61AFEF;">alice:</span><span style="color:#98C379;"> secret</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="headers-设置" tabindex="-1">Headers 设置 <a class="header-anchor" href="#headers-设置" aria-label="Permalink to &quot;Headers 设置&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/news</span></span>
<span class="line"><span style="color:#61AFEF;">User-Agent:</span><span style="color:#98C379;"> Mozilla/5.0</span><span style="color:#ABB2BF;"> (Macintosh; </span><span style="color:#61AFEF;">Intel</span><span style="color:#98C379;"> Mac</span><span style="color:#98C379;"> OS</span><span style="color:#98C379;"> X</span><span style="color:#D19A66;"> 10.14</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">rv:70.0</span><span style="color:#ABB2BF;">) Gecko/20100101 Firefox/70.0</span></span>
<span class="line"><span style="color:#61AFEF;">Accept:</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;">/</span><span style="color:#E5C07B;">*</span></span>
<span class="line"><span style="color:#61AFEF;">Accept-Language:</span><span style="color:#98C379;"> en-US,en</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">q</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">0.5</span></span>
<span class="line"><span style="color:#61AFEF;">Accept-Encoding:</span><span style="color:#98C379;"> gzip,</span><span style="color:#98C379;"> deflate,</span><span style="color:#98C379;"> br</span></span>
<span class="line"><span style="color:#61AFEF;">Connection:</span><span style="color:#98C379;"> keep-alive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="cookies-设置" tabindex="-1">Cookies 设置 <a class="header-anchor" href="#cookies-设置" aria-label="Permalink to &quot;Cookies 设置&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/index.html</span></span>
<span class="line"><span style="color:#ABB2BF;">[Cookies]</span></span>
<span class="line"><span style="color:#61AFEF;">theme:</span><span style="color:#98C379;"> light</span></span>
<span class="line"><span style="color:#61AFEF;">sessionToken:</span><span style="color:#98C379;"> abc123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="json-请求体" tabindex="-1">JSON 请求体 <a class="header-anchor" href="#json-请求体" aria-label="Permalink to &quot;JSON 请求体&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># Create a new doggy thing with JSON body:</span></span>
<span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org/api/dogs</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;id&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> 0,</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;name&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;Frieda&quot;,</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;picture&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;images/scottish-terrier.jpeg&quot;,</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;age&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> 3,</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;breed&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;Scottish Terrier&quot;,</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;location&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;Lisco, Alabama&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="xml-请求体" tabindex="-1">XML 请求体 <a class="header-anchor" href="#xml-请求体" aria-label="Permalink to &quot;XML 请求体&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># Create a new soapy thing XML body:</span></span>
<span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org/InStock</span></span>
<span class="line"><span style="color:#61AFEF;">Content-Type:</span><span style="color:#98C379;"> application/soap+xml</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">charset</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">utf-8</span></span>
<span class="line"><span style="color:#61AFEF;">Content-Length:</span><span style="color:#D19A66;"> 299</span></span>
<span class="line"><span style="color:#61AFEF;">SOAPAction:</span><span style="color:#98C379;"> &quot;http://www.w3.org/2003/05/soap-envelope&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;?xml </span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#E06C75;"> encoding</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;?</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;soap:Envelope xmlns:</span><span style="color:#E06C75;">soap</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/2003/05/soap-envelope&quot;</span><span style="color:#61AFEF;"> xmlns:m</span><span style="color:#98C379;">=</span><span style="color:#61AFEF;">&quot;http://example.net&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#61AFEF;">soap:Header</span><span style="color:#ABB2BF;">&gt;&lt;/soap:Header&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#61AFEF;">soap:Body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#61AFEF;">m:GetStockPrice</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#61AFEF;">m:StockName</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">GOOG</span><span style="color:#ABB2BF;">&lt;/m:StockName&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#61AFEF;">/m:GetStockPrice</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#61AFEF;">/soap:Body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/soap:Envelope&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="graphql-请求" tabindex="-1">GraphQL 请求 <a class="header-anchor" href="#graphql-请求" aria-label="Permalink to &quot;GraphQL 请求&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org/starwars/graphql</span></span>
<span class="line"><span style="color:#98C379;">\`\`\`</span><span style="color:#61AFEF;">graphql</span></span>
<span class="line"><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#61AFEF;">  human(id:</span><span style="color:#98C379;"> &quot;1000&quot;) {</span></span>
<span class="line"><span style="color:#61AFEF;">    name</span></span>
<span class="line"><span style="color:#61AFEF;">    height(unit:</span><span style="color:#98C379;"> FOOT)</span></span>
<span class="line"><span style="color:#98C379;">  }</span></span>
<span class="line"><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#98C379;">\`\`\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="多行字符请求体" tabindex="-1">多行字符请求体 <a class="header-anchor" href="#多行字符请求体" aria-label="Permalink to &quot;多行字符请求体&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org/models</span></span>
<span class="line"><span style="color:#98C379;">\`\`\`</span></span>
<span class="line"><span style="color:#61AFEF;">Year,Make,Model,Description,Price</span></span>
<span class="line"><span style="color:#61AFEF;">1997,Ford,E350,&quot;ac, abs, moon&quot;,3000.00</span></span>
<span class="line"><span style="color:#61AFEF;">1999,Chevy,&quot;Venture &quot;&quot;Extended Edition&quot;&quot;&quot;,&quot;&quot;,4900.00</span></span>
<span class="line"><span style="color:#61AFEF;">1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00</span></span>
<span class="line"><span style="color:#61AFEF;">1996,Jeep,Grand</span><span style="color:#98C379;"> Cherokee,&quot;MUST SELL! air, moon roof, loaded&quot;,4799.00</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="单行字符请求体" tabindex="-1">单行字符请求体 <a class="header-anchor" href="#单行字符请求体" aria-label="Permalink to &quot;单行字符请求体&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org/helloworld</span></span>
<span class="line"><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">Hello</span><span style="color:#98C379;"> world!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="base64-请求体" tabindex="-1">Base64 请求体 <a class="header-anchor" href="#base64-请求体" aria-label="Permalink to &quot;Base64 请求体&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Some random comments before body</span></span>
<span class="line"><span style="color:#61AFEF;">base64,TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIG</span></span>
<span class="line"><span style="color:#61AFEF;">FkaXBpc2NpbmcgZWxpdC4gSW4gbWFsZXN1YWRhLCBuaXNsIHZlbCBkaWN0dW0g</span></span>
<span class="line"><span style="color:#61AFEF;">aGVuZHJlcml0LCBlc3QganVzdG8gYmliZW5kdW0gbWV0dXMsIG5lYyBydXRydW</span></span>
<span class="line"><span style="color:#E06C75;">0gdG9ydG9yIG1hc3NhIGlkIG1ldHVzLiA</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="hex-请求体" tabindex="-1">Hex 请求体 <a class="header-anchor" href="#hex-请求体" aria-label="Permalink to &quot;Hex 请求体&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">PUT</span><span style="color:#98C379;"> https://example.org</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Send a café, encoded in UTF-8</span></span>
<span class="line"><span style="color:#61AFEF;">hex,636166c3a90a</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="文件请求体" tabindex="-1">文件请求体 <a class="header-anchor" href="#文件请求体" aria-label="Permalink to &quot;文件请求体&quot;">​</a></h5><p>使用文件请求。文件体以 file 开头，以 ; 结尾：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Some random comments before body</span></span>
<span class="line"><span style="color:#61AFEF;">file,data.bin</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="二、提取" tabindex="-1">二、提取 <a class="header-anchor" href="#二、提取" aria-label="Permalink to &quot;二、提取&quot;">​</a></h4><h5 id="状态码提取" tabindex="-1">状态码提取 <a class="header-anchor" href="#状态码提取" aria-label="Permalink to &quot;状态码提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">my_status:</span><span style="color:#98C379;"> status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="header-提取" tabindex="-1">Header 提取 <a class="header-anchor" href="#header-提取" aria-label="Permalink to &quot;Header 提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> https://example.org/login</span></span>
<span class="line"><span style="color:#ABB2BF;">[FormParams]</span></span>
<span class="line"><span style="color:#61AFEF;">user:</span><span style="color:#98C379;"> toto</span></span>
<span class="line"><span style="color:#61AFEF;">password:</span><span style="color:#D19A66;"> 12345678</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 302</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">next_url:</span><span style="color:#98C379;"> header</span><span style="color:#98C379;"> &quot;Location&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="url-提取" tabindex="-1">URL 提取 <a class="header-anchor" href="#url-提取" aria-label="Permalink to &quot;URL 提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/redirecting</span></span>
<span class="line"><span style="color:#ABB2BF;">[Options]</span></span>
<span class="line"><span style="color:#61AFEF;">location:</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">landing_url:</span><span style="color:#98C379;"> url</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="cookie-提取" tabindex="-1">Cookie 提取 <a class="header-anchor" href="#cookie-提取" aria-label="Permalink to &quot;Cookie 提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/cookies/set</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">session-id:</span><span style="color:#98C379;"> cookie</span><span style="color:#98C379;"> &quot;LSID&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="body-提取" tabindex="-1">Body 提取 <a class="header-anchor" href="#body-提取" aria-label="Permalink to &quot;Body 提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/home</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">my_body:</span><span style="color:#98C379;"> body</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="xpath-提取" tabindex="-1">XPath 提取 <a class="header-anchor" href="#xpath-提取" aria-label="Permalink to &quot;XPath 提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/home</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Capture the identifier from the dom node &lt;div id=&quot;pet0&quot;&gt;5646eaf23&lt;/div</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">ped-id:</span><span style="color:#98C379;"> xpath</span><span style="color:#98C379;"> &quot;normalize-space(//div[@id=&#39;pet0&#39;])&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Open the captured page.</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/home/pets/{{pet-id}}</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="jsonpath-提取" tabindex="-1">JSONPath 提取 <a class="header-anchor" href="#jsonpath-提取" aria-label="Permalink to &quot;JSONPath 提取&quot;">​</a></h5><p><em>JSON 示例如下：</em></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;a_null&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;an_object&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;123&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;a_list&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;an_integer&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;a float&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;a_bool&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;a_string&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>提取示例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org/captures-json</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">an_object:</span><span style="color:#98C379;">  jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;an_object&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">a_list:</span><span style="color:#98C379;">     jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;a_list&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">a_null:</span><span style="color:#98C379;">     jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;a_null&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">an_integer:</span><span style="color:#98C379;"> jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;an_integer&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">a_float:</span><span style="color:#98C379;">    jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;a_float&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">a_bool:</span><span style="color:#98C379;">     jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;a_bool&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">a_string:</span><span style="color:#98C379;">   jsonpath</span><span style="color:#98C379;"> &quot;$[&#39;a_string&#39;]&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">all:</span><span style="color:#98C379;">        jsonpath</span><span style="color:#98C379;"> &quot;$&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="ssl-certificate-提取" tabindex="-1">SSL certificate 提取 <a class="header-anchor" href="#ssl-certificate-提取" aria-label="Permalink to &quot;SSL certificate 提取&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://example.org</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Captures]</span></span>
<span class="line"><span style="color:#61AFEF;">cert_subject:</span><span style="color:#98C379;"> certificate</span><span style="color:#98C379;"> &quot;Subject&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">cert_issuer:</span><span style="color:#98C379;"> certificate</span><span style="color:#98C379;"> &quot;Issuer&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">cert_expire_date:</span><span style="color:#98C379;"> certificate</span><span style="color:#98C379;"> &quot;Expire-Date&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">cert_serial_number:</span><span style="color:#98C379;"> certificate</span><span style="color:#98C379;"> &quot;Serial-Number&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="三、断言" tabindex="-1">三、断言 <a class="header-anchor" href="#三、断言" aria-label="Permalink to &quot;三、断言&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://api/example.org/cats</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#61AFEF;">Content-Type:</span><span style="color:#98C379;"> application/json</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">charset</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">utf-8</span><span style="color:#7F848E;font-style:italic;">      # Implicit assert on Content-Type Header</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]                                          </span><span style="color:#7F848E;font-style:italic;"># Explicit asserts section</span></span>
<span class="line"><span style="color:#61AFEF;">bytes</span><span style="color:#98C379;"> count</span><span style="color:#98C379;"> ==</span><span style="color:#D19A66;"> 120</span></span>
<span class="line"><span style="color:#61AFEF;">header</span><span style="color:#98C379;"> &quot;Content-Type&quot;</span><span style="color:#98C379;"> contains</span><span style="color:#98C379;"> &quot;utf-8&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.cats&quot;</span><span style="color:#98C379;"> count</span><span style="color:#98C379;"> ==</span><span style="color:#D19A66;"> 49</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.cats[0].name&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;Felix&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.cats[0].lives&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#D19A66;"> 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="四、使用变量" tabindex="-1">四、使用变量 <a class="header-anchor" href="#四、使用变量" aria-label="Permalink to &quot;四、使用变量&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">传入变量，在hurl文件中用</span><span style="color:#98C379;"> \`{{xxx }}\` 使用变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>比如 URL 环境变量引用：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://{{host}}/status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行脚本，传递变量：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">hurl</span><span style="color:#D19A66;"> --variable</span><span style="color:#98C379;"> url=xxx.xxx.xxx.xxx</span><span style="color:#D19A66;"> --variable</span><span style="color:#98C379;"> username=xxxxx</span><span style="color:#D19A66;">  --variable</span><span style="color:#98C379;"> password=xxxxx</span><span style="color:#98C379;"> sample.hurl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编写文件，传递变量：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 编写 vars.env文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># vim vars.env</span></span>
<span class="line"><span style="color:#E06C75;">url</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">xxx.xxx.xxx.xxx</span></span>
<span class="line"><span style="color:#E06C75;">username</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">xxxxxx</span></span>
<span class="line"><span style="color:#E06C75;">password</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">xxxxx</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 运行测试脚本</span></span>
<span class="line"><span style="color:#61AFEF;">hurl</span><span style="color:#D19A66;"> --variables-file</span><span style="color:#98C379;"> vars.env</span><span style="color:#98C379;"> sample.hurl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>hurl 文件中定义变量：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://{{host}}/{{type}}/status</span></span>
<span class="line"><span style="color:#ABB2BF;">[Options]</span></span>
<span class="line"><span style="color:#61AFEF;">variable:</span><span style="color:#98C379;"> hostxxx.xxx.xxxx.xxx</span></span>
<span class="line"><span style="color:#61AFEF;">variable:</span><span style="color:#98C379;"> type=</span><span style="color:#D19A66;">1234</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> https://{{host}}/{{type}}/health</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="五、运行测试" tabindex="-1">五、运行测试 <a class="header-anchor" href="#五、运行测试" aria-label="Permalink to &quot;五、运行测试&quot;">​</a></h4><p>将所有需要测试的 API 请求，保存在后缀为*.hurl 文件，如下两个文件示例：</p><p>sample.hurl</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># sample.hurl</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#查询北京天气</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101010100</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;良&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#查询大连天气</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101070201</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;优&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#查询乌鲁木齐天气</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101130101</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;良&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>sample-1.hurl</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># sample-1.hurl</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#查询北京天气</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101010100</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;优&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#查询大连天气</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101070201</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;优&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#查询乌鲁木齐天气</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101130101</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#ABB2BF;">[Asserts]</span></span>
<span class="line"><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;优&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>批量运行测试脚本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 批量运行脚本</span></span>
<span class="line"><span style="color:#61AFEF;">hurl</span><span style="color:#D19A66;"> --test</span><span style="color:#98C379;"> sample.hurl</span><span style="color:#98C379;"> sample-1.hurl</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 返回结果如下（实时返回天气情况，测试结果有可能不同）</span></span>
<span class="line"><span style="color:#61AFEF;">sample.hurl:</span><span style="color:#98C379;"> Running</span><span style="color:#ABB2BF;"> [1/2]</span></span>
<span class="line"><span style="color:#61AFEF;">sample.hurl:</span><span style="color:#98C379;"> Success</span><span style="color:#ABB2BF;"> (3 </span><span style="color:#98C379;">request</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">in</span><span style="color:#D19A66;"> 113</span><span style="color:#98C379;"> ms</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">sample-1.hurl:</span><span style="color:#98C379;"> Running</span><span style="color:#ABB2BF;"> [2/2]3/3</span></span>
<span class="line"><span style="color:#61AFEF;">error:</span><span style="color:#98C379;"> Assert</span><span style="color:#98C379;"> failure</span></span>
<span class="line"><span style="color:#61AFEF;">  --</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">sample-1.hurl:5:0</span></span>
<span class="line"><span style="color:#ABB2BF;">   |</span></span>
<span class="line"><span style="color:#ABB2BF;">   | </span><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://t.weather.itboy.net/api/weather/city/101010100</span></span>
<span class="line"><span style="color:#ABB2BF;">   | </span><span style="color:#56B6C2;">...</span></span>
<span class="line"><span style="color:#61AFEF;"> 5</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">jsonpath</span><span style="color:#98C379;"> &quot;$.data.quality&quot;</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;优&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">   |   </span><span style="color:#61AFEF;">actual:</span><span style="color:#98C379;">   string</span><span style="color:#ABB2BF;"> &lt;良&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   |   </span><span style="color:#61AFEF;">expected:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;"> &lt;优&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   |</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">sample-1.hurl:</span><span style="color:#98C379;"> Failure</span><span style="color:#ABB2BF;"> (1 </span><span style="color:#98C379;">request</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">in</span><span style="color:#D19A66;"> 89</span><span style="color:#98C379;"> ms</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">--------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#61AFEF;">Executed</span><span style="color:#98C379;"> files:</span><span style="color:#D19A66;">  2</span></span>
<span class="line"><span style="color:#61AFEF;">Succeeded</span><span style="color:#98C379;"> files:</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> (50.0%)</span></span>
<span class="line"><span style="color:#61AFEF;">Failed</span><span style="color:#98C379;"> files:</span><span style="color:#D19A66;">    1</span><span style="color:#ABB2BF;"> (50.0%)</span></span>
<span class="line"><span style="color:#61AFEF;">Duration:</span><span style="color:#D19A66;">        203</span><span style="color:#98C379;"> ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_04-hurl-ci-cd-集成" tabindex="-1">04 Hurl CI/CD 集成 <a class="header-anchor" href="#_04-hurl-ci-cd-集成" aria-label="Permalink to &quot;04 Hurl CI/CD 集成&quot;">​</a></h3><h4 id="github-action-集成-demo" tabindex="-1">GitHub Action 集成 DEMO <a class="header-anchor" href="#github-action-集成-demo" aria-label="Permalink to &quot;GitHub Action 集成 DEMO&quot;">​</a></h4><p>在 GitHub 中创建一个新的代码仓库，命名为 my-project;</p><p><img src="`+m+`" alt="image-20240508184809451"></p><p>在开发 PC 中创建 git 仓库 my-project，创建 test 目录。将所有测试脚本移动至 test 目录，并提交项目文件:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> init</span></span>
<span class="line"><span style="color:#61AFEF;">Initialized</span><span style="color:#98C379;"> empty</span><span style="color:#98C379;"> Git</span><span style="color:#98C379;"> repository</span><span style="color:#98C379;"> in</span><span style="color:#98C379;"> /Users/jc/Documents/Dev/movies-project/.git/</span></span>
<span class="line"><span style="color:#61AFEF;">mv</span><span style="color:#98C379;"> sample</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;"> test/</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;Add integration tests.&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> https://github.com/plateauandsp/my-project.git</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>仓库添加 GitHub Action。此操作的目的是在每次 push 时运行测试脚本：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">CI-Hurl-Test</span></span>
<span class="line"><span style="color:#D19A66;">on</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  push</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    branches</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">main</span></span>
<span class="line"><span style="color:#E06C75;">jobs</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  build</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    runs-on</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E06C75;">    permissions</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      contents</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">read</span></span>
<span class="line"><span style="color:#E06C75;">    steps</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Checkout</span></span>
<span class="line"><span style="color:#E06C75;">        uses</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">actions/checkout@v4</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Build</span></span>
<span class="line"><span style="color:#E06C75;">        run</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">echo &quot;Building app...&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Integration test</span></span>
<span class="line"><span style="color:#E06C75;">        run</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">|</span></span>
<span class="line"><span style="color:#98C379;">          wget https://github.com/Orange-OpenSource/hurl/releases/download/4.3.0/hurl-4.3.0-x86_64-unknown-linux-gnu.tar.gz</span></span>
<span class="line"><span style="color:#98C379;">          tar xzvf hurl-4.3.0-x86_64-unknown-linux-gnu.tar.gz</span></span>
<span class="line"><span style="color:#98C379;">          hurl-4.3.0-x86_64-unknown-linux-gnu/bin/hurl --test test/sample*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>提交测试，模拟代码提交后自动触发 Hurl 测试：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .github/workflows/CI-Hurl-Test.yml</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;Add GitHub action.&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 GitHub 上检查是否运行测试：</p><p><img src="`+y+'" alt="image-20240508184833233"></p><h3 id="_05-最后" tabindex="-1">05 最后 <a class="header-anchor" href="#_05-最后" aria-label="Permalink to &quot;05 最后&quot;">​</a></h3><p>相比 curl、wget，Hurl 在测试方面功能更强大，且更容易上手，很适用新手和快速测试使用。它允许用户以简单纯文本格式定义和运行测试 HTTP 请求。总结来说，Hurl 有可能在复杂场景下 API 测试有一些局限性*（如包含大量逻辑判断的 API 端到端测试）*，但是它确实一个非常灵活且简单易用的命令行 API 测试工具，无论是对于初学者还是经验丰富的测试人员，Hurl 都是一个值得考虑的选择。</p><h2 id="servo-并行浏览器引擎项目" tabindex="-1">Servo 并行浏览器引擎项目 <a class="header-anchor" href="#servo-并行浏览器引擎项目" aria-label="Permalink to &quot;Servo 并行浏览器引擎项目&quot;">​</a></h2><p>GitHub：<a href="https://github.com/servo/servo" target="_blank" rel="noreferrer">servo/servo：Servo，可嵌入的、独立的、内存安全的、模块化的、并行的 Web 渲染引擎 (github.com)</a></p><p>Servo 是用 <a href="https://github.com/rust-lang/rust" target="_blank" rel="noreferrer">Rust</a> 语言编写的原型 Web 浏览器引擎。它目前开发于 64 位 macOS、64 位 Linux、64 位 Windows 和 Android。</p><h2 id="用-rust-编写操作系统教程" tabindex="-1">用 Rust 编写操作系统教程 <a class="header-anchor" href="#用-rust-编写操作系统教程" aria-label="Permalink to &quot;用 Rust 编写操作系统教程&quot;">​</a></h2><p>教程文档：<a href="https://github.com/phil-opp/blog_os" target="_blank" rel="noreferrer">phil-opp/blog_os: Writing an OS in Rust (github.com)</a></p><p>GitHub：<a href="https://github.com/phil-opp/blog_os" target="_blank" rel="noreferrer">phil-opp/blog_os: Writing an OS in Rust (github.com)</a></p><p>此存储库包含 <a href="https://os.phil-opp.com/" target="_blank" rel="noreferrer">os.phil-opp.com</a> <em>的 Writing an OS in Rust</em> 系列的源代码：<a href="https://github.com/phil-opp/blog_os/tree/main" target="_blank" rel="noreferrer">phil-opp/blog_os: Writing an OS in Rust (github.com)</a></p><h2 id="redox-rust-操作系统" tabindex="-1">Redox：Rust 操作系统 <a class="header-anchor" href="#redox-rust-操作系统" aria-label="Permalink to &quot;Redox：Rust 操作系统&quot;">​</a></h2><p>Github 地址：<a href="https://github.com/redox-os/redox" target="_blank" rel="noreferrer">https://github.com/redox-os/redox</a></p><p>官网：<a href="https://www.redox-os.org/" target="_blank" rel="noreferrer">Redox - 您的下一代操作系统 - Redox - 您的下一代操作系统 (redox-os.org)</a></p><p>Redox 是一个用 Rust 编写的操作系统，Rust 是一种专注于安全和高性能的语言。Redox 遵循微内核设计，它的目标是安全、可用和免费。Redox 的灵感来自以前的内核和操作系统，如 SeL4、MINIX、Plan 9 和 BSD。</p><p>Redox 不仅仅是一个内核，它还是一个功能齐全的操作系统，提供了组件(内存分配器、文件系统、显示管理器、核心实用程序等)，这些组件共同构成了一个功能强大且方便的操作系统。你可以将其视为 GNU 或 BSD 生态系统，但使用的是内存安全语言和现代技术。</p><h2 id="📚-学习在-rust-🦀-中编写嵌入式操作系统" tabindex="-1">📚 学习在 Rust 🦀 中编写嵌入式操作系统 <a class="header-anchor" href="#📚-学习在-rust-🦀-中编写嵌入式操作系统" aria-label="Permalink to &quot;📚 学习在 Rust 🦀 中编写嵌入式操作系统&quot;">​</a></h2><p>GitHub：<a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials" target="_blank" rel="noreferrer">https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials</a></p><h2 id="tock-一个用-rust-开发、安全性极高的嵌入式操作系统" tabindex="-1">Tock：一个用 Rust 开发、安全性极高的嵌入式操作系统 <a class="header-anchor" href="#tock-一个用-rust-开发、安全性极高的嵌入式操作系统" aria-label="Permalink to &quot;Tock：一个用 Rust 开发、安全性极高的嵌入式操作系统&quot;">​</a></h2><p><strong>项目地址</strong>：<a href="https://github.com/tock/tock" target="_blank" rel="noreferrer">https://github.com/tock/tock</a></p><h3 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>嵌入式操作系统的需求日益增长，而传统的操作系统往往难以满足安全性的要求。Tock 是一个由 Rust 语言开发的嵌入式操作系统，它通过提供高安全性和可靠性的解决方案，为微控制器提供了一个安全的环境，满足了现代应用中对可信度的要求。</p><h3 id="_1-tock-的背景和目标" tabindex="-1">1. Tock 的背景和目标 <a class="header-anchor" href="#_1-tock-的背景和目标" aria-label="Permalink to &quot;1. Tock 的背景和目标&quot;">​</a></h3><p>在过去的几十年中，微控制器的应用范围不断扩大。然而，传统的嵌入式操作系统难以满足新兴应用对安全性和可靠性的要求。Tock 的目标是为嵌入式设备提供一个安全的操作系统，以保护设备免受恶意软件和攻击。</p><h3 id="_2-rust-语言的选择" tabindex="-1">2. Rust 语言的选择 <a class="header-anchor" href="#_2-rust-语言的选择" aria-label="Permalink to &quot;2. Rust 语言的选择&quot;">​</a></h3><p>Tock 选择 Rust 语言作为其主要开发语言，主要出于 Rust 语言在内存安全性、线程安全性和数据竞争方面的特点。Rust 语言的静态类型检查和所有权模型可以确保 Tock 在运行时没有内存泄露或悬空指针的问题，从而提高系统的稳定性。</p><h3 id="_3-tock-的安全特性" tabindex="-1">3. Tock 的安全特性 <a class="header-anchor" href="#_3-tock-的安全特性" aria-label="Permalink to &quot;3. Tock 的安全特性&quot;">​</a></h3><p>Tock 具有多种安全特性，使其成为一个安全的嵌入式操作系统。其中包括：</p><ul><li>多进程隔离：Tock 使用内核级的进程隔离，每个应用程序运行在自己的进程中，互不干扰。</li><li>内存安全：Rust 语言的所有权模型可以确保在 Tock 中没有悬空指针或竞态条件的问题。</li><li>可信应用程序：Tock 支持对应用程序进行数字签名，确保只有经过验证的应用程序可以被加载和运行。</li><li>安全启动：Tock 引入了启动程序的安全性检查，有效防止恶意软件的注入。</li></ul><h3 id="_4-tock-的应用领域" tabindex="-1">4. Tock 的应用领域 <a class="header-anchor" href="#_4-tock-的应用领域" aria-label="Permalink to &quot;4. Tock 的应用领域&quot;">​</a></h3><p>Tock 在各种应用领域中都有广泛的应用，包括物联网设备、无人机、工业控制系统、智能家居等。Tock 能够为这些应用提供高度安全的操作系统，保护设备免受潜在的攻击。</p><p><img src="'+g+'" alt="图片"></p><h3 id="_5-tock-的性能和效率" tabindex="-1">5. Tock 的性能和效率 <a class="header-anchor" href="#_5-tock-的性能和效率" aria-label="Permalink to &quot;5. Tock 的性能和效率&quot;">​</a></h3><p>尽管 Tock 注重安全性和可靠性，但它并不妨碍系统的性能和效率。Tock 的设计支持多任务并发执行，可以有效利用硬件资源，提高系统的运行效率。此外，Tock 的内存管理机制也对设备的能耗进行了优化，延长了电池寿命。</p><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p>Tock 是一个由 Rust 开发的安全嵌入式操作系统，其为微控制器提供了高度的安全性和可靠性。通过应用 Rust 语言的内存安全性和线程安全性特点，Tock 有效地解决了传统嵌入式操作系统的安全性问题。它的广泛应用领域和出色的性能使得 Tock 成为了当下热门的嵌入式操作系统之一。</p><h2 id="dragonos-采用-rust-自研内核的-具有了-linux-的兼容性的操作系统" tabindex="-1">DragonOS：采用 Rust 自研内核的，具有了 Linux 的兼容性的操作系统 <a class="header-anchor" href="#dragonos-采用-rust-自研内核的-具有了-linux-的兼容性的操作系统" aria-label="Permalink to &quot;DragonOS：采用 Rust 自研内核的，具有了 Linux 的兼容性的操作系统&quot;">​</a></h2><ul><li>官网：<a href="https://dragonos.org/" target="_blank" rel="noreferrer">https://dragonos.org/</a></li><li>开源地址：<a href="https://github.com/DragonOS-Community/DragonOS" target="_blank" rel="noreferrer">https://github.com/DragonOS-Community/DragonOS</a></li></ul><p>DragonOS 龙操作系统，主要面向云计算轻量化场景，完全自主内核的，提供 Linux 二进制兼容性的 64 位操作系统。</p><p>DragonOS 提供优秀完善的架构设计，相比于同体量的其他系统，DragonOS 还支持虚拟化，并在设备模型、调度子系统等方面具有一定优势。</p><h4 id="dragonos-特点" tabindex="-1">DragonOS 特点 <a class="header-anchor" href="#dragonos-特点" aria-label="Permalink to &quot;DragonOS 特点&quot;">​</a></h4><p>DragonOS 从 0 开始研发内核及用户态环境，并提供 Linux 兼容性。它具有长远目标的项目，而不止步于”玩具“级别的。</p><p>DragonOS 的架构设计良好，具有不错的可维护性和可扩展性。</p><p>DragonOS 开源社区成立于 2022 年 7 月。现在与教育和研究合作，主要开发者来自包括华南理工大学、广州大学、浙江大学等在内的多所高校，这充分表明了 DragonOS 也注重与教育和研究机构的合作。</p><p>DragonOS 正在逐步淘汰原有的 C 代码，转而使用 Rust，这将提高操作系统的安全性。也计划在未来 5 年内实现生产环境大规模应用的宏伟目标，并计划提供对 Linux 的 100%兼容性。</p><h4 id="总结优点" tabindex="-1">总结优点 <a class="header-anchor" href="#总结优点" aria-label="Permalink to &quot;总结优点&quot;">​</a></h4><ul><li><strong>轻量化设计</strong>：DragonOS 面向云计算场景，注重轻量化，适合在云环境中高效运行。</li><li><strong>高性能及高可靠性</strong>：DragonOS 旨在构建一个高性能和高可靠性的服务器操作系统，这对于企业级应用尤为重要。</li><li><strong>现代化特性</strong>：DragonOS 支持虚拟化技术，并在设备模型、调度子系统等方面具有优势，它还在不断推进对云平台和 RISC-V 架构的支持。</li><li><strong>安全性</strong>：采用 Rust 开发，逐步移除 C 代码，这将提高操作系统的安全性，减少内存安全问题，提高系统稳定性。</li><li><strong>Linux 二进制兼容性</strong>：它能够运行 Linux 程序，实现了“一次编译，随处运行”的能力，这使得开发者可以更容易地迁移现有的 Linux 应用程序到 DragonOS 上。</li></ul><h2 id="aerugo-面向安全应用的实时操作系统" tabindex="-1">aerugo：面向安全应用的实时操作系统 <a class="header-anchor" href="#aerugo-面向安全应用的实时操作系统" aria-label="Permalink to &quot;aerugo：面向安全应用的实时操作系统&quot;">​</a></h2><p>用Rust编写的面向安全应用的实时操作系统。</p><p>该项目是欧洲航天局开发的，针对基于32位ARM Cortex-M7处理器的ATSAMV71Q21微控制器。它的设计灵感来自于纯函数式编程范式和transputers架构。</p><p>地址：<a href="https://github.com/n7space/aerugo" target="_blank" rel="noreferrer">https://github.com/n7space/aerugo</a></p><h2 id="moturus-os" tabindex="-1">Motūrus OS <a class="header-anchor" href="#moturus-os" aria-label="Permalink to &quot;Motūrus OS&quot;">​</a></h2><p>Motūrus项目是为云构建的一个简单、快速、安全的操作系统(Motūrus OS)。</p><p>更具体地说，Motūrus OS(有时称为Motor OS)是一种针对基于虚拟机(如web服务、“无服务器”、边缘缓存等)的新操作系统。</p><p>Motūrus OS是一个基于微内核的操作系统，用Rust构建，专门针对虚拟化工作负载。它目前支持基于x64 kvm的虚拟机。</p><p>地址：<a href="https://github.com/moturus/motor-os" target="_blank" rel="noreferrer">https://github.com/moturus/motor-os</a></p>',506),k=[F];function f(B,q,A,x,v,E){return n(),a("div",null,k)}const P=s(C,[["render",f]]);export{_ as __pageData,P as default};
