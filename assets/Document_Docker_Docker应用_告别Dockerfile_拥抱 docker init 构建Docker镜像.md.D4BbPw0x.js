import{_ as s,c as n,o as a,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const h=JSON.parse('{"title":"告别Dockerfile,拥抱 docker init 构建Docker镜像","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/Docker应用/告别Dockerfile,拥抱 docker init 构建Docker镜像.md","filePath":"Document/Docker/Docker应用/告别Dockerfile,拥抱 docker init 构建Docker镜像.md","lastUpdated":1717759497000}'),p={name:"Document/Docker/Docker应用/告别Dockerfile,拥抱 docker init 构建Docker镜像.md"},l=e(`<h1 id="告别dockerfile-拥抱-docker-init-构建docker镜像" tabindex="-1">告别Dockerfile,拥抱 docker init 构建Docker镜像 <a class="header-anchor" href="#告别dockerfile-拥抱-docker-init-构建docker镜像" aria-label="Permalink to &quot;告别Dockerfile,拥抱 docker init 构建Docker镜像&quot;">​</a></h1><h2 id="概述" tabindex="-1"><strong>概述</strong> <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;**概述**&quot;">​</a></h2><p>Docker 是一个开源的应用容器引擎，它允许开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><h2 id="什么是-docker-init" tabindex="-1"><strong>什么是 docker init？</strong> <a class="header-anchor" href="#什么是-docker-init" aria-label="Permalink to &quot;**什么是 docker init？**&quot;">​</a></h2><p><code>docker init</code> 是一个命令行应用程序，可帮助初始化项目中的 Docker 资源。它根据项目的要求创建 <code>Dockerfiles</code>、<code>docker-compose</code> 文件和 <code>.dockerignore</code> 文件。这简化了为项目配置 Docker 的过程，节省时间并降低复杂性。</p><p>最新版本的 <code>docker init</code> 支持 <code>Go、Python、Node.js、Rust、ASP.NET、PHP</code> 和 <code>Java</code>。目前它只能于 <code>Docker Desktop</code> 一起使用，也就是说大家目前在 Linux 系统中是无法使用 <code>docker init</code> 的。</p><h2 id="如何使用" tabindex="-1"><strong>如何使用</strong> <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;**如何使用**&quot;">​</a></h2><p>使用 <code>docker init</code> 很简单，只需几个简单的步骤。首先，转到您要在其中设置 Docker 资源的项目目录。</p><p>举个例子，我来创建一个基本的 PHP 应用程序。</p><h4 id="创建-index-php" tabindex="-1"><strong>创建 index.php</strong> <a class="header-anchor" href="#创建-index-php" aria-label="Permalink to &quot;**创建 index.php**&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&lt;?php</span></span>
<span class="line"><span>echo &#39;Hello World! 开源技术小栈！&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="初始化" tabindex="-1"><strong>初始化</strong> <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;**初始化**&quot;">​</a></h4><p><code>docker init</code> 将扫描您的项目并要求您确认并选择最适合您的应用程序的模板。选择模板后<code>docker init</code> 会要求您提供一些特定于项目的信息，自动为您的项目生成必要的 Docker 资源。</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>接下来要做的就是选择应用程序平台，在示例中使用 PHP。它将建议您的项目的推荐值，例如 PHP 版本、端口、入口点命令。</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>您可以选择默认值或提供所需的值，它将创建您的 docker 配置文件以及动态运行应用程序的说明。让我们来看看这个自动生成的配置是什么样子。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ ls</span></span>
<span class="line"><span>Dockerfile  README.Docker.md  compose.yaml  index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="生成-dockerfile-文件" tabindex="-1"><strong>生成 Dockerfile 文件</strong> <a class="header-anchor" href="#生成-dockerfile-文件" aria-label="Permalink to &quot;**生成 Dockerfile 文件**&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># syntax=docker/dockerfile:1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Comments are provided throughout this file to help you get started.</span></span>
<span class="line"><span># If you need more help, visit the Dockerfile reference guide at</span></span>
<span class="line"><span># https://docs.docker.com/go/dockerfile-reference/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>################################################################################</span></span>
<span class="line"><span></span></span>
<span class="line"><span># The example below uses the PHP Apache image as the foundation for running the app.</span></span>
<span class="line"><span># By specifying the &quot;7.4.28-apache&quot; tag, it will also use whatever happens to be the</span></span>
<span class="line"><span># most recent version of that tag when you build your Dockerfile.</span></span>
<span class="line"><span># If reproducability is important, consider using a specific digest SHA, like</span></span>
<span class="line"><span># php@sha256:99cede493dfd88720b610eb8077c8688d3cca50003d76d1d539b0efc8cca72b4.</span></span>
<span class="line"><span>FROM php:7.4.28-apache</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Copy app files from the app directory.</span></span>
<span class="line"><span>COPY . /var/www/html</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Your PHP application may require additional PHP extensions to be installed</span></span>
<span class="line"><span># manually. For detailed instructions for installing extensions can be found, see</span></span>
<span class="line"><span># https://github.com/docker-library/docs/tree/master/php#how-to-install-more-php-extensions</span></span>
<span class="line"><span># The following code blocks provide examples that you can edit and use.</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Add core PHP extensions, see</span></span>
<span class="line"><span># https://github.com/docker-library/docs/tree/master/php#php-core-extensions</span></span>
<span class="line"><span># This example adds the apt packages for the &#39;gd&#39; extension&#39;s dependencies and then</span></span>
<span class="line"><span># installs the &#39;gd&#39; extension. For additional tips on running apt-get:</span></span>
<span class="line"><span># https://docs.docker.com/go/dockerfile-aptget-best-practices/</span></span>
<span class="line"><span># RUN apt-get update &amp;&amp; apt-get install -y \\</span></span>
<span class="line"><span>#     libfreetype-dev \\</span></span>
<span class="line"><span>#     libjpeg62-turbo-dev \\</span></span>
<span class="line"><span>#     libpng-dev \\</span></span>
<span class="line"><span># &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span></span>
<span class="line"><span>#     &amp;&amp; docker-php-ext-configure gd --with-freetype --with-jpeg \\</span></span>
<span class="line"><span>#     &amp;&amp; docker-php-ext-install -j$(nproc) gd</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Add PECL extensions, see</span></span>
<span class="line"><span># https://github.com/docker-library/docs/tree/master/php#pecl-extensions</span></span>
<span class="line"><span># This example adds the &#39;redis&#39; and &#39;xdebug&#39; extensions.</span></span>
<span class="line"><span># RUN pecl install redis-5.3.7 \\</span></span>
<span class="line"><span>#    &amp;&amp; pecl install xdebug-3.2.1 \\</span></span>
<span class="line"><span>#    &amp;&amp; docker-php-ext-enable redis xdebug</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Use the default production configuration for PHP runtime arguments, see</span></span>
<span class="line"><span># https://github.com/docker-library/docs/tree/master/php#configuration</span></span>
<span class="line"><span>RUN mv &quot;$PHP_INI_DIR/php.ini-production&quot; &quot;$PHP_INI_DIR/php.ini&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Switch to a non-privileged user (defined in the base image) that the app will run under.</span></span>
<span class="line"><span># See https://docs.docker.com/go/dockerfile-user-best-practices/</span></span>
<span class="line"><span>USER www-data</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><blockquote><p>它遵循人们在所有 Linkedin 和 Medium 帖子中不断告诉我们的所有性能和安全最佳实践。</p></blockquote><h4 id="docker-compose-yml" tabindex="-1"><strong>docker-compose.yml</strong> <a class="header-anchor" href="#docker-compose-yml" aria-label="Permalink to &quot;**docker-compose.yml**&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># Comments are provided throughout this file to help you get started.</span></span>
<span class="line"><span># If you need more help, visit the Docker compose reference guide at</span></span>
<span class="line"><span># https://docs.docker.com/go/compose-spec-reference/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Here the instructions define your application as a service called &quot;server&quot;.</span></span>
<span class="line"><span># This service is built from the Dockerfile in the current directory.</span></span>
<span class="line"><span># You can add other services your application may depend on here, such as a</span></span>
<span class="line"><span># database or a cache. For examples, see the Awesome Compose repository:</span></span>
<span class="line"><span># https://github.com/docker/awesome-compose</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  server:</span></span>
<span class="line"><span>    build:</span></span>
<span class="line"><span>      context: .</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 9009:80</span></span>
<span class="line"><span></span></span>
<span class="line"><span># The commented out section below is an example of how to define a PostgreSQL</span></span>
<span class="line"><span># database that your application can use. \`depends_on\` tells Docker Compose to</span></span>
<span class="line"><span># start the database before your application. The \`db-data\` volume persists the</span></span>
<span class="line"><span># database data between container restarts. The \`db-password\` secret is used</span></span>
<span class="line"><span># to set the database password. You must create \`db/password.txt\` and add</span></span>
<span class="line"><span># a password of your choosing to it before running \`docker-compose up\`.</span></span>
<span class="line"><span>#     depends_on:</span></span>
<span class="line"><span>#       db:</span></span>
<span class="line"><span>#         condition: service_healthy</span></span>
<span class="line"><span>#   db:</span></span>
<span class="line"><span>#     image: postgres</span></span>
<span class="line"><span>#     restart: always</span></span>
<span class="line"><span>#     user: postgres</span></span>
<span class="line"><span>#     secrets:</span></span>
<span class="line"><span>#       - db-password</span></span>
<span class="line"><span>#     volumes:</span></span>
<span class="line"><span>#       - db-data:/var/lib/postgresql/data</span></span>
<span class="line"><span>#     environment:</span></span>
<span class="line"><span>#       - POSTGRES_DB=example</span></span>
<span class="line"><span>#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password</span></span>
<span class="line"><span>#     expose:</span></span>
<span class="line"><span>#       - 5432</span></span>
<span class="line"><span>#     healthcheck:</span></span>
<span class="line"><span>#       test: [ &quot;CMD&quot;, &quot;pg_isready&quot; ]</span></span>
<span class="line"><span>#       interval: 10s</span></span>
<span class="line"><span>#       timeout: 5s</span></span>
<span class="line"><span>#       retries: 5</span></span>
<span class="line"><span># volumes:</span></span>
<span class="line"><span>#   db-data:</span></span>
<span class="line"><span># secrets:</span></span>
<span class="line"><span>#   db-password:</span></span>
<span class="line"><span>#     file: db/password.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>它编写了 <code>docker-compose.yaml</code> 配置来运行应用程序。由于我们的应用程序不包含与数据库的任何连接，因此它注释掉了数据库容器可能需要的代码。</p><h4 id="构建镜像" tabindex="-1"><strong>构建镜像</strong> <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;**构建镜像**&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker compose up --build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><h4 id="运行容器" tabindex="-1"><strong>运行容器</strong> <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;**运行容器**&quot;">​</a></h4><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>[+] Running 1/1</span></span>
<span class="line"><span> ✔ Container init-server-1  Recreated                                                                                                                                                                       0.2s</span></span>
<span class="line"><span>Attaching to server-1</span></span>
<span class="line"><span>server-1  | AH00558: apache2: Could not reliably determine the server&#39;s fully qualified domain name, using 172.19.0.2. Set the &#39;ServerName&#39; directive globally to suppress this message</span></span>
<span class="line"><span>server-1  | AH00558: apache2: Could not reliably determine the server&#39;s fully qualified domain name, using 172.19.0.2. Set the &#39;ServerName&#39; directive globally to suppress this message</span></span>
<span class="line"><span>server-1  | [Wed Apr 17 15:36:35.110763 2024] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.53 (Debian) PHP/7.4.28 configured -- resuming normal operations</span></span>
<span class="line"><span>server-1  | [Wed Apr 17 15:36:35.110809 2024] [core:notice] [pid 1] AH00094: Command line: &#39;apache2 -D FOREGROUND&#39;</span></span>
<span class="line"><span>server-1  | 172.19.0.1 - - [17/Apr/2024:15:36:39 +0000] &quot;GET / HTTP/1.1&quot; 200 208 &quot;-&quot; &quot;curl/7.70.0&quot;</span></span>
<span class="line"><span>server-1  | 172.19.0.1 - - [17/Apr/2024:15:37:18 +0000] &quot;GET / HTTP/1.1&quot; 200 208 &quot;-&quot; &quot;curl/7.70.0&quot;</span></span>
<span class="line"><span>server-1  | 172.19.0.1 - - [17/Apr/2024:15:37:19 +0000] &quot;GET / HTTP/1.1&quot; 200 208 &quot;-&quot; &quot;curl/7.70.0&quot;</span></span>
<span class="line"><span>server-1  | 172.19.0.1 - - [17/Apr/2024:15:37:19 +0000] &quot;GET / HTTP/1.1&quot; 200 208 &quot;-&quot; &quot;curl/7.70.0&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="请求访问" tabindex="-1"><strong>请求访问</strong> <a class="header-anchor" href="#请求访问" aria-label="Permalink to &quot;**请求访问**&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ curl http://127.0.0.1:9009/</span></span>
<span class="line"><span>Hello World !</span></span>
<span class="line"><span>$ curl http://127.0.0.1:9009/</span></span>
<span class="line"><span>Hello World! 开源技术小栈！</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="为什么使用-docker-init" tabindex="-1"><strong>为什么使用 docker init？</strong> <a class="header-anchor" href="#为什么使用-docker-init" aria-label="Permalink to &quot;**为什么使用 docker init？**&quot;">​</a></h2><p><code>docker init</code> 使 Docker 化变得轻而易举，特别是对于 Docker 新手来说。它消除了编写 <code>Dockerfile</code> 和其他配置文件的手动任务，从而节省时间并最大限度地减少错误。它使用模板根据您的应用程序类型自定义 Docker 设置，同时遵循行业最佳实践。</p>`,34),r=[l];function i(o,c,t,d,b,u){return a(),n("div",null,r)}const g=s(p,[["render",i]]);export{h as __pageData,g as default};
