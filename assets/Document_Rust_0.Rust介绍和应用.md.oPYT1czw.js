import{_ as a,c as t,o as e,a3 as s}from"./chunks/framework.zGi9i9Bf.js";const b=JSON.parse('{"title":"0.Rust 介绍和应用","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/0.Rust介绍和应用.md","filePath":"Document/Rust/0.Rust介绍和应用.md","lastUpdated":1713698133000}'),r={name:"Document/Rust/0.Rust介绍和应用.md"},l=s('<h1 id="_0-rust-介绍和应用" tabindex="-1">0.Rust 介绍和应用 <a class="header-anchor" href="#_0-rust-介绍和应用" aria-label="Permalink to &quot;0.Rust 介绍和应用&quot;">​</a></h1><p>官网入门：<a href="https://www.rust-lang.org/zh-CN/learn/get-started" target="_blank" rel="noreferrer">入门 - Rust 程序设计语言 (rust-lang.org)</a></p><h2 id="什么是-rust" tabindex="-1">什么是 Rust？ <a class="header-anchor" href="#什么是-rust" aria-label="Permalink to &quot;什么是 Rust？&quot;">​</a></h2><p>Rust 是一种多范式、通用的编程语言，运行速度极快，强调性能、类型安全和并发性。与流行的看法（或至少是我的看法）相反，Rust 不是以铁的氧化命名的，而是以铁的氧化命名的<a href="https://en.wikipedia.org/wiki/Rust_(fungus)" target="_blank" rel="noreferrer">一群有弹性的真菌：“为了生存而过度设计”</a>.</p><p>这是一个多么贴切的描述——当 Rust 代码编译时，编译器保证你的应用程序中没有分段错误、缓冲区溢出、内存泄漏和其他常见的内存错误。您的代码将长期存在并且永远不会崩溃。</p><p>这是通过其独特的所有权系统实现的，该系统通过在编译时而不是运行时强制执行的一组规则来管理内存。该系统可确保将内存错误（这是导致软件漏洞的主要原因）降至最低。事实上，Microsoft 报道说<a href="https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/" target="_blank" rel="noreferrer">他们 70% 的安全漏洞是内存安全问题</a>.正是出于这个原因，Microsoft 将 Rust 称为”<a href="https://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/#" target="_blank" rel="noreferrer">业界安全系统编程的最佳机会</a>“和<a href="https://devclass.com/2023/09/25/microsoft-posts-early-stages-code-for-developing-windows-drivers-in-rust/" target="_blank" rel="noreferrer">已经开始在其中开发 Windows 驱动程序</a>.</p><p>Rust 吸取了旧语言的教训。它从面向对象编程和函数式编程范式中汲取灵感，结合了哪些有效，哪些无效。因此，Rust 提供了一种既不纯粹的功能性也不过度面向对象的编程方式：它是一种独特的风格混合。</p><p>不得不改变你写代码的思维方式的前景是否让你感到害怕？不用担心，该语言旨在鼓励编写干净、可维护的代码。该编译器以其有用的错误消息而闻名，可作为指南，教您编写更好的 Rust 代码。告别晦涩难懂的错误代码。</p><p>再加上许多其他生活质量特性，如零成本抽象、无数据争用的线程、基于特征的泛型、模式匹配和类型推断，这些特性结合在一起，使 Rust 不仅安全，而且使用起来既有趣又高效。其应用范围很广：从<a href="https://github.com/rust-unofficial/awesome-rust" target="_blank" rel="noreferrer">CLI 工具、网络、嵌入式服务，以及最令人兴奋的 WebAssembly</a>。</p><h2 id="一、rust-的优点和应用" tabindex="-1">一、Rust 的优点和应用 <a class="header-anchor" href="#一、rust-的优点和应用" aria-label="Permalink to &quot;一、Rust 的优点和应用&quot;">​</a></h2><p>Rust 语言由 Mozilla 开发，最早发布于 2014 年 9 月。Rust 的编译器是在 MIT License 和 Apache License 2.0 双重协议声明下的免费开源软件。</p><h3 id="_1-rust-的优点" tabindex="-1">1.Rust 的优点 <a class="header-anchor" href="#_1-rust-的优点" aria-label="Permalink to &quot;1.Rust 的优点&quot;">​</a></h3><p>这也就是为什么选择 Rust 的原因所在。在 Rust 官网这么写着 Rust 的优点：</p><h4 id="高性能" tabindex="-1">高性能 <a class="header-anchor" href="#高性能" aria-label="Permalink to &quot;高性能&quot;">​</a></h4><p>Rust 速度惊人且内存利用率极高。由于没有运行时和垃圾回收，它能够胜任对性能要求特别高的服务，可以在嵌入式设备上运行，还能轻松和其他语言集成。</p><h4 id="可靠性" tabindex="-1">可靠性 <a class="header-anchor" href="#可靠性" aria-label="Permalink to &quot;可靠性&quot;">​</a></h4><p>Rust 丰富的类型系统和所有权模型保证了内存安全和线程安全，让您在编译期就能够消除各种各样的错误。</p><h4 id="生产力" tabindex="-1">生产力 <a class="header-anchor" href="#生产力" aria-label="Permalink to &quot;生产力&quot;">​</a></h4><p>Rust 拥有出色的文档、友好的编译器和清晰的错误提示信息， 还集成了一流的工具 —— 包管理器和构建工具， 智能地自动补全和类型检验的多编辑器支持， 以及自动格式化代码等等。</p><p>Rust 每一个版本都有一个核心主题或重点。将 1.0 视为“Rust 2015”，现在</p><ul><li>Rust 2015：稳定性</li><li>Rust 2018：生产力</li></ul><p>短短几年时间，Rust 官方以及对 Rust 进行了全年的改进，并且明确了 Rust 的主要方向。此外，更是创建了连接并授权 Rust 的全球社区。</p><h3 id="_2-rust-的应用" tabindex="-1">2.Rust 的应用 <a class="header-anchor" href="#_2-rust-的应用" aria-label="Permalink to &quot;2.Rust 的应用&quot;">​</a></h3><p>Rust 语言可以用于开发：</p><h4 id="传统命令行程序" tabindex="-1">传统命令行程序 <a class="header-anchor" href="#传统命令行程序" aria-label="Permalink to &quot;传统命令行程序&quot;">​</a></h4><p>Rust 编译器可以直接生成目标可执行程序，不需要任何解释程序。相比较传统的命令行开发，使用 Rust 强大的生态系统快速实现命令行工具。Rust 可助您放心维护，轻松分发应用程序。Rust 拥有以下特点：</p><ul><li>可靠且速度惊人： 即便只是编写简短的一次性脚本，您也能确信它是快速且易于测试的，并可以提供有用的输出。</li><li>易于分发： 将所有内容编译为单个可执行文件，用户无需安装运行时和库。</li><li>健壮的配置： 轻松处理跨平台的配置文件。Rust 将为您处理命名空间和格式。</li><li>帮助手册？轻松生成。： 为应用自动生成手册。只要对生成的文件打包即可轻松获得手册。</li><li>数据输入，数据输出： 除了与人沟通之外，Rust 还提供了绝佳的工具来帮助您与机器对话。</li><li>灵活的日志记录： 添加日志很方便，将其配置到不同的目标或设置为不同的格式也相当容易。</li></ul><p>除此以外，Rust 还有优秀的错误处理，能够当场 捕获错误。Rust 还能让您灵活地组织代码。从一个文件开始，当您需要更多功能时，有信心重构应用程序而不会破坏任何内容。</p><p>以上内容将在随后的开发中非常明显的体现出来，如果你跟着本系列文章一起学习 Rust ，相信你很快就会了解到以上特点。</p><h4 id="web-应用" tabindex="-1">Web 应用 <a class="header-anchor" href="#web-应用" aria-label="Permalink to &quot;Web 应用&quot;">​</a></h4><p>Rust 可以被编译成 WebAssembly，WebAssembly 是一种 JavaScript 的高效替代品。使用 Rust 来逐个增强您的 JavaScript 模块。发布到 npm，使用 webpack 打包，即可感受到惊人的速度提升。</p><p>使用 Rust 做 Web 开发，他拥有以下特点：</p><ul><li>可预见的性能： 没有难以预料的 GC 暂停，也没有 JIT 编译器造成性能抖动，只有底层控制与上层人体工程学的完美结合。</li><li>更小的代码尺寸： 代码尺寸越小，页面加载速度就越快。Rust 生成的 .wasm 模块不含类似于垃圾回收器这样的额外成本。高级优化和 Tree Shaking 优化可移除无用代码。</li><li>现代设施： 充满活力的库生态系统助您旗开得胜。Rust 拥有丰富的表达能力和零成本的抽象，以及助力您学习的友好社区。</li></ul><p>对于 JavaScript 来说，Rust 做的并不是取代，而是增强，是 JavaScript 的最佳搭档：</p><ul><li>增强，而非取代： WebAssembly 的梦想不是扼杀 JavaScript，而是与其并存，帮助处理一些繁重或底层的任务。Rust 以性能为先，这些任务也可以受益。</li><li>友好的工具链： 您可以将 Rust WebAssembly 包发布到 npm 之类的包仓储中心上。使用 webpack、Parcel 或其它工具来打包并分发它们。使用 npm audit 之类的工具和 Greenkeeper 来维护它们。</li><li>无缝的互操作性： 自动生成 Rust、WebAssembly 和 JavaScript API 之间的绑定代码。充分利用 web-sys 之类的库为整个 Web 平台提供预打包的绑定。</li></ul><h4 id="网络服务器" tabindex="-1">网络服务器 <a class="header-anchor" href="#网络服务器" aria-label="Permalink to &quot;网络服务器&quot;">​</a></h4><p>Rust 用极低的资源消耗做到安全高效，且具备很强的大规模并发处理能力，十分适合开发普通或极端的服务器程序。可预见的性能，极小的资源占用，坚如磐石的可靠性。Rust 极其适合网络服务。在网络方便的优点，是 Rust 广泛被了解的原因之一，他的特点如下：</p><ul><li>低资源占用： 控制资源使用，将内存和 CPU 占用降到最低。编译器的帮助可确保您所做正确。同时，通过生产效率高、使用体验宜人的生态系统来实现这一点。</li><li>安全可靠： Rust 强大的类型检查可以防止多种级别的 Bug。确保您在何时何地都可确切地知道状态是共享还是可变。在部署之前通过捕捉故障点来获得帮助。</li><li>大规模并发： 可以混合使用任何适合于您的并发方式。Rust 会确保您不会在线程或任务之间意外地共享状态。它能让您无所畏惧地压榨任意规模的性能。</li></ul><h4 id="嵌入式设备" tabindex="-1">嵌入式设备 <a class="header-anchor" href="#嵌入式设备" aria-label="Permalink to &quot;嵌入式设备&quot;">​</a></h4><p>Rust 同时具有 JavaScript 一般的高效开发语法和 C 语言的执行效率，支持底层平台的开发。针对资源匮乏的设备？需要底层控制而又不失上层抽象的便利？Rust 包您满意！</p><p>Rust 开发嵌入式设备有以下六大优点是：</p><ul><li>强大的静态分析： 在编译时强制要求引脚和外设配置，以确保资源不会被您应用程序中非预期的部分使用。</li><li>灵活的内存管理： 动态内存分配是可选的。可使用全局分配器和动态数据结构，也可以不采用堆而全部静态分配。</li><li>无畏并发： Rust 使得线程之间不可能意外地共享状态。无论使用哪种喜欢的方式实现并发，都能获得 Rust 提供的强力保障。</li><li>互操作性： 可将 Rust 集成到现有的 C 代码库中，也可利用现有的 SDK 编写 Rust 应用程序。</li><li>可移植性： 只需要一次编写库或驱动，就能在各种系统中使用它。不管是非常小的微控制器，还是强大的单板计算机，都可直接使用。</li><li>社区驱动： 作为 Rust 开源项目的一部分，嵌入式系统由一流的并拥有商业伙伴支持的开源社区驱动。</li></ul><p>现在的 Rust 有着广泛的应用，庞大的生态系统，活跃的社区，以及大量的参考资料，Rust 现在不只是有前途的编程语言，更是有可靠前途的编程语言。</p><h2 id="rust-学习路径" tabindex="-1">Rust 学习路径 <a class="header-anchor" href="#rust-学习路径" aria-label="Permalink to &quot;Rust 学习路径&quot;">​</a></h2><p>学习 Rust 的路径可以分为几个阶段，每个阶段都有不同的学习目标和资源。以下是一个推荐的学习路径：</p><ol><li><strong>入门基础</strong><ul><li>安装 Rust 编程语言。</li><li>学习 Rust 的基础语法，包括数据类型、变量、函数、控制流等。</li><li>理解 Rust 的所有权、借用和生命周期概念。</li></ul></li><li><strong>进阶学习</strong><ul><li>学习 Rust 中的模块、包和 crate。</li><li>掌握 Rust 中的面向对象编程和泛型编程。</li><li>学习 Rust 的标准库和常见的 Rust 库。</li></ul></li><li><strong>应用开发</strong><ul><li>学习使用 Rust 进行网络编程和并发编程。</li><li>学习使用 Rust 进行系统编程和操作系统编程。</li><li>学习使用 Rust 进行游戏编程和图形编程。</li></ul></li><li><strong>实践与项目</strong><ul><li>参与开源 Rust 项目，如 Rust 标准库、Tokio、Rocket 等。</li><li>开发自己的 Rust 项目，例如 Web 服务器、游戏、数据分析工具等。</li></ul></li></ol><h1 id="rust-和-c-对比" tabindex="-1">Rust 和 C++对比 <a class="header-anchor" href="#rust-和-c-对比" aria-label="Permalink to &quot;Rust 和 C++对比&quot;">​</a></h1><p>Rust 和 C++ 都是强大的系统级编程语言，以其高性能和精细的控制著称。Rust，作为一种相对较新的语言，以其对安全性的关注而受到赞誉，而 C++ 则因其历史悠久和广泛的应用而闻名。本文将深入比较这两种语言，探讨它们的优势、劣势和适用场景。</p><h2 id="语言概览" tabindex="-1">语言概览 <a class="header-anchor" href="#语言概览" aria-label="Permalink to &quot;语言概览&quot;">​</a></h2><h3 id="rust-语言" tabindex="-1">Rust 语言 <a class="header-anchor" href="#rust-语言" aria-label="Permalink to &quot;Rust 语言&quot;">​</a></h3><p>Rust 是一种系统级编程语言，旨在提供安全、并发和实用的特性。它特别关注内存安全和并发编程，避免了空指针、数据竞争等常见错误。</p><h3 id="c-语言" tabindex="-1">C++ 语言 <a class="header-anchor" href="#c-语言" aria-label="Permalink to &quot;C++ 语言&quot;">​</a></h3><p>C++ 是一种高性能的系统编程语言，广泛用于操作系统、游戏开发和嵌入式系统。它支持面向对象编程、泛型编程和过程化编程。</p><h2 id="内存安全与管理" tabindex="-1">内存安全与管理 <a class="header-anchor" href="#内存安全与管理" aria-label="Permalink to &quot;内存安全与管理&quot;">​</a></h2><h3 id="rust-的内存安全" tabindex="-1">Rust 的内存安全 <a class="header-anchor" href="#rust-的内存安全" aria-label="Permalink to &quot;Rust 的内存安全&quot;">​</a></h3><p>Rust 通过所有权模型确保内存安全，无需垃圾回收机制。所有权规则包括：</p><ul><li>每个值在 Rust 中都有一个变量，称为其所有者。</li><li>一次只能有一个所有者。</li><li>当所有者超出作用域时，值将被丢弃。</li></ul><h3 id="c-的内存管理" tabindex="-1">C++ 的内存管理 <a class="header-anchor" href="#c-的内存管理" aria-label="Permalink to &quot;C++ 的内存管理&quot;">​</a></h3><p>C++ 提供了更直接的内存控制能力，但也增加了内存泄漏和指针错误的风险。它依赖于开发者手动管理内存分配和释放。</p><h2 id="并发编程" tabindex="-1">并发编程 <a class="header-anchor" href="#并发编程" aria-label="Permalink to &quot;并发编程&quot;">​</a></h2><h3 id="rust-的并发优势" tabindex="-1">Rust 的并发优势 <a class="header-anchor" href="#rust-的并发优势" aria-label="Permalink to &quot;Rust 的并发优势&quot;">​</a></h3><p>Rust 的并发模型基于消息传递和共享状态的概念，提供了零成本抽象。通过所有权和类型系统，Rust 在编译时防止数据竞争。</p><h3 id="c-的并发能力" tabindex="-1">C++ 的并发能力 <a class="header-anchor" href="#c-的并发能力" aria-label="Permalink to &quot;C++ 的并发能力&quot;">​</a></h3><p>C++11 引入了线程库，提供了基本的并发支持。但相比 Rust，C++ 在并发时对安全性的保障较少。</p><h2 id="性能比较" tabindex="-1">性能比较 <a class="header-anchor" href="#性能比较" aria-label="Permalink to &quot;性能比较&quot;">​</a></h2><p>Rust 和 C++ 都提供了接近硬件的性能。Rust 在编译时进行更多的优化，而 C++ 则因其成熟的编译器和优化技术而拥有广泛的性能优化记录。</p><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><h3 id="rust-的使用场景" tabindex="-1">Rust 的使用场景 <a class="header-anchor" href="#rust-的使用场景" aria-label="Permalink to &quot;Rust 的使用场景&quot;">​</a></h3><ul><li><strong>网络编程</strong>：Rust 的安全性和并发特性使其成为编写网络应用和服务的理想选择。</li><li><strong>嵌入式系统</strong>：Rust 的低资源消耗和内存安全特性适合嵌入式系统开发。</li></ul><h3 id="c-的使用场景" tabindex="-1">C++ 的使用场景 <a class="header-anchor" href="#c-的使用场景" aria-label="Permalink to &quot;C++ 的使用场景&quot;">​</a></h3><ul><li><strong>游戏开发</strong>：C++ 在游戏开发中非常流行，主要因其性能和成熟的生态系统。</li><li><strong>系统编程</strong>：C++ 用于编写操作系统、驱动程序等系统级应用。</li></ul><h2 id="开发生态与社区" tabindex="-1">开发生态与社区 <a class="header-anchor" href="#开发生态与社区" aria-label="Permalink to &quot;开发生态与社区&quot;">​</a></h2><h3 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;Rust&quot;">​</a></h3><p>Rust 拥有一个活跃且不断增长的开发社区。虽然它的生态系统相对较新，但已有许多高质量的库和工具。</p><h3 id="c" tabindex="-1">C++ <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C++&quot;">​</a></h3><p>C++ 拥有一个庞大且成熟的开发生态，包括广泛的库、框架和工具。</p><h2 id="学习曲线" tabindex="-1">学习曲线 <a class="header-anchor" href="#学习曲线" aria-label="Permalink to &quot;学习曲线&quot;">​</a></h2><p>Rust 以其现代特性和安全保障为代价增加了学习复杂性，而 C++ 的复杂性来自其历史遗留问题和底层操作。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>选择 Rust 或 C++ 取决于项目的具体需求、团队的熟悉度和开发环境。Rust 提供了卓越的内存安全和并发处理，而 C++ 则提供了无与伦比的性能和控制能力。理解每种语言的优势和局限性将帮助开发者做出明智的决策。</p>',80),i=[l];function u(o,h,n,c,R,d){return e(),t("div",null,i)}const m=a(r,[["render",u]]);export{b as __pageData,m as default};
