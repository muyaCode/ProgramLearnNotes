import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const p="/ProgramLearnNotes/assets/640894984.CdbNsb4H.webp",l="/ProgramLearnNotes/assets/640-1714729352522-140.BRcBpaF6.webp",r="/ProgramLearnNotes/assets/640-1714729352523-141.DuIv05nf.webp",o="/ProgramLearnNotes/assets/640-1714729352523-142.BtcW90N9.webp",c="/ProgramLearnNotes/assets/640-1714729352523-143.DDYVgHEH.webp",t="/ProgramLearnNotes/assets/640-1714729352523-144.U66f1mdM.webp",i="/ProgramLearnNotes/assets/640-1714729352523-145.YVTmCnDg.webp",b="/ProgramLearnNotes/assets/640-1714729352523-146.BddaTDhx.webp",d="/ProgramLearnNotes/assets/640-1714729352523-147.1w_pttzs.webp",m="/ProgramLearnNotes/assets/640-1714729352523-148.DTsSk1M_.webp",u="/ProgramLearnNotes/assets/640-1714729352523-149.CQ-y5TYL.webp",h="/ProgramLearnNotes/assets/640-1714729352523-150.B8wExNir.webp",y="/ProgramLearnNotes/assets/640-1714729352523-151.B0gYOzh2.webp",k="/ProgramLearnNotes/assets/640-1714729352524-152.CTNxexWF.webp",g="/ProgramLearnNotes/assets/640-1714729352524-153.BbizJQ8D.webp",F="/ProgramLearnNotes/assets/640-1714729352524-154.CaDeV-J9.webp",B="/ProgramLearnNotes/assets/640-1714729352524-155.FwmZwTFb.webp",A="/ProgramLearnNotes/assets/640-1714729352524-156.CIxoT6SJ.webp",C="/ProgramLearnNotes/assets/640-1714729352524-157.CW-d1sc5.webp",_="/ProgramLearnNotes/assets/640-1714729352524-158.CEzUgpJn.webp",f="/ProgramLearnNotes/assets/image-20240512205456713.aXlJm_N0.png",q="/ProgramLearnNotes/assets/image-20240512205548232.CBfazpC4.png",v="/ProgramLearnNotes/assets/image-20240512205612637.CvDiFhAB.png",P="/ProgramLearnNotes/assets/image-20240512205626440.LWy7VWPi.png",D="/ProgramLearnNotes/assets/image-20240512205651815.DVGMwc7O.png",x="/ProgramLearnNotes/assets/image-20240512205709817.BP-S4sFq.png",E="/ProgramLearnNotes/assets/image-20240512205741114.CZppdvrG.png",w="/ProgramLearnNotes/assets/image-20240512205800424.BGKeXxPr.png",S="/ProgramLearnNotes/assets/640-4949854784.DUtqb24l.webp",N="/ProgramLearnNotes/assets/640-1715343362235-374.DeVwXmZj.webp",L="/ProgramLearnNotes/assets/640-1715343362235-375.BlJtrOLi.webp",O="/ProgramLearnNotes/assets/640-1715343362235-376.B43CAMII.webp",I="/ProgramLearnNotes/assets/640-1716715744650-61.D5oHLI3K.webp",T="/ProgramLearnNotes/assets/640-1716715744650-62.CucwzIfC.webp",z="/ProgramLearnNotes/assets/640-1715343362235-379.B1TC2ek5.webp",K="/ProgramLearnNotes/assets/640-1715343362235-380.Jf9giB6V.webp",U="/ProgramLearnNotes/assets/640-1715343362235-381.C6r1pQ4m.webp",M="/ProgramLearnNotes/assets/640-1715343362235-382.CxS4Y8sk.webp",G="/ProgramLearnNotes/assets/640-1715343362235-383.DQ6myTL5.webp",R="/ProgramLearnNotes/assets/640-1715343362235-384.YQdUw7Wx.webp",H="/ProgramLearnNotes/assets/640-1715343362235-385.C0Kg8Y8P.webp",J="/ProgramLearnNotes/assets/640-1715343362236-386.DkGtGkuD.webp",j="/ProgramLearnNotes/assets/640-1715343362236-387.DxerD6tM.webp",W="/ProgramLearnNotes/assets/640-1715343362236-388.DzjoP0Q1.webp",V="/ProgramLearnNotes/assets/640-1715343362236-389.BWGpPFfl.webp",$="/ProgramLearnNotes/assets/640-1715343362236-390.DPPdM0GN.webp",X="/ProgramLearnNotes/assets/640-1715343362236-391.BXRG-M0O.webp",Y="/ProgramLearnNotes/assets/640-1715343362236-392.CHd4LIEr.webp",Q="/ProgramLearnNotes/assets/640-1715343362236-393.DuBFjPUn.webp",Z="/ProgramLearnNotes/assets/640-1715343362236-394.CQ7OS4cA.webp",ss="/ProgramLearnNotes/assets/640-752752752.Boie8O1P.webp",as="/ProgramLearnNotes/assets/640-1715420895016-4.Du_0_IUj.webp",ns="/ProgramLearnNotes/assets/640-1715420895016-5.DsglKJx0.webp",es="/ProgramLearnNotes/assets/640-1715420895016-6.Di2rWZ9x.webp",ps="/ProgramLearnNotes/assets/640-1715420895016-7.Ct_oHRh1.webp",ls="/ProgramLearnNotes/assets/640-1715420895016-8.CEWZiURo.webp",rs="/ProgramLearnNotes/assets/640-1715420895017-9.Djk8ri6d.webp",os="/ProgramLearnNotes/assets/image-20240512204832006.Cx-vsj7k.png",cs="/ProgramLearnNotes/assets/image-20240512204934780.B8SN4P3N.png",ts="/ProgramLearnNotes/assets/image-20240512204956751.DqiS2-p9.png",is="/ProgramLearnNotes/assets/image-20240512205014796.CdINTpol.png",bs="/ProgramLearnNotes/assets/image-20240513171408973.WinmmnAV.png",ds="/ProgramLearnNotes/assets/image-20240513171421441.DnYfyAjX.png",ms="/ProgramLearnNotes/assets/640-48949.DCZwSLUh.webp",us="/ProgramLearnNotes/assets/640-1715765935373-176.Duqb4Ub2.webp",hs="/ProgramLearnNotes/assets/image-20240512210944045.CsMZ_NmI.png",ys="/ProgramLearnNotes/assets/image-20240512211001744.CCnEcmYj.png",ks="/ProgramLearnNotes/assets/image-20240512211017536.BZJaSJ72.png",gs="/ProgramLearnNotes/assets/image-20240512211032865.BJF9hz1l.png",Fs="/ProgramLearnNotes/assets/640-19849.C7on2zcF.webp",Bs="/ProgramLearnNotes/assets/640-1715589552645-26.D8oBHMay.webp",As="/ProgramLearnNotes/assets/640-1715589552645-27.D5L4BAnH.webp",Cs="/ProgramLearnNotes/assets/640-1715589552645-28.CfrtvrwB.webp",_s="/ProgramLearnNotes/assets/image-20240514154248748.BcIY33hc.png",Os=JSON.parse('{"title":"在线学习Docker平台","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/Docker应用/NAS自托管应用服务APP端.md","filePath":"Document/Docker/Docker应用/NAS自托管应用服务APP端.md","lastUpdated":1715766493000}'),fs={name:"Document/Docker/Docker应用/NAS自托管应用服务APP端.md"},qs=e(`<h1 id="在线学习docker平台" tabindex="-1">在线学习Docker平台 <a class="header-anchor" href="#在线学习docker平台" aria-label="Permalink to &quot;在线学习Docker平台&quot;">​</a></h1><h2 id="项目地址" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><p>GitHub：<a href="https://github.com/linuxserver/docker-webtop" target="_blank" rel="noreferrer">https://github.com/linuxserver/docker-webtop</a></p><h2 id="项目简介" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介" aria-label="Permalink to &quot;项目简介&quot;">​</a></h2><blockquote><p>Play-with-Docker 是一款基于云端的 Docker 浏览器 IDE，它提供了一个完整的 Docker 开发环境。</p></blockquote><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>一个免费的 Alpine Linux 虚拟机</span></span>
<span class="line"><span>Docker 命令行工具</span></span>
<span class="line"><span>Docker Compose 文件编辑器</span></span>
<span class="line"><span>实时日志查看器</span></span>
<span class="line"><span>文件浏览器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="部署安装" tabindex="-1">部署安装 <a class="header-anchor" href="#部署安装" aria-label="Permalink to &quot;部署安装&quot;">​</a></h2><h3 id="安装docker" tabindex="-1">安装Docker <a class="header-anchor" href="#安装docker" aria-label="Permalink to &quot;安装Docker&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>curl -sSL https://get.docker.com/ | sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="安装docker-compose" tabindex="-1">安装Docker-compose <a class="header-anchor" href="#安装docker-compose" aria-label="Permalink to &quot;安装Docker-compose&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>下载 Docker-Compose 二进制包</span></span>
<span class="line"><span>curl -L https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span></span>
<span class="line"><span></span></span>
<span class="line"><span>给文件增加执行权限</span></span>
<span class="line"><span>chmod +x /usr/local/bin/docker-compose</span></span>
<span class="line"><span></span></span>
<span class="line"><span>检查 Docker-Compose 版本</span></span>
<span class="line"><span>docker-compose -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="docker运行服务" tabindex="-1">Docker运行服务 <a class="header-anchor" href="#docker运行服务" aria-label="Permalink to &quot;Docker运行服务&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 克隆本地存储库</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> https://github.com/play-with-docker/play-with-docker</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> play-with-docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 确认 Docker 守护程序正在运行</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> hello-world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 加载 IPVS 内核模块。因为swarm是在dind中创建的，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 守护程序不会自动加载它</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> modprobe</span><span style="color:#98C379;"> xt_ipvs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 确保 Docker 守护程序以集群模式运行</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> swarm</span><span style="color:#98C379;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 获取最新的franela/dind镜像</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> pull</span><span style="color:#98C379;"> franela/dind</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 可选（使用go1.14）：将模块要求预取到vendor中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 以便容器内部不需要进行网络请求。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 模块缓存被保留在pwd和l2容器中，因此</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果省略此步骤，则下载只需一次</span></span>
<span class="line"><span style="color:#61AFEF;">go</span><span style="color:#98C379;"> mod</span><span style="color:#98C379;"> vendor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 启动PWD作为容器</span></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#98C379;"> up</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="web访问" tabindex="-1">Web访问 <a class="header-anchor" href="#web访问" aria-label="Permalink to &quot;Web访问&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>http://ip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="demo访问" tabindex="-1">Demo访问 <a class="header-anchor" href="#demo访问" aria-label="Permalink to &quot;Demo访问&quot;">​</a></h2><p><a href="https://labs.play-with-docker.com/" target="_blank" rel="noreferrer">https://labs.play-with-docker.com/</a></p><p>点击上图的&quot;ADD NEW INSTANCE&quot;来添加一个新的实例，会自动创建一个沙箱环境的虚拟机，这个虚拟机已经准备好了Docker环境，可以直接操作。</p><h1 id="nas-自托管应用服务-app-端" tabindex="-1">NAS 自托管应用服务 APP 端 <a class="header-anchor" href="#nas-自托管应用服务-app-端" aria-label="Permalink to &quot;NAS 自托管应用服务 APP 端&quot;">​</a></h1><p>常有朋友问某些项目有没有 APP，或者有没有好用的自托管服务带有 APP 的。</p><p>确实，很多时候自托管项目都是以 web 的形式进行的，但并不是每个人都能一直看着电脑，移动 app 很大程度上可以扩宽项目的使用范围和频率。</p><p>我花了几天时间，在前辈的经验上，部署并梳理出来<strong>20 款与 NAS 自托管应用关联性强的 app</strong>，这些 app 的功能强大而实用，一起折腾吧~</p><p>🌟Plex/Jellyfin/Emby 的 APP 这里就不介绍了，大家都很熟悉。</p><hr><h2 id="一、mt-photos" tabindex="-1">一、MT Photos <a class="header-anchor" href="#一、mt-photos" aria-label="Permalink to &quot;一、MT Photos&quot;">​</a></h2><p>🔻MT-Photos 称之为国内最强相册管理软件不为过，免费使用 1 个月，永久版售价 99 元。</p><p>该软件最能打的地方就在于 Clip 适配，通过中文关键词进行检索，准确率高，响应速度快，在体验感上完爆其它相册软件。</p><p>唯一的缺点应该就是不开源，担心项目组跑路导致无法登录系统的因素最大。</p><p><img src="`+p+'" alt="图片"></p><h2 id="二、immich" tabindex="-1">二、Immich <a class="header-anchor" href="#二、immich" aria-label="Permalink to &quot;二、Immich&quot;">​</a></h2><p>🔻 个人觉得是开源相册软件中完整度、成熟度最高的项目，对比 Photoprism，拥有多平台客户端、Clip、自动备份等功能，应有尽有。</p><p>缺点就是没有中文，对亚洲人脸的识别力度感觉不是特别好，Clip 需要自己调教一下。</p><p><img src="'+l+'" alt="图片"></p><hr><h2 id="三、photosync" tabindex="-1">三、PhotoSync <a class="header-anchor" href="#三、photosync" aria-label="Permalink to &quot;三、PhotoSync&quot;">​</a></h2><p>🔻 相册自动同步工具，收费项目，自动同步功能需要开通月票。</p><p>该项目除了传统的 webdav、移动端、pc 端等同步方式外，支持 photoprism 同步，支持各类数码相机同步，应该是照片同步软件中最成熟的了。</p><p>缺点还是收费，但是好在价格并不高，可以接受。</p><p><img src="'+r+'" alt="图片"></p><hr><h2 id="四、infuse" tabindex="-1">四、Infuse <a class="header-anchor" href="#四、infuse" aria-label="Permalink to &quot;四、Infuse&quot;">​</a></h2><p>🔻 移动端的播放好工具，拥有自动刮削功能。支持连接 plex、emby、jellyfin 等成熟的媒体服务端，也支持各类云盘。</p><p>缺点是收费过高，永久版需要 680 多的样子（要买建议土区），大部分人会选择海鲜市场碰运气。</p><p><img src="'+o+'" alt="图片"></p><hr><h2 id="五、vidhub" tabindex="-1">五、VidHub <a class="header-anchor" href="#五、vidhub" aria-label="Permalink to &quot;五、VidHub&quot;">​</a></h2><p>🔻 该项目最早应用于 macos 系统，用户体验一流，APP 端支持 smb、webdav、alist 等多种文件传输模式，目前已正式上架 appstore，后续可能会收费。</p><p>支持各类云盘，支持自动刮削。而且很有特色的是连接 emby、jellyfin、plex 等项目后，是单独的页面，与文件共享形成的媒体库互不冲突，这一点加上公益服的画可以产生很棒的分类效果。</p><p><img src="'+c+'" alt="图片"></p><hr><h2 id="六、音流" tabindex="-1">六、音流 <a class="header-anchor" href="#六、音流" aria-label="Permalink to &quot;六、音流&quot;">​</a></h2><p>🔻 最强移动端音乐播放器，颜值高、操作简易、功能完整。pro 版本需要收费。</p><p>支持 Navidrome、Jellyfin、Emby、DS audio、Subsonic 等服务端，补足了 Navidrome 在移动端体验不好的最后 100 米。</p><p><img src="'+t+'" alt="图片"></p><hr><h2 id="七、audiobookshelf" tabindex="-1">七、Audiobookshelf <a class="header-anchor" href="#七、audiobookshelf" aria-label="Permalink to &quot;七、Audiobookshelf&quot;">​</a></h2><p>🔻 有声书自托管项目 Audiobookshelf 的官方 APP，IOS 需要通过 TestFlight 下载，安卓版可以在网页下载。</p><p>体验感和网页一致，收听效果同步，体验感还是不错的。</p><p><img src="'+i+'" alt="图片"></p><hr><h2 id="八、bark" tabindex="-1">八、Bark <a class="header-anchor" href="#八、bark" aria-label="Permalink to &quot;八、Bark&quot;">​</a></h2><p>🔻 大名鼎鼎的 bark，IOS 端的消息通知 app，功能强大，提供了很多 API 接口供开源项目使用，最常使用的 webhook 服务。</p><p><img src="'+b+'" alt="图片"></p><hr><h2 id="九、gotify" tabindex="-1">九、Gotify <a class="header-anchor" href="#九、gotify" aria-label="Permalink to &quot;九、Gotify&quot;">​</a></h2><p>🔻 同样是消息通知类 APP，安卓端专用，功能和 bark 基本上是一致的，还有网页端通知。</p><p>APP 端一般都只是接受消息用，配置等还在 web 端使用。</p><p><img src="'+d+'" alt="图片"></p><hr><h2 id="十、bitwarden" tabindex="-1">十、Bitwarden <a class="header-anchor" href="#十、bitwarden" aria-label="Permalink to &quot;十、Bitwarden&quot;">​</a></h2><p>🔻 自托管密码管理软件客户端，兼容 Bitwarden 和 Vaultwarden 的服务端，在 WEB、手机上都是同步的，和手机、浏览器自带密码管理形成有效的互补。</p><p><img src="'+m+'" alt="图片"></p><hr><h2 id="十一、home-assistant" tabindex="-1">十一、Home Assistant <a class="header-anchor" href="#十一、home-assistant" aria-label="Permalink to &quot;十一、Home Assistant&quot;">​</a></h2><p>🔻 开源智能家居管理项目一哥，手机端功能和网页版基本一致，可以用手机添加、查看设备，查看电量使用等。</p><p><img src="'+u+'" alt="图片"></p><hr><h2 id="十二、可达阅读器" tabindex="-1">十二、可达阅读器 <a class="header-anchor" href="#十二、可达阅读器" aria-label="Permalink to &quot;十二、可达阅读器&quot;">​</a></h2><p>🔻 漫画阅读器，支持读取 webdav、smb、云盘进行查看，可以自动查找局域网内设备连接，支持本地传输、wifi 传输，体验感还是不错的。</p><p>内置了一些画质增强服务，并且可以预设不同漫画格式分类，在阅读体验上会有所区别。</p><p><img src="'+h+'" alt="图片"></p><hr><h2 id="十三、nextcloud" tabindex="-1">十三、Nextcloud <a class="header-anchor" href="#十三、nextcloud" aria-label="Permalink to &quot;十三、Nextcloud&quot;">​</a></h2><p>🔻 完整、专业的私有云解决方案，支持团队使用，支持不同用户区分存储管理，包括文件、相册等。功能成熟、强大，对于个人来说则不太实用。</p><p>nextcloud 官方还带有一款 note 工具，可以通过内置服务打开。</p><p><img src="'+y+'" alt="图片"></p><hr><h2 id="十四、nascab" tabindex="-1">十四、NasCab <a class="header-anchor" href="#十四、nascab" aria-label="Permalink to &quot;十四、NasCab&quot;">​</a></h2><p>🔻 简单存粹的一款轻 NAS 工具，winNAS 的好伙伴，也支持 docker 部署。</p><p>支持照片、文件、音乐、影视管理，但是刮削能服务需要开通会员。自带 DDNS 和内网穿透，DDNS 也需要会员才可以使用。</p><p>整体来说是一款比较良心的轻 NAS 服务，安装部署简单，很适合想体验 nas 的新手把玩一下。</p><p><img src="'+k+'" alt="图片"></p><hr><h2 id="十五、neoserver" tabindex="-1">十五、NeoServer <a class="header-anchor" href="#十五、neoserver" aria-label="Permalink to &quot;十五、NeoServer&quot;">​</a></h2><p>🔻 完全免费的服务器/容器管理软件，支持服务器面板、明细展示。</p><p>支持容器管理，SSH 管理，文件管理等。软件界面也很简洁、美观。</p><p><img src="'+g+'" alt="图片"></p><hr><h2 id="十六、transmission" tabindex="-1">十六、Transmission <a class="header-anchor" href="#十六、transmission" aria-label="Permalink to &quot;十六、Transmission&quot;">​</a></h2><p>🔻 一款种子管理软件，支持 qbitorrent、transmission 的管理，pro 版本大概 38 左右。</p><p>目前市面上比较美观的一款种子管理 app，有 macos 版本。可以比较轻松的筛选出需要的种子进行分类、处理。</p><p><img src="'+F+'" alt="图片"></p><hr><h2 id="十七、rustdest" tabindex="-1">十七、RustDest <a class="header-anchor" href="#十七、rustdest" aria-label="Permalink to &quot;十七、RustDest&quot;">​</a></h2><p>🔻 自托管的远程桌面软件，相比于向日葵、teamviwer 等传统项目，支持自托管只需一台中继服务器就可以跑满全部流量。</p><p><img src="'+B+'" alt="图片"></p><hr><h2 id="十八、moe-memos" tabindex="-1">十八、Moe Memos <a class="header-anchor" href="#十八、moe-memos" aria-label="Permalink to &quot;十八、Moe Memos&quot;">​</a></h2><p>🔻 闪记工具 Memos 的第三方客户端，支持 IOS、安卓。</p><p>唯一的缺点就是需要 https 才可以使用，部署起来会稍微麻烦一些。</p><p><img src="'+A+'" alt="图片"></p><hr><h2 id="十九、为知笔记" tabindex="-1">十九、为知笔记 <a class="header-anchor" href="#十九、为知笔记" aria-label="Permalink to &quot;十九、为知笔记&quot;">​</a></h2><p>🔻 曾经大名鼎鼎的为知笔记自托管版本，支持各种各样的笔记风格，自托管版本完全免费。</p><p><img src="'+C+'" alt="图片"></p><hr><h2 id="二十、派派助手" tabindex="-1">二十、派派助手 <a class="header-anchor" href="#二十、派派助手" aria-label="Permalink to &quot;二十、派派助手&quot;">​</a></h2><p>🔻 群晖 NAS 的三方管理软件，支持 IOS 和安卓客户端，只有收费去广告，其它功能完全免费。相比较于官方版本将很多层级提前，用户体验还是不错的。</p><p><img src="'+_+`" alt="图片"></p><hr><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>🔶 除了以上 app 外，各大 NAS 原厂也有很多原生 app。比如群晖的 DS 系列，威联通的 QXX 系列，铁威马的 TNAS mobie3，极空间、绿联、万由等也都有自己的官方 APP。</p><p>虽然各大原生 APP 在用户体验上各有不同，功能模块也不一定完整，但是都胜在原厂支持，功能稳定。</p><h1 id="portainer-将-docker、docker-compose、kubernetes-三者统一管理的平台" tabindex="-1">Portainer：将 Docker、Docker-compose、Kubernetes 三者统一管理的平台 <a class="header-anchor" href="#portainer-将-docker、docker-compose、kubernetes-三者统一管理的平台" aria-label="Permalink to &quot;Portainer：将 Docker、Docker-compose、Kubernetes 三者统一管理的平台&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/wFhELyQYoVmflWhUUI8rww" target="_blank" rel="noreferrer">快速搭建一款轻量级的 Docker 可视化管理系统 (qq.com)</a></p><p>自 2013 年发布以来，Docker 获得了广泛的关注和应用。在过去的近十年中，Docker 也逐渐改变了软件开发和部署的方式，至今采用容器已经成为很多企业软件标准的规范之一。从单机的 Docker，到单机编排的 Docker-compose，再到集群编排调度的 Docker-Swarm 和 Kubernetes，在这十年中容器的技术也发生了很多的变化，随着 Docker-Swarm 的落败，Kubernetes 成为容器编排标准。结合企业自身业务，很多企业目前面向不同的场景对容器的使用大概分为以下三种场景：</p><ul><li>**Docker 独立使用:**主要用于创建和管理单个容器。对于单个应用和测试应用部署非常便捷高效。</li><li>**Docker-compose 服务模式：**主要用于创建和管理多容器应用，可以轻松地启动、停止、重新部署整个服务。</li><li>**Kubernetes 集群调度：**用于管理和调度编排容器，更适合需要高度自动化和大规模容器管理和复杂应用的部署和管理。</li></ul><p>由此可见，无论单机 Docker 还是服务编排 Docker-compose，还是集群调度编排的 Kubernetes，在企业里面有着相应的应用场景，几种部署模式并存。那么随之而来的一个问题就是，企业如何统一管理零散这些环境。所以，今天给大家介绍一个能够统一管理这些的平台-Portainer。</p><h2 id="portainer-介绍" tabindex="-1">portainer 介绍 <a class="header-anchor" href="#portainer-介绍" aria-label="Permalink to &quot;portainer 介绍&quot;">​</a></h2><p>一句话介绍 Portainer：能够将 Docker，Docker-compose，Kubernetes 统一管理的平台，通过简单易用的 UI 界面，消除使用 CLI、编写 YAML 的复杂性。</p><h3 id="🏠-项目信息" tabindex="-1">🏠 项目信息 <a class="header-anchor" href="#🏠-项目信息" aria-label="Permalink to &quot;🏠 项目信息&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#Github地址</span></span>
<span class="line"><span>https://github.com/portainer/portainer</span></span>
<span class="line"><span>#官网地址</span></span>
<span class="line"><span>https://www.portainer.io/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="🚀-功能特性" tabindex="-1">🚀 功能特性 <a class="header-anchor" href="#🚀-功能特性" aria-label="Permalink to &quot;🚀 功能特性&quot;">​</a></h3><ul><li>提供直观界面使用 Docker 的全部功能，可以构建、发布和部署容器映像、管理网络和卷，以及配置跨集群的扩展。支持通过 RBAC、注册表管理和外部身份验证支持等功能。</li><li>直观的 Kubernetes 管理平台界面，允许管理员快速管理和维护集群，支持管理集群的服务帐户、角色和角色绑定，以及集群角色和集群角色绑定，而无需退出命令行。</li></ul><h3 id="🛠-系统架构" tabindex="-1">🛠 系统架构 <a class="header-anchor" href="#🛠-系统架构" aria-label="Permalink to &quot;🛠 系统架构&quot;">​</a></h3><p>Portainer 由两个部分组成：Portainer Server 和 Portainer Agent。Portainer Agent 部署到集需要管理的每个节点，并在 Portainer Server 中配置需要纳管环境的 Agent 连接信息。</p><p><img src="`+f+`" alt="image-20240512205456713"></p><h2 id="portainer-安装" tabindex="-1">portainer 安装 <a class="header-anchor" href="#portainer-安装" aria-label="Permalink to &quot;portainer 安装&quot;">​</a></h2><h3 id="server-端安装" tabindex="-1">Server 端安装 <a class="header-anchor" href="#server-端安装" aria-label="Permalink to &quot;Server 端安装&quot;">​</a></h3><p>首先，创建 Portainer Server 存储数据卷：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker volume create portainer_data</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，下载并运行 Portainer Server 容器：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最后，通过运行 docker ps 命令来检查 Portainer Server 容器是否已启动：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>root@server:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE                          COMMAND                  CREATED       STATUS      PORTS                                                                                  NAMES</span></span>
<span class="line"><span>de5b28eb2fa9   portainer/portainer-ce:latest  &quot;/portainer&quot;             2 weeks ago   Up 9 days   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp, 0.0.0.0:9443-&gt;9443/tcp, :::9443-&gt;9443/tcp   portainer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>启动完成后，通过打开浏览器访问 <a href="https://localhost:9443" target="_blank" rel="noreferrer">https://localhost:9443</a> 登录，并进行初始化创建账号：</p><p><img src="`+q+'" alt="image-20240512205548232"></p><h3 id="agent-端安装" tabindex="-1">Agent 端安装 <a class="header-anchor" href="#agent-端安装" aria-label="Permalink to &quot;Agent 端安装&quot;">​</a></h3><p>Portainer Agent 安装到需要纳管的 Docker 主机或者 Kubernetes 集群中。在界面选择创建环境：</p><p><img src="'+v+'" alt="image-20240512205612637"></p><p>选择需要添加的平台类型（灰色无法选择的为企业版本，我们不用管）：</p><p><img src="'+P+'" alt="image-20240512205626440"></p><h3 id="一、docker-主机接入管理" tabindex="-1">一、Docker 主机接入管理： <a class="header-anchor" href="#一、docker-主机接入管理" aria-label="Permalink to &quot;一、Docker 主机接入管理：&quot;">​</a></h3><p>在需要纳管的主机上运行以下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker run -d \\  -p 9001:9001 \\  --name portainer_agent \\  --restart=always \\  -v /var/run/docker.sock:/var/run/docker.sock \\  -v /var/lib/docker/volumes:/var/lib/docker/volumes \\  portainer/agent:2.19.4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>部署后，将主机信息填入下图中：</p><p><img src="'+D+'" alt="image-20240512205651815"></p><p>填入后，即可对这台 Docker 主机进行管理：</p><p><img src="'+x+`" alt="image-20240512205709817"></p><h3 id="二、kubernetes-集群接入管理" tabindex="-1">二、Kubernetes 集群接入管理： <a class="header-anchor" href="#二、kubernetes-集群接入管理" aria-label="Permalink to &quot;二、Kubernetes 集群接入管理：&quot;">​</a></h3><p>在需要纳管的 K8S 集群中，选择 NodePort 或者 load balancer 方式暴露端口，通过 Kubectl 上运行以下的命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#采用NodePort方式</span></span>
<span class="line"><span>kubectl apply -f https://downloads.portainer.io/ce2-19/portainer-agent-k8s-nodeport.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>部署后，将集群信息填入下图中：</p><p><img src="`+E+'" alt="image-20240512205741114"></p><p>填入后，即可对接入的 K8S 集群进行管理：</p><p><img src="'+w+'" alt="image-20240512205800424"></p><h2 id="最后-1" tabindex="-1">最后 <a class="header-anchor" href="#最后-1" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>Portainer 作为是一个可视化的 Docker 和 K8S 操作界面，功能非常全面，比如支持通过模板快速部署应用、容器镜像网络数据卷的基本操作、事件日志收集、集群和 SVC 等集中管理和操作、统一仓库管理、登录用户管理和权限控制等功能。这边就不进行一一说明和展示了，基本能满足中小型企业对容器和 k8s 管理的全部需求。唯一遗憾的是官方没有提供中文界面，但是有大神提供了中文部署版本的镜像。</p><h1 id="国产全中文的-docker-可视化管理面板『fast-os-docker』——portainer-的平替" tabindex="-1">国产全中文的 Docker 可视化管理面板『FAST OS DOCKER』——Portainer 的平替 <a class="header-anchor" href="#国产全中文的-docker-可视化管理面板『fast-os-docker』——portainer-的平替" aria-label="Permalink to &quot;国产全中文的 Docker 可视化管理面板『FAST OS DOCKER』——Portainer 的平替&quot;">​</a></h1><p>之前一直都在给新手小白推荐 Docker 可视化管理工具『Portainer』，作为一款可在 NAS 中运行的轻量级的应用，它提供了图形化界面，用于方便地管理 Docker 环境，让我们免去了命令行部署 Docker 容器的麻烦，非常适合我们这样的小白用户上手。</p><p><img src="'+S+'" alt="图片"></p><p>Portainer 说实话啥都好，就是这么多年了一直没有原生的支持中文，谁说国内大佬有汉化版，但是在某些细节上汉化的并不完整。虽说不影响使用，但是对于强迫症来说可能就有点难受了。</p><p>今天给小伙伴们分享一款来自于国人大佬开发的另一款 Docker 的图形化管理工具『FAST OS DOCKER』，100%原生中文支持，拥有 Portainer80%的功能，并且界面个人觉得更简洁好看，更适合国人审美。</p><h2 id="关于-fast-os-docker" tabindex="-1">关于 FAST OS DOCKER <a class="header-anchor" href="#关于-fast-os-docker" aria-label="Permalink to &quot;关于 FAST OS DOCKER&quot;">​</a></h2><p>👉<strong>简介：</strong></p><p>FAST OS DOCKER（简称“fast”）和 Portainer 一样，是一款 Docker 的图形化管理工具，可以为用户提供 docker 总览、本地容器管理、远程镜像拉取、服务器磁盘映射、服务器网络管理等功能，基本能满足中小型单位对容器管理的全部需求。</p><p><strong>👉 功能与亮点：</strong></p><ul><li>无需复杂的命令，全图形化操作，基本上只需要懂一点点的 Docker 常识就能轻松构建 docker 容器；</li><li>FAST OS DOCKER 界面直观简洁，对应的功能也是一目了然，那怕是新手小白也能快速上手；</li><li>FAST OS DOCKER 的后端语言是 GO，前端框架是 VUE，并且拥有全面的权限管理机制，安全性极高；</li><li>为防止服务器负载过高，进行了底层性能优化，比较适合 NAS 这种入门级服务器部署安装；</li><li>为方便用户安装，集成了 docker 镜像应用市场，可以直接快速安装和部署。</li></ul><p><strong>👉 镜像：</strong></p><p><img src="'+N+'" alt="图片"></p><p>🔺 镜像地址：<a href="https://hub.docker.com/r/wangbinxingkong/fast" target="_blank" rel="noreferrer">https://hub.docker.com/r/wangbinxingkong/fast</a></p><p>这个也是该容器的原作者发布地址，上次更新还是两个月前，不过看页面描述这个项目可能撑不下去了，至于我们能用多久还未知。不管怎么样，原作者是真正的用爱发电，在此对原作者的无私奉献表示感谢！</p><p>这里顺便的说一下，目前 dockerhub 官网因为某些原因已经打不开了，但是并不影响镜像的拉取，所以 docker run 命令还是可以正常使用的。</p><h2 id="fast-os-docker-的部署和安装" tabindex="-1">FAST OS DOCKER 的部署和安装 <a class="header-anchor" href="#fast-os-docker-的部署和安装" aria-label="Permalink to &quot;FAST OS DOCKER 的部署和安装&quot;">​</a></h2><p>今天使用的安装方式还是 SSH 终端部署，非常适合群晖威联通或者华硕这种传统的 NAS。至于 SSH 工具请自行解决，Putty，XShell，FinalShell 等都可以，我个人使用的是 FinalShell。</p><p><img src="'+L+'" alt="图片"></p><p>🔺 在正式部署之前我们还是新建一个文件夹用于存放 FAST OS DOCKER 容器的数据。在威联通的 Container 文件夹（威联通默认的 docker 文件夹）下面新建一个“fast”文件夹。</p><p><img src="'+O+'" alt="图片"></p><p>🔺 然后使用 SSH 连接工具连接到 NAS 之后先改用管理员模式登录，输入命令“ <strong>sudo -i</strong> ”回车，提示输入密码，密码就是我们 NAS 的登录密码，输入的时候不会有显示，输入完成后直接点回车即可。</p><p><img src="'+I+'" alt="图片"></p><p><img src="'+T+'" alt="图片"></p><p>🔺 威联通用户还需要在出现上图界面的时候输入“Q”和“Y”。</p><p><img src="'+z+'" alt="图片"></p><p>🔺 接着直接输入 FAST OS DOCKER 容器的 docker run 部署命令：</p><blockquote><p>docker run --name fastos --restart always -p 8081:8081 -p 8082:8082 -e TZ=&quot;Asia/Shanghai&quot; -d -v /var/run/docker.sock:/var/run/docker.sock -v /etc/docker/:/etc/docker/ -v /root/data:/fast/data -e FAST_STORE=<a href="http://8.210.124.47:8080" target="_blank" rel="noreferrer">http://8.210.124.47:8080</a> wangbinxingkong/fast:latest</p></blockquote><p>需要注意的是：</p><ul><li>-p 后面的主机端口（冒号前面的）请自行决定是否修改，不要和本地其它容器端口重复，需要说明的是 8081 端口对应的是 fast 网页端的打开端口；</li><li>-v /etc/docker/:/etc/docker/和 -v /root/data:/fast/data 两个冒号前面的路径修改成前面我们新建的“fast”文件夹的真实路径（请仔细观察我图片中的修改）</li></ul><p><img src="'+K+'" alt="图片"></p><p>🔺 回到威联通的 Container Station 可以看到 fast 已经部署成功。</p><h2 id="fast-os-docker-的使用展示" tabindex="-1">FAST OS DOCKER 的使用展示 <a class="header-anchor" href="#fast-os-docker-的使用展示" aria-label="Permalink to &quot;FAST OS DOCKER 的使用展示&quot;">​</a></h2><p>安装完成后在浏览器访问【NAS 本地 IP 地址:端口号 】即可打开 fast 的 web 页面，端口号是前面部署命令中 8081 对应的端口。</p><p><img src="'+U+'" alt="图片"></p><p>🔺 首次登录需要输入用户名和密码。默认账号和密码分别为：admin/888888。</p><p><img src="'+M+'" alt="图片"></p><p>🔺 打开之后就能看到主界面，看着是否有点小清新的感觉？界面语言默认就是中文，首先展示的便是总览页面，可以查看硬件配置，docker 文件安装根目录，服务器系统，容器数量，镜像数量，数据卷，网络环境等配置。</p><p><img src="'+G+'" alt="图片"></p><p>🔺 容器页面，和 Portainer 一样可以进行停止，重启，恢复，删除等一系列操作；当然也可以在这里选择创建容器。</p><p><img src="'+R+'" alt="图片"></p><p>🔺 创建容器的页面，设计风格和 Portainer 也类似，但是看起来更舒服一些。</p><p><img src="'+H+'" alt="图片"></p><p>🔺 镜像页面，有简单模式和高级模式，输入镜像名称就可以直接进行拉取，这个没什么好说的，基本操作。</p><p><img src="'+J+'" alt="图片"></p><p>🔺 数据卷页面，可以设置数据卷或添加数据卷。</p><p><img src="'+j+'" alt="图片"></p><p>🔺 进入网络页面，可以设置网络或添加网段。</p><p><img src="'+W+'" alt="图片"></p><p>🔺 最有意思的是它自带一个应用市场，里面有一些常用的 docker 项目。不过遗憾的是目前它就只有这 8 个，显得有些鸡肋~。</p><p><img src="'+V+'" alt="图片"></p><p>🔺 我们试着在它的应用市场搭建一个 Docker 容器吧，比如前几天分享的 NAS 上的导航页『Heimdall』，点开安装之后再点击“编辑”。</p><p><img src="'+$+'" alt="图片"></p><p>🔺 然后再容器编辑页面根据自己的需求更改配置。我更改的地方就上面三个地方，完成之后点击“确定”。</p><p><img src="'+X+'" alt="图片"></p><p>🔺 回到这个页面，点击“运行”。</p><p><img src="'+Y+'" alt="图片"></p><p>🔺 创建容器中。</p><p><img src="'+Q+'" alt="图片"></p><p>🔺 创建完成！</p><p><img src="'+Z+`" alt="图片"></p><p>🔺 顺利打开，说明创建的 Docker 容器没有问题！整个过程我就在容器页面设置了一下，剩下的点点鼠标就完成了部署，确实非常简单。</p><p>通过我这几天的使用，FAST OS DOCKER 给我的映像还是不错的。总体而言，它的操作逻辑和 Portainer 几乎完全一样，并且兼顾了 Portainer 的大部分功能。相比 Portainer，因为它是国人开发，在界面上更适合国人使用。要说我个人日常使用区别，就是它目前不支持 Portainer 的堆栈功能，也就是不支持 docker - compose，其实这个对于很多普通玩家并不是刚需对吧？所以说我还是很推荐新手朋友试试这个容器，真的还不错~</p><h1 id="dockge-美观易用的-docker-compose-管理工具" tabindex="-1">Dockge：美观易用的 Docker Compose 管理工具 <a class="header-anchor" href="#dockge-美观易用的-docker-compose-管理工具" aria-label="Permalink to &quot;Dockge：美观易用的 Docker Compose 管理工具&quot;">​</a></h1><p>不知道大家有没有发现，我平时介绍项目的安装方法时，通常都会使用 Docker 或 Docker Compse。通过容器来部署无疑是最简单的，不过随着调研的项目越来越多，也暴露了管理不便的问题。如果你也遇到了类似的麻烦，不妨试试这款管理工具吧。</p><h2 id="_1-项目介绍" tabindex="-1">1. 项目介绍 <a class="header-anchor" href="#_1-项目介绍" aria-label="Permalink to &quot;1. 项目介绍&quot;">​</a></h2><p><a href="https://github.com/louislam/dockge" target="_blank" rel="noreferrer">Dockge</a> 是一个美观、易用的 Docker Compose 管理平台。该项目提供了一个 Web 界面，用于管理 docker-compose.yaml 文件，支持交互式编辑 compose.yaml 文件、更新、启动、停止、重启、删除等操作。本文将介绍 Dockge 的安装和使用方法。</p><h2 id="_2-下载安装" tabindex="-1">2. 下载安装 <a class="header-anchor" href="#_2-下载安装" aria-label="Permalink to &quot;2. 下载安装&quot;">​</a></h2><p>Dockge 推荐使用 Docker Compose 来安装。安装好 Docker (20+) 后，运行以下命令来启动服务：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建并进入目录</span></span>
<span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> /opt/stacks</span><span style="color:#98C379;"> /opt/dockge</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> /opt/dockge</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 下载 compose.yaml</span></span>
<span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#98C379;"> https://raw.githubusercontent.com/louislam/dockge/master/compose.yaml</span><span style="color:#D19A66;"> --output</span><span style="color:#98C379;"> compose.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 启动服务</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> compose</span><span style="color:#98C379;"> up</span><span style="color:#D19A66;"> -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>服务启动后，在浏览器中输入 <code>http://&lt;your-ip&gt;:5001</code> 来访问。</p><h2 id="_3-使用说明" tabindex="-1">3. 使用说明 <a class="header-anchor" href="#_3-使用说明" aria-label="Permalink to &quot;3. 使用说明&quot;">​</a></h2><p>本章将介绍 Dockge 的基本用法，包含：</p><blockquote><ol><li>创建账号</li><li>新建 Compose</li></ol></blockquote><h3 id="_3-1-创建账号" tabindex="-1">3.1 创建账号 <a class="header-anchor" href="#_3-1-创建账号" aria-label="Permalink to &quot;3.1 创建账号&quot;">​</a></h3><h3 id="初次使用需要创建一个管理员账号" tabindex="-1">初次使用需要创建一个管理员账号： <a class="header-anchor" href="#初次使用需要创建一个管理员账号" aria-label="Permalink to &quot;初次使用需要创建一个管理员账号：&quot;">​</a></h3><p><img src="`+ss+'" alt="图片"></p><p>创建完成后，就可以登录 dockge 了，其界面如下：</p><p><img src="'+as+'" alt="图片"></p><h3 id="_3-2-新建-compose" tabindex="-1">3.2 新建 Compose <a class="header-anchor" href="#_3-2-新建-compose" aria-label="Permalink to &quot;3.2 新建 Compose&quot;">​</a></h3><p>接下来，我打算新建一个站点监控应用：Uptime Kuma。</p><p>要新建 Compose，只需点击左上角的 + Compose 按钮，把 docker-compose.yaml 的内容复制到文本框即可。</p><p>不过在<a href="http://mp.weixin.qq.com/s?__biz=MzAwNzkxMjc1Ng==&amp;mid=2247485139&amp;idx=1&amp;sn=8a895b79144ad868c8fbe4b745b97244&amp;chksm=9b77aa88ac00239eaff49a2906a1e1182cfa14594ee03a8618012d6ccc1c49a6e236814cd1dd&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">旧文</a>中，我是用 Docker 启动的应用，这里就选择将其转为 Compse 格式：</p><p><img src="'+ns+'" alt="图片"></p><p>转为 Compose 格式后，填写堆栈名称，然后部署：</p><p><img src="'+es+'" alt="图片"></p><p>部署期间可以看到拉取镜像的进度以及容器启动的日志：</p><p><img src="'+ps+'" alt="图片"></p><p>点击容器组右侧的 &gt;_Bash 按钮，可以直接进入容器内部：</p><p><img src="'+ls+'" alt="图片"></p><p>现在试试访问 Uptime Kuma，页面显示正常：</p><p><img src="'+rs+`" alt="图片"></p><p>之后就可以通过 Dockge 页面来管理 Uptime Kuma 应用，包括更新、重启以及删除。</p><h2 id="_4-写在最后" tabindex="-1">4. 写在最后 <a class="header-anchor" href="#_4-写在最后" aria-label="Permalink to &quot;4. 写在最后&quot;">​</a></h2><p>Dockge 作为一款可视化容器管理工具，界面美观，易于使用，给我的体验非常好。但作为用户，我们也需要明确 Dockge 其实管理的是 Docker Compose，因此其功能也是有限的。</p><h1 id="amprobe-开源可视化-docker-容器管理工具" tabindex="-1">amprobe：开源可视化 Docker 容器管理工具 <a class="header-anchor" href="#amprobe-开源可视化-docker-容器管理工具" aria-label="Permalink to &quot;amprobe：开源可视化 Docker 容器管理工具&quot;">​</a></h1><h2 id="项目地址-1" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址-1" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><p>GitHub：<a href="https://github.com/amuluze/amprobe" target="_blank" rel="noreferrer">https://github.com/amuluze/amprobe</a></p><h2 id="项目简介-1" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介-1" aria-label="Permalink to &quot;项目简介&quot;">​</a></h2><blockquote><p>Docker 容器监控与控制面板项目。</p></blockquote><h2 id="功能-1" tabindex="-1">功能 <a class="header-anchor" href="#功能-1" aria-label="Permalink to &quot;功能&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">监控</span><span style="color:#98C379;"> CPU、内存、磁盘、网络</span></span>
<span class="line"><span style="color:#61AFEF;">监控Docker容器状态、CPU、内存</span></span>
<span class="line"><span style="color:#61AFEF;">查看</span><span style="color:#98C379;"> Docker</span><span style="color:#98C379;"> 日志，支持日志下载</span></span>
<span class="line"><span style="color:#61AFEF;">管理员用户提供简单的</span><span style="color:#98C379;"> Docker</span><span style="color:#98C379;"> 容器、镜像运维操作</span></span>
<span class="line"><span style="color:#61AFEF;">操作日志记录</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="部署安装-1" tabindex="-1">部署安装 <a class="header-anchor" href="#部署安装-1" aria-label="Permalink to &quot;部署安装&quot;">​</a></h2><h3 id="安装-docker" tabindex="-1">安装 Docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 Docker&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#D19A66;"> -sSL</span><span style="color:#98C379;"> https://get.docker.com/</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="安装-docker-compose" tabindex="-1">安装 Docker-compose <a class="header-anchor" href="#安装-docker-compose" aria-label="Permalink to &quot;安装 Docker-compose&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">下载</span><span style="color:#98C379;"> Docker-Compose</span><span style="color:#98C379;"> 二进制包</span></span>
<span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#D19A66;"> -L</span><span style="color:#98C379;"> https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">给文件增加执行权限</span></span>
<span class="line"><span style="color:#61AFEF;">chmod</span><span style="color:#98C379;"> +x</span><span style="color:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">检查</span><span style="color:#98C379;"> Docker-Compose</span><span style="color:#98C379;"> 版本</span></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#D19A66;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="配置内容" tabindex="-1">配置内容 <a class="header-anchor" href="#配置内容" aria-label="Permalink to &quot;配置内容&quot;">​</a></h3><h4 id="init-yaml" tabindex="-1">init.yaml <a class="header-anchor" href="#init-yaml" aria-label="Permalink to &quot;init.yaml&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">users:</span></span>
<span class="line"><span style="color:#61AFEF;">  -</span><span style="color:#98C379;"> username:</span><span style="color:#98C379;"> cgakki</span><span style="color:#7F848E;font-style:italic;">  # 管理员，拥有启停容器的权限，非管理员则没有</span></span>
<span class="line"><span style="color:#61AFEF;">    password:</span><span style="color:#D19A66;"> 666666</span></span>
<span class="line"><span style="color:#61AFEF;">    status:</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">    is_admin:</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">  -</span><span style="color:#98C379;"> username:</span><span style="color:#98C379;"> amprobe</span></span>
<span class="line"><span style="color:#61AFEF;">    password:</span><span style="color:#D19A66;"> 666666</span></span>
<span class="line"><span style="color:#61AFEF;">    status:</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">    is_admin:</span><span style="color:#D19A66;"> 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="config-toml" tabindex="-1">config.toml <a class="header-anchor" href="#config-toml" aria-label="Permalink to &quot;config.toml&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[Fiber]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># http监听地址</span></span>
<span class="line"><span style="color:#61AFEF;">Host</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;0.0.0.0&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># http监听端口</span></span>
<span class="line"><span style="color:#61AFEF;">Port</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 8000</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># http优雅关闭等待超时时长(单位秒)</span></span>
<span class="line"><span style="color:#61AFEF;">ShutdownTimeout</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 30</span></span>
<span class="line"><span style="color:#61AFEF;">SeverHeader</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;probe&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">AppName</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;probe&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">Prefork</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 数据库文件存放位置的配置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 需要监控的磁盘设备配置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 定时任务执行间隔配置</span></span>
<span class="line"><span style="color:#ABB2BF;">[Gorm]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 是否开启调试模式</span></span>
<span class="line"><span style="color:#61AFEF;">Debug</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 数据库类型(目前支持的数据库类型：postgres)</span></span>
<span class="line"><span style="color:#61AFEF;">DBType</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;sqlite&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置连接可以重用的最长时间(单位：秒)</span></span>
<span class="line"><span style="color:#61AFEF;">MaxLifetime</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 7200</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置数据库的最大打开连接数</span></span>
<span class="line"><span style="color:#61AFEF;">MaxOpenConns</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 150</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置空闲连接池中的最大连接数</span></span>
<span class="line"><span style="color:#61AFEF;">MaxIdleConns</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 50</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 数据库表名前缀</span></span>
<span class="line"><span style="color:#61AFEF;">TablePrefix</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;s_&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 是否启用自动映射数据库表结构</span></span>
<span class="line"><span style="color:#61AFEF;">EnableAutoMigrate</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[DB]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 连接地址</span></span>
<span class="line"><span style="color:#61AFEF;">Host</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 连接端口</span></span>
<span class="line"><span style="color:#61AFEF;">Port</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 用户名</span></span>
<span class="line"><span style="color:#61AFEF;">User</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 密码</span></span>
<span class="line"><span style="color:#61AFEF;">Password</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 数据库</span></span>
<span class="line"><span style="color:#61AFEF;">DBName</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;/app/probe&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># SSL模式</span></span>
<span class="line"><span style="color:#61AFEF;">SSLMode</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Disk]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 主机监控数据的采集频率</span></span>
<span class="line"><span style="color:#61AFEF;">Devices</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;vda1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;vda2&quot;,</span><span style="color:#98C379;"> &quot;vda3&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Ethernet]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 需要监控的网口，可以通过 ifconfig 命令查看</span></span>
<span class="line"><span style="color:#61AFEF;">Names</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;eth0&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Task]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 定时任务采样间隔，单位 s</span></span>
<span class="line"><span style="color:#61AFEF;">Interval</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 60</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Logger]</span></span>
<span class="line"><span style="color:#61AFEF;">File</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;/app/probe.log&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">Level</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;debug&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">RotationTime</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;1&quot;</span><span style="color:#7F848E;font-style:italic;">  # 每天切分一个日志文件</span></span>
<span class="line"><span style="color:#61AFEF;">MaxAge</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;7&quot;</span><span style="color:#7F848E;font-style:italic;">        # 最多保留 7 天的日志</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Auth]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 是否启用</span></span>
<span class="line"><span style="color:#61AFEF;">Enable</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 签名方式(支持：HS512/HS384/HS512)</span></span>
<span class="line"><span style="color:#61AFEF;">SigningMethod</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;HS512&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 签名key</span></span>
<span class="line"><span style="color:#61AFEF;">SigningKey</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;amprobe&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 过期时间（单位秒）</span></span>
<span class="line"><span style="color:#61AFEF;">Expired</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 7200</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># key 前缀</span></span>
<span class="line"><span style="color:#61AFEF;">Prefix</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;auth_&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[InitData]</span></span>
<span class="line"><span style="color:#61AFEF;">Enable</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">InitConfigFile</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;/app/configs/init.yaml&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h4 id="nginx-conf" tabindex="-1">nginx.conf <a class="header-anchor" href="#nginx-conf" aria-label="Permalink to &quot;nginx.conf&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">worker_processes</span><span style="color:#D19A66;">  1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">daemon</span><span style="color:#98C379;"> off</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">error_log</span><span style="color:#98C379;">  /var/log/nginx/error.log</span><span style="color:#98C379;"> warn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">pid</span><span style="color:#98C379;">        /var/run/nginx.pid</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">events</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    worker_connections</span><span style="color:#D19A66;">  1024</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">http</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    include</span><span style="color:#98C379;">       /etc/nginx/mime.types</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    default_type</span><span style="color:#98C379;">  application/octet-stream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    sendfile</span><span style="color:#98C379;">        on</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    keepalive_timeout</span><span style="color:#D19A66;">  65</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    server</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        listen</span><span style="color:#D19A66;">       80</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;"># 可修改为实际需要使用的端口</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        # server_name  amprobe.amuluze.com; # 服务器地址或绑定域名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        location</span><span style="color:#98C379;"> /</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            root</span><span style="color:#98C379;">   /usr/share/nginx/html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            index</span><span style="color:#98C379;">  index.html</span><span style="color:#98C379;"> index.htm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            try_files</span><span style="color:#E06C75;"> $uri</span><span style="color:#E06C75;"> $uri</span><span style="color:#98C379;">/</span><span style="color:#98C379;"> /index.html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        location</span><span style="color:#98C379;"> /api/</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            rewrite</span><span style="color:#98C379;"> ^/api/</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">.</span><span style="color:#98C379;">*</span><span style="color:#ABB2BF;">)$ </span><span style="color:#98C379;">/</span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#98C379;"> break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_pass</span><span style="color:#98C379;"> http://127.0.0.1:8000/</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">#跨域转发路由地址</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_redirect</span><span style="color:#98C379;"> off</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_set_header</span><span style="color:#98C379;"> Host</span><span style="color:#E06C75;"> $host</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_set_header</span><span style="color:#98C379;"> X-Real-IP</span><span style="color:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_set_header</span><span style="color:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        location</span><span style="color:#98C379;"> /ws/</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            # rewrite ^/wsUrl/(.*)$ /$1 break; #拦截标识去除</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_pass</span><span style="color:#98C379;"> http://127.0.0.1:8000/ws/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">            proxy_http_version</span><span style="color:#D19A66;"> 1.1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">            proxy_set_header</span><span style="color:#98C379;"> Upgrade</span><span style="color:#E06C75;"> $http_upgrade</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            proxy_set_header</span><span style="color:#98C379;"> Connection</span><span style="color:#98C379;"> &quot;upgrade&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        # 错误页配置</span></span>
<span class="line"><span style="color:#61AFEF;">        error_page</span><span style="color:#D19A66;">   500</span><span style="color:#D19A66;"> 502</span><span style="color:#D19A66;"> 503</span><span style="color:#D19A66;"> 504</span><span style="color:#98C379;">  /50x.html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        location</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> /50x.html</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            root</span><span style="color:#98C379;">   /usr/share/nginx/html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h3 id="docker-compose-运行服务" tabindex="-1">Docker-compose 运行服务 <a class="header-anchor" href="#docker-compose-运行服务" aria-label="Permalink to &quot;Docker-compose 运行服务&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vim</span><span style="color:#98C379;"> docker-compose.yml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">version:</span><span style="color:#98C379;"> &#39;3&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">services:</span></span>
<span class="line"><span style="color:#61AFEF;">  amprobe:</span></span>
<span class="line"><span style="color:#61AFEF;">    image:</span><span style="color:#98C379;"> amuluze/amprobe:v1.3.3</span></span>
<span class="line"><span style="color:#61AFEF;">    container_name:</span><span style="color:#98C379;"> amprobe</span></span>
<span class="line"><span style="color:#61AFEF;">    network_mode:</span><span style="color:#98C379;"> &quot;host&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">    restart:</span><span style="color:#98C379;"> always</span></span>
<span class="line"><span style="color:#61AFEF;">    volumes:</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /proc:/host/proc:ro</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /sys:/host/sys:ro</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> /dev:/host/dev:ro</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./config.toml:/app/configs/config.toml</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./init.yaml:/app/configs/init.yaml</span></span>
<span class="line"><span style="color:#61AFEF;">      -</span><span style="color:#98C379;"> ./nginx.conf:/etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">docker-compose</span><span style="color:#98C379;"> up</span><span style="color:#D19A66;"> -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="demo-访问" tabindex="-1">Demo 访问 <a class="header-anchor" href="#demo-访问" aria-label="Permalink to &quot;Demo 访问&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">http://ip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="dockerui-docker-可视化管理工具" tabindex="-1">DockerUI：Docker 可视化管理工具 <a class="header-anchor" href="#dockerui-docker-可视化管理工具" aria-label="Permalink to &quot;DockerUI：Docker 可视化管理工具&quot;">​</a></h1><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p>gohutool/docker.ui</p><p>GitHub 地址：<a href="https://github.com/gohutool/docker.ui" target="_blank" rel="noreferrer">https://github.com/gohutool/docker.ui</a></p><p>joinsunsoft/docker.ui - Docker Image | Docker Hub</p><p>地址：<a href="https://hub.docker.com/r/joinsunsoft/docker.ui" target="_blank" rel="noreferrer">https://hub.docker.com/r/joinsunsoft/docker.ui</a></p><h2 id="什么是-dockerui" tabindex="-1">什么是 DockerUI ？ <a class="header-anchor" href="#什么是-dockerui" aria-label="Permalink to &quot;什么是 DockerUI ？&quot;">​</a></h2><blockquote><p><code>DockerUI</code> 是一款开源的、强大的、轻量级的 <code>Docker</code> 管理工具。<code>DockerUI</code> 覆盖了 <code>docker cli</code> 命令行 <code>95%</code> 以上的命令功能，通过可视化的 <code>Web</code> 界面操作，可以非常方便、轻松进行 <code>docker</code> 环境和 <code>docker swarm</code> 集群环境的管理和维护功能，方便不熟悉 <code>docker</code> 指令的用户更快地进入 <code>docker</code> 世界。</p></blockquote><p>这是国内一家公司开发的，原生的中文界面，对国内用户比较友好，如果用不惯 <code>Portainer</code> 可以试试这款</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>与容器相关的应用，都需要绑定挂载 <code>/var/run/docker.sock</code> ，包括我们之前安装的 <code>portainer</code>、<code>watchtower</code>，<code>Glances</code>，<code>Netdata</code> 等。</p><h3 id="什么是-var-run-docker-sock" tabindex="-1">什么是 <code>/var/run/docker.sock</code> ? <a class="header-anchor" href="#什么是-var-run-docker-sock" aria-label="Permalink to &quot;什么是 \`/var/run/docker.sock\` ?&quot;">​</a></h3><blockquote><p><code>/var/run/docker.sock</code> 是 <code>Docker API</code> 的主要入口，简单地说，它是 <code>Docker</code> 守护进程（<code>Docker daemon</code>）默认监听的 <code>Unix</code> 域套接字（<code>Unix domain socket</code>），容器中的进程可以通过它与 <code>Docker</code> 守护进程进行通信。</p></blockquote><p>但是群晖的 <code>Docker</code> 管理器并不支持挂载 <code>/var/run/docker.sock</code> 文件，所以这次我们需用命令行来安装</p><h3 id="docker-cli-安装" tabindex="-1">docker cli 安装 <a class="header-anchor" href="#docker-cli-安装" aria-label="Permalink to &quot;docker cli 安装&quot;">​</a></h3><p>在群晖上以 Docker 方式安装。</p><blockquote><p>本文写作时， <code>latest</code> 版本对应为 <code>1.0.1</code>；</p></blockquote><p><img src="`+os+`" alt="image-20240512204832006"></p><p>如果你熟悉命令行，可能用 <code>docker cli</code> 更快捷</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># 运行容器</span></span>
<span class="line"><span>docker run -d \\</span></span>
<span class="line"><span>   --restart unless-stopped \\</span></span>
<span class="line"><span>   --name docker.ui \\</span></span>
<span class="line"><span>   -p 8999:8999 \\</span></span>
<span class="line"><span>   -v /var/run/docker.sock:/var/run/docker.sock \\</span></span>
<span class="line"><span>   joinsunsoft/docker.ui</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="docker-compose-安装" tabindex="-1">docker-compose 安装 <a class="header-anchor" href="#docker-compose-安装" aria-label="Permalink to &quot;docker-compose 安装&quot;">​</a></h3><p>也可以用 <code>docker-compose</code> 安装，将下面的内容保存为 <code>docker-compose.yml</code> 文件</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>version: &quot;3&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  dockge:</span></span>
<span class="line"><span>    image: joinsunsoft/docker.ui</span></span>
<span class="line"><span>    container_name: dockerui</span></span>
<span class="line"><span>    restart: unless-stopped</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 8999:8999</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - /var/run/docker.sock:/var/run/docker.sock</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>然后执行下面的命令</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># 新建文件夹 docker.ui</span></span>
<span class="line"><span>mkdir -p /volume1/docker/docker.ui</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 进入 docker.ui 目录</span></span>
<span class="line"><span>cd /volume1/docker/docker.ui</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将 docker-compose.yml 放入当前目录</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 一键启动</span></span>
<span class="line"><span>docker-compose up -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h2><p>在浏览器中输入 <code>http://群晖IP:8999</code> 就能看到登录界面</p><p>默认的用户名：<code>ginghan</code> ，密码：<code>123456</code></p><h2 id="遇到的问题" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h2><h3 id="卡在首界面" tabindex="-1">卡在首界面 <a class="header-anchor" href="#卡在首界面" aria-label="Permalink to &quot;卡在首界面&quot;">​</a></h3><p>第一次运行时，卡在这个界面</p><p><img src="`+cs+'" alt="image-20240512204934780"></p><p>从日志看，显示了下面的错误</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker.ui</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">2023/12/14</span><span style="color:#98C379;"> 09:13:09</span><span style="color:#D19A66;"> 33.289</span><span style="color:#7F848E;font-style:italic;"> #0000000600000002 - 172.30.0.2:8999&lt;-&gt;192.168.0.197:41652 - GET http://192.168.0.197:8999/html/index - cannot open file &quot;/app/./html/html/index&quot;: open /app/./html/html/index: no such file or directory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>重装后未再复现，原因不明</p><h3 id="载入容器慢" tabindex="-1">载入容器慢 <a class="header-anchor" href="#载入容器慢" aria-label="Permalink to &quot;载入容器慢&quot;">​</a></h3><p>加载镜像和数据卷很快，但是加载容器就特别慢</p><p><img src="'+ts+'" alt="image-20240512204956751"></p><p>就算老苏的容器多（其实也就 <code>46</code> 个，在运行的只有 <code>36</code> 个），也不需要加载个几分钟吧，看来还是有很大的改进空间的</p><p><img src="'+is+`" alt="image-20240512205014796"></p><h1 id="dozzle-简化容器监控和调试的日志查看工具" tabindex="-1">Dozzle：简化容器监控和调试的日志查看工具 <a class="header-anchor" href="#dozzle-简化容器监控和调试的日志查看工具" aria-label="Permalink to &quot;Dozzle：简化容器监控和调试的日志查看工具&quot;">​</a></h1><blockquote><p>Dozzle是由Docker OSS赞助的开源项目，它是一个日志查看工具，旨在简化容器的监控和调试过程。</p></blockquote><p>作为一个轻量级的基于Web的应用程序，Dozzle通过直观的用户界面提供实时的日志流式传输、过滤和搜索功能。用户可以快速方便地访问其Docker容器生成的日志，使其成为在Docker环境中进行调试和故障排除的重要工具。</p><p>Dozzle支持智能着色的JSON日志，并且易于安装和配置，使其成为开发人员和系统管理员寻找高效且用户友好的日志查看工具的理想选择。该工具以MIT许可证发布，并由其开发者Amir Raminfar积极维护。</p><h2 id="功能特点" tabindex="-1">功能特点 <a class="header-anchor" href="#功能特点" aria-label="Permalink to &quot;功能特点&quot;">​</a></h2><ol><li>实时日志流式传输：Dozzle提供了实时的日志流式传输功能，可以即时查看最新的日志输出，帮助开发人员监控应用程序的运行状态。</li><li>日志过滤：Dozzle支持灵活的日志过滤功能，允许开发人员根据关键字、时间范围或其他自定义条件来筛选日志条目，使其能够专注于与问题相关的日志。</li><li>日志搜索：Dozzle提供了方便的日志搜索功能，开发人员可以使用关键字快速定位特定的日志条目，无需手动浏览整个日志文件。</li><li>支持JSON日志：Dozzle对JSON格式的日志提供了支持，能够正确解析和显示JSON日志内容，使开发人员更方便地分析和理解日志。</li><li>智能着色：Dozzle具有智能的颜色编码功能，可以根据日志内容的类型或重要性，以不同的颜色区分和突出显示日志条目，提供更直观的日志分析体验。</li><li>简单安装和配置：Dozzle的安装和配置非常简单，可以轻松集成到现有的Docker环境中，并通过一些简单的配置选项进行个性化设置。</li><li>轻量级且易于使用：Dozzle是一个轻量级的日志查看工具，具有直观的用户界面，使开发人员和系统管理员能够快速访问和分析容器生成的日志，无需复杂的操作和学习曲线。</li><li>MIT许可证：Dozzle以MIT许可证发布，这意味着它是开源的，用户可以自由地使用、修改和分发该工具。</li></ol><h2 id="搭建使用" tabindex="-1">搭建使用 <a class="header-anchor" href="#搭建使用" aria-label="Permalink to &quot;搭建使用&quot;">​</a></h2><p>使用docker-compose可以快速的运行并使用此工具：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#E06C75;">services</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  dozzle</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    container_name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">dozzle</span></span>
<span class="line"><span style="color:#E06C75;">    image</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">amir20/dozzle:latest</span></span>
<span class="line"><span style="color:#E06C75;">    volumes</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="color:#E06C75;">    ports</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">9999:8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+bs+'" alt="image-20240513171408973"></p><p><img src="'+ds+`" alt="image-20240513171421441"></p><h1 id="dashy-强大又炫酷的个人面板" tabindex="-1">Dashy：强大又炫酷的个人面板 <a class="header-anchor" href="#dashy-强大又炫酷的个人面板" aria-label="Permalink to &quot;Dashy：强大又炫酷的个人面板&quot;">​</a></h1><h2 id="系统介绍" tabindex="-1">系统介绍 <a class="header-anchor" href="#系统介绍" aria-label="Permalink to &quot;系统介绍&quot;">​</a></h2><p>Dashy是一个用于创建个人仪表板或导航页面的工具，允许用户将多个网站或服务整合到一个简洁的界面中，方便快速访问。</p><h3 id="功能特点-1" tabindex="-1">| 功能特点 <a class="header-anchor" href="#功能特点-1" aria-label="Permalink to &quot;| 功能特点&quot;">​</a></h3><ul><li>📃 支持多页面</li><li>🚦 每个应用程序/链接的实时状态监控</li><li>📊 使用小部件显示来自自托管服务的信息和动态内容</li><li>🔎 按名称、域名或标签进行即时搜索 + 可自定义的热键和键盘快捷键</li><li>🎨 许多内置颜色主题，带有 UI 颜色编辑器并支持自定义 CSS</li><li>🧸 许多图标选项 - Font-Awesome、homelab 图标、自动获取 Favicon、图像、表情符号等。</li><li>💂 具有多用户访问、可配置权限和 SSO 支持的可选身份验证</li><li>🌎 多语言支持，包括 10 多种人工翻译语言</li><li>☁ 提供可选的、加密的、免费的异地云备份和恢复功能</li><li>💼 工作区视图，可同时在多个应用程序之间轻松切换</li><li>🛩️ 最小视图，用作快速加载的浏览器起始页</li><li>🖱️ 选择应用程序启动方式：新选项卡、同一选项卡、剪贴板、弹出模式或在工作区视图中打开</li><li>📏 可定制的布局、大小、文本、组件可见性、排序顺序、行为等。</li><li>🖼️ 全屏背景图像、自定义导航栏链接、HTML、标题等选项。</li><li>🚀 使用 Docker、裸机或一键式云部署即可轻松设置</li><li>⚙️ 基于 YAML 的简单单文件配置，以及通过 UI 配置应用程序的选项</li><li>✨ 正在积极开发中，定期添加改进和新功能</li><li>🤏 小捆绑包大小、完全响应式 UI 和用于基本离线访问的 PWA</li><li>🆓 100% 免费和开源</li><li>🔐 高度重视隐私</li></ul><p>如需了解更多信息，可以访问其官方网站或查阅相关的技术文档。</p><blockquote><p>Docker镜像</p><p><a href="https://hub.docker.com/r/lissy93/dashy" target="_blank" rel="noreferrer">https://hub.docker.com/r/lissy93/dashy</a></p></blockquote><blockquote><p>官方GitHub</p><p><a href="https://github.com/Lissy93/dashy" target="_blank" rel="noreferrer">https://github.com/Lissy93/dashy</a></p></blockquote><blockquote><p>官方网站</p><p><a href="https://dashy.to/" target="_blank" rel="noreferrer">https://dashy.to/</a></p></blockquote><blockquote><p>官方文档</p><p><a href="https://dashy.to/docs/" target="_blank" rel="noreferrer">https://dashy.to/docs/</a></p></blockquote><blockquote><p>官方Demo</p><p><a href="https://demo.dashy.to/" target="_blank" rel="noreferrer">https://demo.dashy.to/</a></p></blockquote><h2 id="搭建教程" tabindex="-1">搭建教程 <a class="header-anchor" href="#搭建教程" aria-label="Permalink to &quot;搭建教程&quot;">​</a></h2><p>本文通过Docker的方式来部署项目，以Ubuntu为例，操作步骤：安装Docker、启动容器运行镜像。</p><h3 id="第一步安装docker" tabindex="-1">| 第一步安装docker <a class="header-anchor" href="#第一步安装docker" aria-label="Permalink to &quot;| 第一步安装docker&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo apt update</span></span>
<span class="line"><span>sudo apt install -y docker.io</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="第二步启动容器运行镜像" tabindex="-1">| 第二步启动容器运行镜像 <a class="header-anchor" href="#第二步启动容器运行镜像" aria-label="Permalink to &quot;| 第二步启动容器运行镜像&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker run -p 8080:8080 lissy93/dashy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="或者" tabindex="-1">| 或者 <a class="header-anchor" href="#或者" aria-label="Permalink to &quot;| 或者&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker run -d \\</span></span>
<span class="line"><span>  -p 8080:8080 \\</span></span>
<span class="line"><span>  -v /home/conf.yml:/app/user-data/conf.yml \\</span></span>
<span class="line"><span>  --name my-dashboard \\</span></span>
<span class="line"><span>  --restart=always \\</span></span>
<span class="line"><span>  lissy93/dashy:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>指令执行完成后，容器指定8080端口访问的，因此还需要在服务器的防火墙上打开相应的端口，在浏览器访问IP:8080即可。</p><p><img src="`+ms+'" alt="图片"></p><p><img src="'+us+'" alt="图片"></p><h1 id="跨平台系统监控工具-监视由-docker-和-lxc-等系统管理的多个容器" tabindex="-1">跨平台系统监控工具：监视由 Docker 和 LXC 等系统管理的多个容器 <a class="header-anchor" href="#跨平台系统监控工具-监视由-docker-和-lxc-等系统管理的多个容器" aria-label="Permalink to &quot;跨平台系统监控工具：监视由 Docker 和 LXC 等系统管理的多个容器&quot;">​</a></h1><p>开源地址：<a href="https://github.com/nicolargo/glances" target="_blank" rel="noreferrer">https://github.com/nicolargo/glances</a></p><h3 id="工具介绍" tabindex="-1">工具介绍 <a class="header-anchor" href="#工具介绍" aria-label="Permalink to &quot;工具介绍&quot;">​</a></h3><blockquote><p>Glances 是一款开源的跨平台监控工具, Glances 提供实时监控能力，覆盖了各种系统参数，包括 CPU 使用率、内存消耗、磁盘活动和网络利用率。用户可以查看运行中的进程、已登录用户、硬件指标（如温度、电压和风扇转速），确保对系统性能有全面的了解。</p></blockquote><p>Glances 的一大亮点是其支持容器监控功能，使其能够监视由 Docker 和 LXC 等系统管理的多个容器。该工具的仪表板提供用户友好的界面，方便用户一目了然地进行系统分析，同时还支持通过 Web 界面或命令行界面进行远程监控。</p><blockquote><p>Glances 在客户端/服务器模式下运行，通过终端访问、Web 界面交互或 API 集成（XML-RPC 和 RESTful），为远程监控提供了多种途径。为了备份和分析数据，Glances 允许将统计信息导出至各种格式，如文件、外部数据库、CSV 文件，甚至直接输出到命令行供即时使用。</p></blockquote><p><img src="'+hs+'" alt="image-20240512210944045"></p><p><img src="'+ys+'" alt="image-20240512211001744"></p><p><img src="'+ks+'" alt="image-20240512211017536"></p><h3 id="功能特点-2" tabindex="-1">功能特点 <a class="header-anchor" href="#功能特点-2" aria-label="Permalink to &quot;功能特点&quot;">​</a></h3><p><img src="'+gs+'" alt="image-20240512211032865"></p><ul><li>1.<strong>实时监控</strong>: Glances 支持实时监控系统各方面的性能指标，如 CPU 利用率、内存消耗、磁盘活动和网络使用情况。</li><li>2.<strong>全面信息</strong>: 用户可以查看运行中的进程、已登录用户以及硬件信息（如温度、电压和风扇转速）等细节。</li><li>3.<strong>容器监控</strong>: 支持监控容器化工作负载，适配多种容器管理系统，如 Docker 和 LXC。</li><li>4.<strong>易于安装和使用</strong>: Glances 易于安装，并且用户可以根据自身需求定制仪表板，展示感兴趣的信息。</li><li>5.<strong>远程监控</strong>: 支持通过终端、Web 界面或 API 进行远程监控，提供方便的监控解决方案。</li><li>6.<strong>可扩展性</strong>: 由 Python 编写，采用开放架构，开发者可以添加新插件或导出模块，扩展 Glances 的功能。</li><li>7.<strong>数据导出</strong>: 支持将统计信息导出至文件、外部数据库、CSV 文件或 STDOUT，方便数据备份和分析。</li></ul><h3 id="可展示的信息" tabindex="-1">可展示的信息 <a class="header-anchor" href="#可展示的信息" aria-label="Permalink to &quot;可展示的信息&quot;">​</a></h3><ul><li>CPU（中央处理器）监控</li><li>内存监控</li><li>系统负载监控</li><li>进程列表</li><li>网络接口监控</li><li>磁盘 I/O 监控</li><li>IRQ / Raid 监控</li><li>传感器监控</li><li>文件系统（及文件夹）监控</li><li>容器监控（支持 Docker 和 Podman）</li><li>监视器</li><li>警报功能</li><li>系统信息显示</li><li>运行时间监控</li><li>快速查看（CPU、内存、系统负载）</li></ul><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><blockquote><p>Glances 在各种场景下都能发挥作用，适用于具有不同监控需求的用户。从管理服务性能的系统管理员到希望优化个人计算机的个人用户，Glances 为所有用户提供了灵活和直观的解决方案。</p></blockquote><p>负责管理复杂基础架构的系统管理员将喜欢 Glances 提供的统一视图，在集中仪表板上查看多个系统的能力。该工具对容器监控的支持为管理员提供了额外的洞察力，使其能够高效地跟踪容器化工作负载。</p><blockquote><p>另一方面，个人用户可以从 Glances 的简单性和适应性中受益。通过自定义仪表板以显示用户感兴趣或故障排除需求相关的信息，用户可以专注于符合其偏好的关键指标，从而简化监控流程。</p></blockquote><h1 id="kubernetes-grafana看板" tabindex="-1">Kubernetes Grafana看板 <a class="header-anchor" href="#kubernetes-grafana看板" aria-label="Permalink to &quot;Kubernetes Grafana看板&quot;">​</a></h1><p>K8S Dashboard CN 20240513 StarsL.cn</p><p>Grafana看板ID: 13105 kubernetes资源全面展示！包含K8S整体资源总览、微服务资源明细、Pod资源明细及K8S网络带宽，优化重要指标展示。</p><h3 id="截图" tabindex="-1">截图 <a class="header-anchor" href="#截图" aria-label="Permalink to &quot;截图&quot;">​</a></h3><h4 id="整体资源总览" tabindex="-1">整体资源总览 <a class="header-anchor" href="#整体资源总览" aria-label="Permalink to &quot;整体资源总览&quot;">​</a></h4><p><img src="'+Fs+'" alt="图片"></p><p><img src="'+Bs+'" alt="图片"></p><h4 id="pod资源明细" tabindex="-1">Pod资源明细 <a class="header-anchor" href="#pod资源明细" aria-label="Permalink to &quot;Pod资源明细&quot;">​</a></h4><p><img src="'+As+'" alt="图片"></p><h4 id="微服务资源明细" tabindex="-1">微服务资源明细 <a class="header-anchor" href="#微服务资源明细" aria-label="Permalink to &quot;微服务资源明细&quot;">​</a></h4><p><img src="'+Cs+`" alt="图片"></p><p><strong>github仓库地址（部署与JOB配置说明）</strong><a href="https://github.com/starsliao/Prometheus/tree/master/kubernetes" target="_blank" rel="noreferrer">https://github.com/starsliao/Prometheus/tree/master/kubernetes</a></p><h3 id="kube-state-metrics部署说明" tabindex="-1">kube-state-metrics部署说明： <a class="header-anchor" href="#kube-state-metrics部署说明" aria-label="Permalink to &quot;kube-state-metrics部署说明：&quot;">​</a></h3><ul><li>kube-state-metrics部署在ops-monit命名空间</li><li>选择适合K8S版本的kube-state-metrics,本仓库的kube-state-metrics镜像已经存放在阿里云.</li><li>1.24以下版本的K8S安装kube-state-metrics_v2.3.0的都没问题,版本较新的K8S可以安装新版的kube-state-metrics,参考官方说明.</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">kubectl</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> namespace</span><span style="color:#98C379;"> ops-monit</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> kube-state-metrics_vXXX</span></span>
<span class="line"><span style="color:#61AFEF;">kubectl</span><span style="color:#98C379;"> apply</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="适合本看板的prometheus-k8s-job配置参考" tabindex="-1">适合本看板的Prometheus K8S JOB配置参考 <a class="header-anchor" href="#适合本看板的prometheus-k8s-job配置参考" aria-label="Permalink to &quot;适合本看板的Prometheus K8S JOB配置参考&quot;">​</a></h3><ul><li>说明: 本配置适合于Prometheus部署在K8S内的场景.</li><li><strong>注意:关于节点名称的标签，因为<code>cadvisor</code>是使用<code>instance</code>，而<code>kube-state-metrics</code>是使用<code>node</code>；这样会导致节点信息表格中，没有统一的字段来连接各个查询，所以<code>cadvisor</code>的job下需要复制一个<code>node</code>标签。</strong></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">metric_relabel_configs:</span></span>
<span class="line"><span style="color:#61AFEF;">-</span><span style="color:#98C379;"> source_labels:</span><span style="color:#ABB2BF;"> [instance]</span></span>
<span class="line"><span style="color:#61AFEF;">  separator:</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#61AFEF;">  regex:</span><span style="color:#ABB2BF;"> (.+)</span></span>
<span class="line"><span style="color:#61AFEF;">  target_label:</span><span style="color:#98C379;"> node</span></span>
<span class="line"><span style="color:#61AFEF;">  replacement:</span><span style="color:#E06C75;font-style:italic;"> $1</span></span>
<span class="line"><span style="color:#61AFEF;">  action:</span><span style="color:#98C379;"> replace</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>以下是本看板必须的3个JOB配置</li><li><code>k8s-kubelet</code>和<code>k8s-cadvisor</code> JOB都是各节点的kubelet自带的指标.</li><li><code>kube-state-metrics</code> JOB是安装的<code>kube-state-metrics</code>的指标.</li></ul><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  - job_name: </span><span style="color:#98C379;">&#39;k8s-kubelet&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    scheme: https</span></span>
<span class="line"><span style="color:#ABB2BF;">    tls_config:</span></span>
<span class="line"><span style="color:#ABB2BF;">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span>
<span class="line"><span style="color:#ABB2BF;">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span></span>
<span class="line"><span style="color:#ABB2BF;">    kubernetes_sd_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - role: node</span></span>
<span class="line"><span style="color:#ABB2BF;">    relabel_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - target_label: __address__</span></span>
<span class="line"><span style="color:#ABB2BF;">      replacement: kubernetes.default.svc:443</span></span>
<span class="line"><span style="color:#ABB2BF;">    - source_labels: [__meta_kubernetes_node_name]</span></span>
<span class="line"><span style="color:#ABB2BF;">      regex: (.+)</span></span>
<span class="line"><span style="color:#ABB2BF;">      target_label: __metrics_path__</span></span>
<span class="line"><span style="color:#ABB2BF;">      replacement: /api/v1/nodes/\${1}/proxy/metrics</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  - job_name: </span><span style="color:#98C379;">&#39;k8s-cadvisor&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    scheme: https</span></span>
<span class="line"><span style="color:#ABB2BF;">    tls_config:</span></span>
<span class="line"><span style="color:#ABB2BF;">      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span>
<span class="line"><span style="color:#ABB2BF;">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span></span>
<span class="line"><span style="color:#ABB2BF;">    kubernetes_sd_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - role: node</span></span>
<span class="line"><span style="color:#ABB2BF;">    relabel_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - target_label: __address__</span></span>
<span class="line"><span style="color:#ABB2BF;">      replacement: kubernetes.default.svc:443</span></span>
<span class="line"><span style="color:#ABB2BF;">    - source_labels: [__meta_kubernetes_node_name]</span></span>
<span class="line"><span style="color:#ABB2BF;">      regex: (.+)</span></span>
<span class="line"><span style="color:#ABB2BF;">      target_label: __metrics_path__</span></span>
<span class="line"><span style="color:#ABB2BF;">      replacement: /api/v1/nodes/\${1}/proxy/metrics/cadvisor</span></span>
<span class="line"><span style="color:#ABB2BF;">    metric_relabel_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - source_labels: [instance]</span></span>
<span class="line"><span style="color:#ABB2BF;">      separator: ;</span></span>
<span class="line"><span style="color:#ABB2BF;">      regex: (.+)</span></span>
<span class="line"><span style="color:#ABB2BF;">      target_label: node</span></span>
<span class="line"><span style="color:#ABB2BF;">      replacement: $1</span></span>
<span class="line"><span style="color:#ABB2BF;">      action: replace</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  - job_name: kube-state-metrics</span></span>
<span class="line"><span style="color:#ABB2BF;">    kubernetes_sd_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - role: endpoints</span></span>
<span class="line"><span style="color:#ABB2BF;">      namespaces:</span></span>
<span class="line"><span style="color:#ABB2BF;">        names:</span></span>
<span class="line"><span style="color:#ABB2BF;">        - ops-monit</span></span>
<span class="line"><span style="color:#ABB2BF;">    relabel_configs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]</span></span>
<span class="line"><span style="color:#ABB2BF;">      regex: kube-state-metrics</span></span>
<span class="line"><span style="color:#ABB2BF;">      replacement: $1</span></span>
<span class="line"><span style="color:#ABB2BF;">      action: keep</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h1 id="docker容器命令行可视化工具" tabindex="-1">Docker容器命令行可视化工具 <a class="header-anchor" href="#docker容器命令行可视化工具" aria-label="Permalink to &quot;Docker容器命令行可视化工具&quot;">​</a></h1><h2 id="项目地址-2" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址-2" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><p>GitHub：<a href="https://github.com/linuxserver/docker-webtop" target="_blank" rel="noreferrer">https://github.com/linuxserver/docker-webtop</a></p><h2 id="项目简介-2" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介-2" aria-label="Permalink to &quot;项目简介&quot;">​</a></h2><blockquote><p>Lazydocker是一款功能强大的Docker管理套件，专为懒人设计，旨在帮助用户轻松调试项目或服务。它提供了一键式操作，用户只需按下相应按键，即可实现相应功能。</p></blockquote><h2 id="功能-2" tabindex="-1">功能 <a class="header-anchor" href="#功能-2" aria-label="Permalink to &quot;功能&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>查看Docker或Docker-Compose容器环境的状态。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看容器/服务日志，以便在出现问题时能够迅速定位和解决问题。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看容器ASCII图，帮助用户更直观地了解容器的结构和关系。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>定制图表以查看更详细的信息，满足用户的不同需求。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>绑定容器/服务，实现容器之间的快速连接和通信。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>重启/移除/重建容器或服务，简化项目管理流程。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看给定镜像的父层，帮助用户了解镜像的构建历史和依赖关系。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改占用磁盘空间的容器、镜像或卷，优化系统性能。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="部署安装-2" tabindex="-1">部署安装 <a class="header-anchor" href="#部署安装-2" aria-label="Permalink to &quot;部署安装&quot;">​</a></h2><h3 id="安装docker-1" tabindex="-1">安装Docker <a class="header-anchor" href="#安装docker-1" aria-label="Permalink to &quot;安装Docker&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>curl -sSL https://get.docker.com/ | sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="安装docker-compose-1" tabindex="-1">安装Docker-compose <a class="header-anchor" href="#安装docker-compose-1" aria-label="Permalink to &quot;安装Docker-compose&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>下载 Docker-Compose 二进制包</span></span>
<span class="line"><span>curl -L https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span></span>
<span class="line"><span></span></span>
<span class="line"><span>给文件增加执行权限</span></span>
<span class="line"><span>chmod +x /usr/local/bin/docker-compose</span></span>
<span class="line"><span></span></span>
<span class="line"><span>检查 Docker-Compose 版本</span></span>
<span class="line"><span>docker-compose -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="docker运行服务-1" tabindex="-1">Docker运行服务 <a class="header-anchor" href="#docker运行服务-1" aria-label="Permalink to &quot;Docker运行服务&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker run --rm -it -v \\</span></span>
<span class="line"><span>    /var/run/docker.sock:/var/run/docker.sock \\</span></span>
<span class="line"><span>    -v /home/data:/.config/jesseduffield/lazydocker \\</span></span>
<span class="line"><span>    lazyteam/lazydocker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="终端即可看到" tabindex="-1">终端即可看到 <a class="header-anchor" href="#终端即可看到" aria-label="Permalink to &quot;终端即可看到&quot;">​</a></h2><p><img src="`+_s+'" alt="image-20240514154248748"></p>',413),vs=[qs];function Ps(Ds,xs,Es,ws,Ss,Ns){return n(),a("div",null,vs)}const Is=s(fs,[["render",Ps]]);export{Os as __pageData,Is as default};
