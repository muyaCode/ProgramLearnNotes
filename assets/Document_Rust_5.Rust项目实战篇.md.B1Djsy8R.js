import{_ as s,c as a,o as n,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const p="/ProgramLearnNotes/assets/image-20240420213706930.CeJun09n.png",e="/ProgramLearnNotes/assets/image-20240420213725777.XTl0nR_W.png",o="/ProgramLearnNotes/assets/fe56650e433e47e4978c8943de139a1dtplv-k3u1fbpfcp-zoom-in-crop-mark1512000.pzRetqHy.webp",r="/ProgramLearnNotes/assets/72cd8b2da3a440edb8baae984f0b03a3tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.bHW7PqaU.webp",t="/ProgramLearnNotes/assets/5c854ed96c9149d98711cfb03f86f4aftplv-k3u1fbpfcp-zoom-in-crop-mark1512000.Djbm9WxM.webp",c="/ProgramLearnNotes/assets/25f6592ab8e8483e82de09dddebcd70atplv-k3u1fbpfcp-zoom-in-crop-mark1512000.BVhVVGCp.webp",i="/ProgramLearnNotes/assets/8b0ca14f863542da8f480fa094bb91edtplv-k3u1fbpfcp-zoom-in-crop-mark1512000.B5Gtuqh5.webp",B="/ProgramLearnNotes/assets/3d8cf7cc7b234afe945da48aac337daetplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DKNBNcIY.webp",y="/ProgramLearnNotes/assets/7bbd1824cfe44399901d503a545f85c2tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.CfI-J9-f.webp",u="/ProgramLearnNotes/assets/814bcefe06a1421d9f32901da33daeb1tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DclJurbM.webp",d="/ProgramLearnNotes/assets/130d5189ccf945fba4f51247fe08fe99tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DB6T_Ca9.webp",k=JSON.parse('{"title":"5.Rust 项目实战篇","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/5.Rust项目实战篇.md","filePath":"Document/Rust/5.Rust项目实战篇.md","lastUpdated":1717759497000}'),b={name:"Document/Rust/5.Rust项目实战篇.md"},m=l(`<h1 id="_5-rust-项目实战篇" tabindex="-1">5.Rust 项目实战篇 <a class="header-anchor" href="#_5-rust-项目实战篇" aria-label="Permalink to &quot;5.Rust 项目实战篇&quot;">​</a></h1><h2 id="待定文章" tabindex="-1">待定文章 <a class="header-anchor" href="#待定文章" aria-label="Permalink to &quot;待定文章&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/7JIlF-kThamprjBryS7faA" target="_blank" rel="noreferrer">Rust语言实现基于 WebSocket 和 HTTP2 的流量隧道 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s/k7QaXacwJ22hl8S9Yz2Wuw" target="_blank" rel="noreferrer">Rust 实现文件批量下载 (qq.com)</a></p><h2 id="rust-编程的十大领域" tabindex="-1">Rust 编程的十大领域 <a class="header-anchor" href="#rust-编程的十大领域" aria-label="Permalink to &quot;Rust 编程的十大领域&quot;">​</a></h2><p>Rust 经常被誉为“只要能写就能做任何事情的语言”，它确实是一种具有无限可能性的通用语言。从嵌入式系统到 web 浏览器，Rust 的底层能力是无限的。那么，让我们来看看 Rust 引起轰动的十大领域：</p><p>**1、嵌入式开发：**如果你对硬件和电子产品着迷，那么 Rust 是你的首选语言。有了树莓派等平台的支持，你可以冒险进入令人兴奋的项目，从电池/太阳能控制系统到飞行代码模拟。</p><p>**2、网络基础设施工具：**Rust 通过日志路由、指标分析、负载平衡等应用程序在网络基础设施领域找到了自己的位置。它的高效率和健壮的内存管理使其成为 ssl 流量代理和日志解析等任务的首选。</p><p>有人在网上这么说：“如果有什么东西可以写出来，那么这个东西就可以用 Rust 写出来”</p><p>**3、后端系统：**Rust 的内存管理功能已经引起了全世界 C 和 C++开发人员的注意。它越来越多地被用于后端系统，包括传统上用 C 编码的底层缓存软件。</p><p>**4、Web 浏览器(WASM)：**Rust 的速度和类型检查能力使其成为 WebAssembly (WASM)开发的理想选择。它的 WASM 生态系统确保了高效和无 bug 的编译，使其成为 web 开发人员的最爱。</p><p>**5、图形用户界面(GUI)：**随着像 Tauri 这样的框架越来越流行，Rust 成为 GUI 开发的一个有吸引力的选择。结合 Next.js 或 React.js 等工具，Rust 使开发人员能够制作时尚高效的 GUI 应用程序。</p><p>**6、命令行接口(CLI)工具：**Rust 的简单性和性能使其成为构建 CLI 的完美工具。无论是自动化任务还是增强用户体验，rust 驱动的 CLI 工具都提供了可靠性和高效率。</p><p>**7、区块链：**Rust 已经在区块链领域找到了自己的定位，像 Solana 这样的项目利用了它的能力。从加密钱包到智能合约，Rust 在构建健壮和安全的区块链解决方案方面发挥着关键作用。</p><p>**8、游戏开发：**Rust 的速度和安全性使其成为游戏开发者的一个有吸引力的选择。有了像 Amethyst 这样的框架，Rust 可以创建高性能和高扩展性的游戏。</p><p>**9、金融科技(FinTech)：**Rust 的可靠性和高性能使其非常适合开发金融科技解决方案。其强大的并发支持和内存安全特性确保了金融应用程序的安全性和稳定性。</p><p>**10、云计算：**Rust 的轻量级占用空间和高效的资源管理使其非常适合云计算应用程序。无论是构建可扩展的微服务还是优化云基础设施，Rust 都使开发人员能够轻松应对复杂的挑战。</p><h1 id="生产环境-一个rust项目包含的要素" tabindex="-1">生产环境：一个Rust项目包含的要素 <a class="header-anchor" href="#生产环境-一个rust项目包含的要素" aria-label="Permalink to &quot;生产环境：一个Rust项目包含的要素&quot;">​</a></h1><p>Rust因其性能、安全性和并发特性而受到开发者的青睐。然而，将Rust项目推向生产环境，不仅仅是编写代码那么简单，还涉及代码仓库的管理、测试与持续集成、文档、特性管理、编译期处理、日志和监控等多个方面。</p><h3 id="代码仓库的管理" tabindex="-1">代码仓库的管理 <a class="header-anchor" href="#代码仓库的管理" aria-label="Permalink to &quot;代码仓库的管理&quot;">​</a></h3><p>代码仓库的管理是项目管理的基础。一个良好的仓库管理策略包括但不限于：</p><ul><li>使用<code>.gitignore</code>文件排除不必要的文件和目录。</li><li>保持提交信息的清晰和有意义。</li><li>采用分支策略管理不同的开发周期，如Git Flow。</li></ul><h3 id="测试和持续集成" tabindex="-1">测试和持续集成 <a class="header-anchor" href="#测试和持续集成" aria-label="Permalink to &quot;测试和持续集成&quot;">​</a></h3><p>测试是保证代码质量的重要手段。Rust项目通常会包括单元测试、集成测试和文档测试。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[cfg(test)]</span></span>
<span class="line"><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;"> tests {</span></span>
<span class="line"><span style="color:#ABB2BF;">   #[test]</span></span>
<span class="line"><span style="color:#C678DD;">   fn</span><span style="color:#61AFEF;"> it_works</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">       assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>持续集成（CI）通过自动化测试和构建过程，确保代码的健壮性。常用的CI工具包括GitHub Actions、GitLab CI/CD等。</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># .github/workflows/rust.yml</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Rust</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">on</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">push</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  branches</span><span style="color:#ABB2BF;">: [ </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#E06C75;">pull_request</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  branches</span><span style="color:#ABB2BF;">: [ </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">jobs</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">build</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  runs-on</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  steps</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">  - </span><span style="color:#E06C75;">uses</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">actions/checkout@v2</span></span>
<span class="line"><span style="color:#ABB2BF;">  - </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Build</span></span>
<span class="line"><span style="color:#E06C75;">    run</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">cargo build --verbose</span></span>
<span class="line"><span style="color:#ABB2BF;">  - </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Run tests</span></span>
<span class="line"><span style="color:#E06C75;">    run</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">cargo test --verbose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h3><p>文档对于任何项目都是必不可少的。Rust提供了<code>cargo doc</code>命令来生成项目文档。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/// 对两个数求和</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// # 示例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// \`\`\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// let result = my_crate::add(2, 3);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// assert_eq!(result, 5);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// \`\`\`</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   a</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="特性管理" tabindex="-1">特性管理 <a class="header-anchor" href="#特性管理" aria-label="Permalink to &quot;特性管理&quot;">​</a></h3><p>Rust的<code>features</code>允许你在编译时选择性地启用或禁用某些功能。</p><div class="language-toml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">features</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;"> = [</span><span style="color:#98C379;">&quot;sqlite&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">sqlite</span><span style="color:#ABB2BF;"> = []</span></span>
<span class="line"><span style="color:#E06C75;">postgres</span><span style="color:#ABB2BF;"> = []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="编译期处理" tabindex="-1">编译期处理 <a class="header-anchor" href="#编译期处理" aria-label="Permalink to &quot;编译期处理&quot;">​</a></h3><p>使用<code>build.rs</code>脚本可以在编译时执行自定义的构建任务。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// build.rs</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">   println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cargo:rerun-if-changed=path/to/Cargo.lock&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 更多构建逻辑...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="日志和监控" tabindex="-1">日志和监控 <a class="header-anchor" href="#日志和监控" aria-label="Permalink to &quot;日志和监控&quot;">​</a></h3><p>为Rust应用程序添加日志非常简单，可以使用<code>log</code>和<code>env_logger</code>库。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> log</span><span style="color:#ABB2BF;">::{info, warn};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">   env_logger</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">   info!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;启动应用&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">   warn!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;这是一个警告&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>监控可以使用<code>metrics</code>库来实现。</p><h3 id="控制编译出的可执行文件大小" tabindex="-1">控制编译出的可执行文件大小 <a class="header-anchor" href="#控制编译出的可执行文件大小" aria-label="Permalink to &quot;控制编译出的可执行文件大小&quot;">​</a></h3><p>Rust编译出的可执行文件可能会比较大，可以通过以下方法进行优化：</p><ul><li>使用<code>lto</code>和<code>codegen-units</code>优化。</li><li>移除或减少依赖。</li><li>使用<code>strip</code>工具移除调试信息。</li></ul><div class="language-toml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">profile</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">lto</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">codegen-units</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>构建一个生产级别的Rust项目，需要考虑代码管理、测试、文档、特性管理、编译期处理、日志和监控等多个方面。通过合理的项目结构和工具选择，可以有效提高项目的质量和维护性。希望上述内容能够帮助你更好地管理和维护你的Rust项目。</p><h2 id="待定文章-1" tabindex="-1">待定文章 <a class="header-anchor" href="#待定文章-1" aria-label="Permalink to &quot;待定文章&quot;">​</a></h2><p><a href="https://blog.csdn.net/weixin_47754149/category_11915542.html" target="_blank" rel="noreferrer">Rust 项目实战篇_广龙宇的博客-CSDN 博客</a></p><p><a href="https://juejin.cn/column/7226181070202699831" target="_blank" rel="noreferrer">Rust 学习指南 - 的专栏 - 掘金 (juejin.cn)</a></p><p><a href="https://rust-cli.github.io/book/index.html" target="_blank" rel="noreferrer">入门 - Rust 中的命令行应用程序 (rust-cli.github.io)</a></p><p><a href="https://juejin.cn/post/7320779681674018827" target="_blank" rel="noreferrer">Rust 赋能前端-开发一款属于你的前端脚手架 - 掘金 (juejin.cn)</a></p><p><a href="https://mp.weixin.qq.com/s/riZbzLV-hdqQ3rL__MnZ3Q" target="_blank" rel="noreferrer">Leptos 框架深度解析：由 Rust 语言打造的全栈 Web 框架，用 Rust 打造高效、声明式的 Web 应用世界 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s/G4BW83SXILNB3JX-LnDliQ" target="_blank" rel="noreferrer">使用 Rust 构建高性能 Web 应用 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s/hQSeSVMRnzA3zmluB353Ew" target="_blank" rel="noreferrer">构建高性能 Rust 爬虫 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s/mY4cD2uj4yLxa0eoDLUP3g" target="_blank" rel="noreferrer">Rust 跨平台编译 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s/VJgw5WmzBZYVV5X1OBTgMA" target="_blank" rel="noreferrer">用 Rust 写书？这个开源项目让 Markdown 快速生成精美电子书！ (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247484423&amp;idx=2&amp;sn=585d5aa6864b19305ce3ac44f9466233&amp;chksm=c1e32c67f694a5717c5ea9ff314ac7fde1eb2193955d98210de5f39e3020726a7aa97e41e65d&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">Rust 实现文件批量下载 (qq.com)</a></p><h2 id="rust-和-python-相结合" tabindex="-1">Rust 和 Python 相结合 <a class="header-anchor" href="#rust-和-python-相结合" aria-label="Permalink to &quot;Rust 和 Python 相结合&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247484362&amp;idx=2&amp;sn=217c7e5269d334ba5e4b05cfdc7598d7&amp;chksm=c1e32baaf694a2bccefa506080bc602f521dbbbb6dfab8d3c9a3ebd1db1ab860399549d19b93&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">Rust FFI 开发 Python 库入门指南 (qq.com)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4ODg2NDQ0NA==&amp;mid=2247484954&amp;idx=1&amp;sn=7e0cb109353b14c87657945a04930936&amp;chksm=cff5edc9f88264dfb054bf937df1de213ac60c66ba48cb31e1ac2a6b944026fffe8255b8b2dc&amp;cur_album_id=2734524635021328385&amp;scene=189#wechat_redirect" target="_blank" rel="noreferrer">玩转 Rust 与 Python 互操作：pyo3 + maturin 实践指南 (qq.com)</a></p><h2 id="rust-开发-webassembly" tabindex="-1">Rust 开发 WebAssembly <a class="header-anchor" href="#rust-开发-webassembly" aria-label="Permalink to &quot;Rust 开发 WebAssembly&quot;">​</a></h2><p><a href="https://juejin.cn/post/7279346413915717687" target="_blank" rel="noreferrer">给 Web 前端工程师看的用 Rust 开发 wasm 组件实战 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7293122294775316534" target="_blank" rel="noreferrer">Rust 编译为 WebAssembly 在前端项目中使用 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7309549333694267443" target="_blank" rel="noreferrer">Game = Rust + WebAssembly + 浏览器 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7308434321764794378" target="_blank" rel="noreferrer">给 Web 前端工程师看的用 Rust 开发 wasm 组件实战 | 京东云技术团队 - 掘金 (juejin.cn)</a></p><p><a href="https://mp.weixin.qq.com/s/6CI44wULfQbj-4ez4yPtiQ" target="_blank" rel="noreferrer">WASM-BINDGEN 搭起 Rust 与 JavaScript 的桥梁 (qq.com)</a></p><h1 id="rust-命令行工具开发" tabindex="-1">Rust 命令行工具开发 <a class="header-anchor" href="#rust-命令行工具开发" aria-label="Permalink to &quot;Rust 命令行工具开发&quot;">​</a></h1><h3 id="rust-开发终端音乐播放器" tabindex="-1">Rust 开发终端音乐播放器 <a class="header-anchor" href="#rust-开发终端音乐播放器" aria-label="Permalink to &quot;Rust 开发终端音乐播放器&quot;">​</a></h3><p>代码地址：<a href="https://github.com/forward-step/rust-player" target="_blank" rel="noreferrer">forward-step/rust-player: a local audio player tui (github.com)</a></p><h4 id="最终效果图" tabindex="-1">最终效果图 <a class="header-anchor" href="#最终效果图" aria-label="Permalink to &quot;最终效果图&quot;">​</a></h4><p><img src="`+p+'" alt="image-20240420213706930"></p><p><img src="'+e+`" alt="image-20240420213725777"></p><h4 id="主要技术栈" tabindex="-1">主要技术栈 <a class="header-anchor" href="#主要技术栈" aria-label="Permalink to &quot;主要技术栈&quot;">​</a></h4><h5 id="命令行" tabindex="-1">命令行 <a class="header-anchor" href="#命令行" aria-label="Permalink to &quot;命令行&quot;">​</a></h5><p>第三方库: clap</p><p>实现效果:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 查看帮助</span></span>
<span class="line"><span style="color:#61AFEF;">rust-player</span><span style="color:#D19A66;"> -h</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 打开D盘下的mp3文件夹，并且将所有周杰伦开头的文件添加到播放列表，并且全屏展示</span></span>
<span class="line"><span style="color:#61AFEF;">rust-player</span><span style="color:#98C379;"> D://mp3</span><span style="color:#98C379;"> 周杰伦-</span><span style="color:#E5C07B;">*</span><span style="color:#D19A66;"> -f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>部分代码:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Parser</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#ABB2BF;">#[command(author, version, about, long_about </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> None</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(short, long)]</span></span>
<span class="line"><span style="color:#E06C75;">    full</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(short, long)]</span></span>
<span class="line"><span style="color:#E06C75;">    info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="终端-ui" tabindex="-1">终端 UI <a class="header-anchor" href="#终端-ui" aria-label="Permalink to &quot;终端 UI&quot;">​</a></h5><p>第三方库: ratatui，前身是 rust 中大名鼎鼎的 <strong>tui-rs</strong>, 不过由于原作者的工作繁忙问题无暇维护, 因此诞生了这个社区版的, 积极维护的 fork。而且官方文档很友好，推荐</p><p>部分代码:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">loop</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 初始化脚本</span></span>
<span class="line"><span style="color:#E5C07B;">    self</span><span style="color:#ABB2BF;">.script.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 绘制UI</span></span>
<span class="line"><span style="color:#E5C07B;">    self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">draw</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">terminal</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 处理事件</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E5C07B;"> crossterm</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">poll</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;">::</span><span style="color:#D19A66;">REFRESH_RATE</span><span style="color:#ABB2BF;">)? {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Event</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Key</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">()? {</span></span>
<span class="line"><span style="color:#C678DD;">            match</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">.code {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 关闭应用</span></span>
<span class="line"><span style="color:#E5C07B;">                KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Char</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;q&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">|</span><span style="color:#E5C07B;"> KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Char</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Q&#39;</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // ......</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="音频播放" tabindex="-1">音频播放 <a class="header-anchor" href="#音频播放" aria-label="Permalink to &quot;音频播放&quot;">​</a></h5><p>第三方库: rodio、id3、mp3-duration</p><ul><li>rodio: 音频播放库</li><li>id3: 解析 mp3 等媒体文件自带的 id3 tag 信息。tag 中包含了媒体文件的基本信息和歌词等</li><li>mp3-duration: rodio 支持获取媒体的播放时长，但是不支持获取 mp3 的，因此用此代替</li></ul><p>部分代码:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 尝试从媒体文件的tag中读取歌词</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果失败，则尝试从媒体文件所在目录查找与媒体文件同名的.lrc歌词文件</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> tag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Tag</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">read_from_path</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">ok</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> lyrics</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> string</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> it</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> tag</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lyrics</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;"> + &amp;</span><span style="color:#E06C75;">it</span><span style="color:#ABB2BF;">.text;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">() &gt; </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Lyrics</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_string</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Lyrics</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_music_path</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Lyrics</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_music_path</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="joshuto-用-rust-编写的类似-ranger-的终端文件管理器" tabindex="-1">joshuto：用 Rust 编写的类似 ranger 的终端文件管理器 <a class="header-anchor" href="#joshuto-用-rust-编写的类似-ranger-的终端文件管理器" aria-label="Permalink to &quot;joshuto：用 Rust 编写的类似 ranger 的终端文件管理器&quot;">​</a></h3><p>GitHub：<a href="https://github.com/kamiyaa/joshuto" target="_blank" rel="noreferrer">kamiyaa/joshuto：用 Rust 编写的类似 ranger 的终端文件管理器 (github.com)</a></p><p>库：<a href="https://crates.io/crates/joshuto" target="_blank" rel="noreferrer">joshuto - crates.io: Rust Package Registry</a></p><p>文档：<a href="https://github.com/kamiyaa/joshuto/tree/main/docs" target="_blank" rel="noreferrer">joshuto/docs at main · kamiyaa/joshuto (github.com)</a></p><p>安装：<a href="https://github.com/kamiyaa/joshuto#installation" target="_blank" rel="noreferrer">kamiyaa/joshuto: ranger-like terminal file manager written in Rust (github.com)</a></p><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><h5 id="基础命令" tabindex="-1">基础命令 <a class="header-anchor" href="#基础命令" aria-label="Permalink to &quot;基础命令&quot;">​</a></h5><ul><li>导航 向上移动： <ul><li>arrow_up 或 k</li><li>向下移动：arrow_down 或 j</li><li>移动到上级目录：arrow_left 或 h</li><li>打开文件或目录：arrow_right 或 l</li><li>跳转到顶部：home 或 g g</li><li>跳转到底部：end 或 G</li><li>向上翻页：page_up 或 ctrl+u</li><li>向下翻页：page_down 或 ctrl+d</li></ul></li><li>选项卡管理 <ul><li>打开新选项卡：ctrl+t</li><li>使用当前目录打开新选项卡：T</li><li>关闭当前选项卡：W 或 ctrl+w</li><li>切换到下一个选项卡：\\t</li><li>切换到上一个选项卡：backtab</li></ul></li><li>文件操作 <ul><li>重命名文件：a 进行追加或 A 进行前置</li><li>删除文件：delete 或 d d</li><li>剪切文件：d d</li><li>复制文件：y y</li><li>粘贴文件：p p</li><li>覆盖粘贴文件：p o</li><li>创建文件链接：p l 为绝对路径，p L 为相对路径</li></ul></li></ul><p>更多命令参考<a href="https://github.com/kamiyaa/joshuto?tab=readme-ov-file#usage" target="_blank" rel="noreferrer">usage</a></p><h5 id="自定义配置修改" tabindex="-1">自定义配置修改 <a class="header-anchor" href="#自定义配置修改" aria-label="Permalink to &quot;自定义配置修改&quot;">​</a></h5><p>Joshuto 使用环境变量从以下目录中读取配置（按优先顺序）：</p><ul><li><code>$JOSHUTO_CONFIG_HOME</code></li><li><code>$XDG_CONFIG_HOME/joshuto</code></li><li><code>$HOME/.config/joshuto</code></li></ul><p>目前可以使用以下文件对 Joshuto 进行配置：</p><ul><li><a href="https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/joshuto.toml.md" target="_blank" rel="noreferrer">joshuto.toml</a>: basic/general configurations(基本/通用配置)</li><li><a href="https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/keymap.toml.md" target="_blank" rel="noreferrer">keymap.toml</a>: keymapping configurations(按键映射配置)</li><li><a href="https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/mimetype.toml.md" target="_blank" rel="noreferrer">mimetype.toml</a>: mimetype configurations(文件类型配置)</li><li><a href="https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/theme.toml.md" target="_blank" rel="noreferrer">theme.toml</a>: theming configurations(主题配置)</li><li><a href="https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/icons.toml.md" target="_blank" rel="noreferrer">icons.toml</a>: icons customization(图标自定义)</li></ul><p>将官方提供的例子</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">joshuto/config</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>复制到</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">~/.config/joshuto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="rust-开发的股价查询终端应用-rust-stock" tabindex="-1">Rust 开发的股价查询终端应用: rust-stock <a class="header-anchor" href="#rust-开发的股价查询终端应用-rust-stock" aria-label="Permalink to &quot;Rust 开发的股价查询终端应用: rust-stock&quot;">​</a></h3><p>项目地址：<a href="https://github.com/fdehau/tui-rs" target="_blank" rel="noreferrer">https://github.com/fdehau/tui-rs</a></p><p>官方文档：<a href="https://docs.rs/tui/latest/tui/index.html" target="_blank" rel="noreferrer">https://docs.rs/tui/latest/tui/index.html</a></p><p>tui 介绍：<a href="https://www.51cto.com/article/703696.html" target="_blank" rel="noreferrer">https://www.51cto.com/article/703696.html</a></p><p>实时股票数据： <a href="https://github.com/tarkah/tickrs" target="_blank" rel="noreferrer">https://github.com/tarkah/tickrs</a></p><p>文件传输工具：<a href="https://github.com/veeso/termscp" target="_blank" rel="noreferrer">https://github.com/veeso/termscp</a></p><p>网络监控工具：<a href="https://github.com/imsnif/bandwhich" target="_blank" rel="noreferrer">https://github.com/imsnif/bandwhich</a></p><h4 id="使用-rust-开发的股价查询终端应用" tabindex="-1">使用 Rust 开发的股价查询终端应用 <a class="header-anchor" href="#使用-rust-开发的股价查询终端应用" aria-label="Permalink to &quot;使用 Rust 开发的股价查询终端应用&quot;">​</a></h4><p><img src="`+o+`" alt="rust-stock.gif"></p><h4 id="主要使用-tui-rs-一款超好用的跨平台命令行界面库" tabindex="-1">主要使用 tui-rs 一款超好用的跨平台命令行界面库 <a class="header-anchor" href="#主要使用-tui-rs-一款超好用的跨平台命令行界面库" aria-label="Permalink to &quot;主要使用 tui-rs 一款超好用的跨平台命令行界面库&quot;">​</a></h4><p>使用 tui.rs 提供的以下模块进行 UI 编写(所有 UI 元素都实现了 Widget 或 StatefuWidget Trait)：</p><ul><li>bakend 用于生成管理命令行的后端</li><li>layout 用于管理 UI 组件的布局</li><li>style 用于为 UI 添加样式</li><li>symbols 描述绘制散点图时所用点的样式</li><li>text 用于描述带样式的文本</li><li>widgets 包含预定义的 UI 组件</li></ul><h4 id="编译-运行" tabindex="-1">编译/运行 <a class="header-anchor" href="#编译-运行" aria-label="Permalink to &quot;编译/运行&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">➜</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> https://github.com/huangbqsky/rust-stock</span></span>
<span class="line"><span style="color:#61AFEF;">➜</span><span style="color:#98C379;"> cd</span><span style="color:#98C379;"> rust-stock</span></span>
<span class="line"><span style="color:#61AFEF;">➜</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> build</span></span>
<span class="line"><span style="color:#61AFEF;">➜</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> run</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="tl-dr" tabindex="-1">tl;dr <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;tl;dr&quot;">​</a></h2><ul><li><a href="https://github.com/alacritty/alacritty" target="_blank" rel="noreferrer">alacritty</a> 使用 GPU 加速的跨平台终端模拟器</li><li><a href="https://github.com/starship/starship" target="_blank" rel="noreferrer">starship</a> 🌌 超级快、支持各种订制的极简命令行提示符，支持任意 shell</li><li><a href="https://github.com/ogham/exa" target="_blank" rel="noreferrer">exa</a> <code>ls</code> 现代版</li><li><a href="https://github.com/sharkdp/bat" target="_blank" rel="noreferrer">bat</a> 支持更多特性的 <code>cat</code> 克隆</li><li><a href="https://github.com/dandavison/delta" target="_blank" rel="noreferrer">delta</a> git、diff 输出查看器</li><li><a href="https://github.com/ajeetdsouza/zoxide" target="_blank" rel="noreferrer">zoxide</a> 更快捷地浏览文件系统</li><li><a href="https://github.com/burntsushi/ripgrep" target="_blank" rel="noreferrer">ripgrep</a> 基于正则表达式递归搜索目录</li><li><a href="https://github.com/sharkdp/fd" target="_blank" rel="noreferrer">fd</a> 简单、快速、用户友好的 <code>find</code> 替代品</li><li><a href="https://github.com/clementtsang/bottom" target="_blank" rel="noreferrer">bottom</a> 又一个跨平台的图形化进程/系统查看器</li><li><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noreferrer">tldr</a> 📚 众人一起编写的终端命令速查卡</li><li><a href="https://github.com/rigellute/spotify-tui" target="_blank" rel="noreferrer">spotify-tui</a> Spotify 客户端命令行版 🚀</li><li><a href="https://github.com/extrawurst/gitui" target="_blank" rel="noreferrer">gitui</a> 超级 💥 快的 git 字符界面客户端</li></ul><h2 id="alacritty" tabindex="-1">Alacritty <a class="header-anchor" href="#alacritty" aria-label="Permalink to &quot;Alacritty&quot;">​</a></h2><p>首先介绍 Alacritty，这是最快的终端模拟器之一，因为它使用 GPU 渲染，而且它也是跨平台的。</p><p>配色方案、字体、透明度、键盘快捷键等都能定制。</p><p>Alacritty 不支持合字，但你可以用这个支持合字的<a href="https://github.com/zenixls2/alacritty/tree/ligature" target="_blank" rel="noreferrer">分支</a>。如果你用 Arch 的话，也可以通过 <a href="https://aur.archlinux.org/packages/alacritty-ligatures/" target="_blank" rel="noreferrer">aur</a> 安装。</p><p><img src="`+r+'" alt="Alacritty 合字"></p><h2 id="starship" tabindex="-1">Starship <a class="header-anchor" href="#starship" aria-label="Permalink to &quot;Starship&quot;">​</a></h2><p>我以前的命令行提示符用 zsh + powerlevel9k，后来转用 powerlevel10k，但在开新 shell 时我都观察到了延迟。starship 则能立刻启动。</p><p>它可以搭配任何 shell 使用，比如 bash、zsh、fish，甚至 powerShell.</p><p>下面的截图显示了我定制的提示符。</p><p><img src="'+t+`" alt="Starship 截图"></p><h2 id="exa" tabindex="-1">Exa <a class="header-anchor" href="#exa" aria-label="Permalink to &quot;Exa&quot;">​</a></h2><p>exa 是 <code>ls</code> 命令的一个实现，但自带色彩和图标，渲染也非常快。</p><p>我建了一个别名，用 exa 代替 ls.</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [ </span><span style="color:#98C379;">&quot;$(</span><span style="color:#56B6C2;">command</span><span style="color:#D19A66;"> -v</span><span style="color:#98C379;"> exa)&quot;</span><span style="color:#ABB2BF;"> ]; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">    unalias</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;ll&#39;</span></span>
<span class="line"><span style="color:#56B6C2;">    unalias</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;l&#39;</span></span>
<span class="line"><span style="color:#56B6C2;">    unalias</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;la&#39;</span></span>
<span class="line"><span style="color:#56B6C2;">    unalias</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;ls&#39;</span></span>
<span class="line"><span style="color:#C678DD;">    alias</span><span style="color:#E06C75;"> ls</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;exa -G  --color auto --icons -a -s type&#39;</span></span>
<span class="line"><span style="color:#C678DD;">    alias</span><span style="color:#E06C75;"> ll</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;exa -l --color always --icons -a -s type&#39;</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我的 <code>ls</code> 和 <code>ll</code> 命令显示结果：</p><p><img src="`+c+`" alt="exa 截图"></p><h2 id="bat" tabindex="-1">Bat <a class="header-anchor" href="#bat" aria-label="Permalink to &quot;Bat&quot;">​</a></h2><p>bat 是 <code>cat</code> 命令的一个实现，但加上了语法高亮。</p><p>我也给它建了个别名（我用 Nord 主题）。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [ </span><span style="color:#98C379;">&quot;$(</span><span style="color:#56B6C2;">command</span><span style="color:#D19A66;"> -v</span><span style="color:#98C379;"> bat)&quot;</span><span style="color:#ABB2BF;"> ]; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">  unalias</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;cat&#39;</span></span>
<span class="line"><span style="color:#C678DD;">  alias</span><span style="color:#E06C75;"> cat</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;bat -pp --theme=&quot;Nord&quot;&#39;</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+i+`" alt="使用 bat 查看 TypeScript 文件"></p><h2 id="delta" tabindex="-1">Delta <a class="header-anchor" href="#delta" aria-label="Permalink to &quot;Delta&quot;">​</a></h2><p>delta 增强了 git diff 的显示效果，包括语法高亮、行号、双栏显示。</p><p>想使用 delta 的话，需要在 <code>.gitconfig</code> 中加上：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[core]</span></span>
<span class="line"><span style="color:#61AFEF;">  pager</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> delta</span></span>
<span class="line"><span style="color:#ABB2BF;">[interactive]</span></span>
<span class="line"><span style="color:#61AFEF;">  diffFilter</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> delta</span><span style="color:#D19A66;"> --color-only</span></span>
<span class="line"><span style="color:#ABB2BF;">[delta]</span></span>
<span class="line"><span style="color:#61AFEF;">  side-by-side</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">  line-numbers-left-format</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">  line-numbers-right-format</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;│ &quot;</span></span>
<span class="line"><span style="color:#61AFEF;">  syntax-theme</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> Nord</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上面的配置中，<code>delta</code> 成为 git 命令输出的默认 pager，开启了双栏显示，并将主题设为 Nord。你可以运行以下命令列出所有主题，并从中选择想用的主题。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">delta</span><span style="color:#D19A66;"> --list-syntax-themes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+B+`" alt="delta 截屏"></p><h2 id="zoxide" tabindex="-1">Zoxide <a class="header-anchor" href="#zoxide" aria-label="Permalink to &quot;Zoxide&quot;">​</a></h2><p>我没有使用任何文件浏览器，只用 <code>cd</code> 和 <code>ls</code>。</p><p>比方说，我的家目录下有一个存放各种项目的 <code>projects</code> 目录，如果我想访问其中一个项目，我需要输入</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> ~/projects/mahmoudashraf.dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 zoxide 后，只有第一次需要输入</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">z</span><span style="color:#98C379;"> ~/projects/mahmoudashraf.dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后不管当前目录是哪里，简单输入几个字母就可以再次访问这一目录</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">z</span><span style="color:#98C379;"> mah</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="ripgrep" tabindex="-1">Ripgrep <a class="header-anchor" href="#ripgrep" aria-label="Permalink to &quot;Ripgrep&quot;">​</a></h2><p>这是一个跨平台的命令行工具，可以使用正则表达式搜索目录下的文件内容。</p><p>推荐阅读 <a href="https://blog.burntsushi.net/ripgrep/" target="_blank" rel="noreferrer">ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} </a> 一文。</p><p>下面是一些例子：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 基于特定正则表达式搜索 javascript 文件</span></span>
<span class="line"><span style="color:#61AFEF;">rg</span><span style="color:#98C379;"> tjs</span><span style="color:#98C379;"> &quot;import React&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">rg</span><span style="color:#98C379;"> &quot;\\.content&quot;</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> &quot;*.pug&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 不仅可以查找，还可以替换，类似 sed 命令的查找替换功能</span></span>
<span class="line"><span style="color:#61AFEF;">rg</span><span style="color:#98C379;"> fast</span><span style="color:#98C379;"> README.md</span><span style="color:#D19A66;"> --replace</span><span style="color:#98C379;"> FAST</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+y+'" alt="rg 截屏"></p><h2 id="fd" tabindex="-1">Fd <a class="header-anchor" href="#fd" aria-label="Permalink to &quot;Fd&quot;">​</a></h2><p>比 <code>find</code> 命令更友好，也更快。</p><p>默认情况下会忽略 <code>.gitignore</code> 中指定需要忽略的文件。</p><p>比如，把一些 <code>png</code> 格式的文件转换为 <code>jpeg</code> 格式：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fd</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> png</span><span style="color:#D19A66;"> -x</span><span style="color:#98C379;"> convert</span><span style="color:#98C379;"> {}</span><span style="color:#98C379;"> {.}.jpeg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>再比如删除文件：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fd</span><span style="color:#D19A66;"> -H</span><span style="color:#98C379;"> &#39;^\\.DS_Store$&#39;</span><span style="color:#D19A66;"> -tf</span><span style="color:#D19A66;"> -X</span><span style="color:#98C379;"> rm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="bottom" tabindex="-1">bottom <a class="header-anchor" href="#bottom" aria-label="Permalink to &quot;bottom&quot;">​</a></h2><p>它不是 <code>top</code> 😀 是 <code>bottom</code>。</p><p>它是一个跨平台的系统监视器。</p><p><img src="'+u+'" alt="bottom 截屏"></p><h2 id="tldr" tabindex="-1">Tldr <a class="header-anchor" href="#tldr" aria-label="Permalink to &quot;Tldr&quot;">​</a></h2><p>tldr 为各种命令行工具提供了速查卡，可以省下阅读完整的 <code>man</code> 帮助手册的时间。</p><p><img src="'+d+`" alt="tldr 截屏"></p><h2 id="更多工具" tabindex="-1">更多工具 <a class="header-anchor" href="#更多工具" aria-label="Permalink to &quot;更多工具&quot;">​</a></h2><ul><li>如果你嫌 Spotify 的官方客户端太笨重，可以使用 <code>spotify-tui</code> 这个轻量级替代品。</li><li>如果你喜欢通过 UI 界面操作 git，可以看下 <code>gitui</code>。</li></ul><p>使用 Rust 编写的命令行工具和其他工具还有很多，详见 <a href="https://lib.rs/command-line-utilities" target="_blank" rel="noreferrer">Command line utilities — list of Rust libraries/crates // Lib.rs</a>。</p><h1 id="rust-实现文件批量下载" tabindex="-1">Rust 实现文件批量下载 <a class="header-anchor" href="#rust-实现文件批量下载" aria-label="Permalink to &quot;Rust 实现文件批量下载&quot;">​</a></h1><h2 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h2><p>首先我们需要安装 Rust。可以到 Rust 官网上进行下载并安装。接下来开始配置编辑文档。在新的Rust项目中创建一个新的main.rs文件。这是我们的主要工作文件。</p><h2 id="创建主函数" tabindex="-1">创建主函数 <a class="header-anchor" href="#创建主函数" aria-label="Permalink to &quot;创建主函数&quot;">​</a></h2><p>Rust程序的执行从主函数开始。在项目中的主文件创建主函数：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> urls</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#98C379;">       &quot;http://example.com/file1&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#98C379;">       &quot;http://example.com/file2&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">       ...</span></span>
<span class="line"><span style="color:#ABB2BF;">   ];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这段代码中，我们首先创建了一个字符串向量 <code>urls</code> 来存储待下载的文件URL。</p><h2 id="实现下载函数" tabindex="-1">实现下载函数 <a class="header-anchor" href="#实现下载函数" aria-label="Permalink to &quot;实现下载函数&quot;">​</a></h2><p>下一步是实现文件下载的函数。我们可以使用 <code>reqwest</code> crate 来完成HTTP 请求的操作，使用 <code>tokio</code> crate 则可以进行异步操作。先将它们添加到你的Cargo.toml文件中。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[dependencies]</span></span>
<span class="line"><span style="color:#61AFEF;">reqwest</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> version</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;0.11&quot;,</span><span style="color:#98C379;"> features</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;">] }</span></span>
<span class="line"><span style="color:#61AFEF;">tokio</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> version</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;1&quot;,</span><span style="color:#98C379;"> features</span><span style="color:#98C379;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;full&quot;</span><span style="color:#ABB2BF;">] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后更新一下依赖库：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> cargo</span><span style="color:#98C379;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建下载文件的函数：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> download_file</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(), </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E06C75;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> reqwest</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Path</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;downloads&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">last</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> stream</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bytes_stream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">   while</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">       file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write_all</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">?).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">?;</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">   Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这段代码利用异步I/O来从URL下载文件，然后保存到downloads文件夹下。</p><h2 id="并行下载" tabindex="-1">并行下载 <a class="header-anchor" href="#并行下载" aria-label="Permalink to &quot;并行下载&quot;">​</a></h2><p>现在我们需要在主函数中调用 <code>download_file</code> 函数。由于Rust支持并发执行，我们可以通过<code>futures</code>库下的<code>join_all</code>函数来并行下载这些文件：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> urls</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;http://example.com/file1&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(),...];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> download_futures</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> urls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">       .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">url</span><span style="color:#56B6C2;">|</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">download_file</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">       .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">runtime</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new_multi_thread</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">       .</span><span style="color:#61AFEF;">enable_all</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">       .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">       .</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">       .</span><span style="color:#61AFEF;">block_on</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">futures</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">future</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">join_all</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">download_futures</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   for</span><span style="color:#E06C75;"> res</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">       if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">           println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">       }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>spawn</code>函数能够创建一个新的异步任务并返回一个<code>JoinHandle</code>，当这个<code>JoinHandle</code>被执行的时候，它会返回其任务的输出。此外，我们使用了<code>block_on</code>来阻塞当前线程直到提供的future完成，<code>join_all</code>则会等待所有future完成，不管他们的完成顺序。</p><h1 id="rust-和-swift" tabindex="-1">Rust 和 Swift <a class="header-anchor" href="#rust-和-swift" aria-label="Permalink to &quot;Rust 和 Swift&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/WCb5oeHrP3KPPgSbqy4Kfw" target="_blank" rel="noreferrer">用 Rust 和 Swift 结合来写一个 App (qq.com)</a></p><h1 id="在rust-中开始使用mongodb" tabindex="-1">在Rust 中开始使用MongoDB <a class="header-anchor" href="#在rust-中开始使用mongodb" aria-label="Permalink to &quot;在Rust 中开始使用MongoDB&quot;">​</a></h1><p>MongoDB 是一种流行的 NoSQL 数据库，近年来越来越受到开发者的青睐。它为开发者提供了一种灵活、可扩展且高性能的数据库解决方案，适用于多种应用程序的开发。</p><p>对于 Rust 程序员来说，MongoDB 提供了一个优秀的选项，以快速、高效且可靠的方式存储和检索数据。Rust 是一种现代的、高性能的系统编程语言，旨在实现速度、安全性和并发性。它非常适合构建高性能、低级别的软件，并且在开发者中越来越受欢迎。</p><p>在本文中，我们将探讨 Rust 程序员如何利用 MongoDB 构建高性能、可扩展的应用程序。我会解释如何设置 MongoDB 数据库，并展示如何使用官方的 MongoDB Rust 驱动程序从 Rust 与 MongoDB 进行交互。</p><p>无论你是 MongoDB 的新手，还是希望利用这个强大的数据库技术的有经验的 Rust 程序员，本文都将为你提供必要的知识和技能，帮助你入门。</p><h2 id="「先决条件」" tabindex="-1"><strong>「先决条件」</strong> <a class="header-anchor" href="#「先决条件」" aria-label="Permalink to &quot;**「先决条件」**&quot;">​</a></h2><p>要跟随本文，你只需要以下几项：</p><ul><li>Rust 知识</li><li>一个可以工作的系统</li><li>在你的系统上安装 Rust</li></ul><h2 id="设置你的项目" tabindex="-1">设置你的项目 <a class="header-anchor" href="#设置你的项目" aria-label="Permalink to &quot;设置你的项目&quot;">​</a></h2><p>现在你的系统上已经安装了 MongoDB，是时候设置你的 Rust 项目以使用官方的 MongoDB Rust 驱动程序了。按照以下步骤开始：</p><ol><li>创建一个新的 Rust 项目。</li><li>打开终端，通过运行以下命令创建一个新的 Rust 项目：</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> new</span><span style="color:#98C379;"> myproject</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将创建一个名为&quot;myproject&quot;的新 Rust 项目。</p><ol><li>向你的项目添加 MongoDB Rust 驱动程序依赖项。打开项目目录中的 <code>Cargo.toml</code> 文件，并添加以下依赖项：</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[dependencies]</span></span>
<span class="line"><span style="color:#61AFEF;">mongodb</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &quot;2.3.1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这将向你的项目添加 MongoDB Rust 驱动程序依赖项。</p><ol><li>导入必要的库。打开项目目录中的 <code>src/main.rs</code> 文件，并添加以下行到文件顶部以导入必要的库：</li></ol><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">extern</span><span style="color:#C678DD;"> crate</span><span style="color:#ABB2BF;"> mongodb;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> mongodb</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">bson</span><span style="color:#ABB2BF;">::doc;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> mongodb</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">ClientOptions</span><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>连接到你的 MongoDB 服务器。在你的 <code>main</code> 函数中添加以下代码以连接到你的 MongoDB 服务器：</li></ol><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client_options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClientOptions</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mongodb://localhost:27017&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Client</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_options</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client_options</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这将使用连接字符串创建一个新的 <code>ClientOptions</code> 对象，然后用 <code>ClientOptions</code> 对象创建一个新的 <code>Client</code> 对象。</p><p>恭喜你，现在你的 Rust 项目已经设置好使用官方的 MongoDB Rust 驱动程序了。</p><h2 id="创建数据库" tabindex="-1">创建数据库 <a class="header-anchor" href="#创建数据库" aria-label="Permalink to &quot;创建数据库&quot;">​</a></h2><p>在使用 MongoDB 之前，你需要有一个数据库来存储集合。在本节中，我将向你展示如何使用 MongoDB Compass 创建一个新的数据库。</p><p>打开 MongoDB Compass 并点击屏幕左上角的&quot;Connect&quot;按钮。在 &quot;New Connection&quot;窗口中，输入你的 MongoDB 实例的连接详情。这包括主机名、端口号和必要的认证详情。点击 &quot;Connect&quot;以建立与你的 MongoDB 实例的连接。在左侧导航窗格中，点击&quot;Databases&quot;查看现有数据库列表。点击 &quot;Databases&quot;窗口左上角的&quot;Create Database&quot;按钮。输入你的新数据库名称（例如&quot;mydatabase&quot;）并点击&quot;Create&quot;。</p><p>恭喜你，你已经使用 MongoDB Compass 创建了一个新的数据库！现在你可以开始创建集合并向数据库添加文档了。</p><h2 id="「创建集合」" tabindex="-1"><strong>「创建集合」</strong> <a class="header-anchor" href="#「创建集合」" aria-label="Permalink to &quot;**「创建集合」**&quot;">​</a></h2><p>在 MongoDB 中，数据库集合相当于关系数据库中的表。集合是一组具有共同特征的 MongoDB 文档。</p><p>在本节中，我将向你展示如何使用 Rust 创建一个新的集合。</p><p>在你的 <code>src/main.rs</code> 文件中创建一个新的 Rust 函数。这个函数将在你的 MongoDB 数据库中创建一个新的集合。将以下代码添加到你的 <code>main.rs</code> 文件中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> create_collection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">database</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create_collection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个函数接受一个 <code>Client</code> 对象、一个数据库名称和一个集合名称作为参数。然后，它在指定的数据库中创建一个新的集合。</p><p>在你的 <code>main</code> 函数中添加以下代码以调用 <code>create_collection</code> 函数并在你的 MongoDB 数据库中创建一个新的集合：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client_options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClientOptions</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mongodb://localhost:27017&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Client</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_options</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client_options</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> db_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mydatabase&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> coll_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mycollection&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">create_collection</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码将创建一个新的 <code>Client</code> 对象，并调用 <code>create_collection</code> 函数来在 <code>mydatabase</code> 数据库中创建一个名为&quot;mycollection&quot;的新集合。</p><p>恭喜你，现在你已经使用 Rust 在你的 MongoDB 数据库中创建了一个新的集合。</p><h2 id="「插入文档」" tabindex="-1"><strong>「插入文档」</strong> <a class="header-anchor" href="#「插入文档」" aria-label="Permalink to &quot;**「插入文档」**&quot;">​</a></h2><p>在 MongoDB 中，行相当于集合中的文档。在本节中，我将向你展示如何使用 Rust 将新文档插入到 MongoDB 集合中。</p><p>在你的 <code>src/main.rs</code> 文件中创建一个新的 Rust 函数。这个函数将把你的 MongoDB 数据库中的指定集合插入一个新文档。将以下代码添加到你的 <code>main.rs</code> 文件中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> insert_document</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">database</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> coll</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> doc</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doc!</span><span style="color:#ABB2BF;"> { </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">    coll</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert_one</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个函数接受一个 <code>Client</code> 对象、一个数据库名称和一个集合名称作为参数。然后，它为指定的集合创建一个新的 <code>Collection</code> 对象，并插入一个新文档。</p><p>在你的 <code>main</code> 函数中添加以下代码以调用 <code>insert_document</code> 函数并将新文档插入到你的 MongoDB 集合中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client_options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClientOptions</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mongodb://localhost:27017&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Client</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_options</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client_options</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> db_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mydatabase&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> coll_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mycollection&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">insert_document</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码将创建一个新的 <code>Client</code> 对象，并调用 <code>insert_one</code> 方法将一个新文档插入到 <code>mycollection</code> 集合中，该文档包含 <code>name</code> 和 <code>age</code> 字段。</p><p>恭喜你，现在你已经使用 Rust 将新文档插入到你的 MongoDB 集合中了。</p><h2 id="「检索文档」" tabindex="-1"><strong>「检索文档」</strong> <a class="header-anchor" href="#「检索文档」" aria-label="Permalink to &quot;**「检索文档」**&quot;">​</a></h2><p>在 MongoDB 中，你可以通过使用特定过滤条件查询集合来检索文档。</p><p>在本节中，我将向你展示如何使用 Rust 从 MongoDB 集合中检索文档。</p><p>在你的 <code>src/main.rs</code> 文件中创建一个新的 Rust 函数。这个函数将从你的 MongoDB 数据库中的指定集合中检索一个文档。将以下代码添加到你的 <code>main.rs</code> 文件中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> get_document</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">database</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> coll</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> filter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doc!</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> coll</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find_one</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filter</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;No document found&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个函数接受一个 <code>Client</code> 对象、一个数据库名称和一个集合名称作为参数。然后，它为指定的集合创建一个新的 <code>Collection</code> 对象，并从中检索匹配指定过滤条件的文档。</p><p>在这个例子中，我们正在检索集合中字段名为 &quot;name&quot; 且值为 &quot;John&quot; 的文档。</p><p>在你的 <code>main</code> 函数中添加以下代码以调用 <code>get_document</code> 函数并从你的 MongoDB 集合中检索文档：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client_options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClientOptions</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mongodb://localhost:27017&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Client</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_options</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client_options</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> db_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mydatabase&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> coll_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mycollection&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">get_document</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="「删除文档」" tabindex="-1"><strong>「删除文档」</strong> <a class="header-anchor" href="#「删除文档」" aria-label="Permalink to &quot;**「删除文档」**&quot;">​</a></h2><p>在 MongoDB 中，你可以通过指定一个或多个匹配文档的条件来删除集合中的文档。</p><p>在本节中，我将向你展示如何使用 Rust 从 MongoDB 集合中删除文档。</p><p>在你的 <code>src/main.rs</code> 文件中创建一个新的 Rust 函数。这个函数将从你的 MongoDB 数据库中的指定集合中删除一个文档。将以下代码添加到你的 <code>main.rs</code> 文件中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> delete_document</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">database</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> coll</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> filter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doc!</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E06C75;">    coll</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete_one</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个函数接受一个 <code>Client</code> 对象、一个数据库名称和一个集合名称作为参数。然后，它为指定的集合创建一个新的 <code>Collection</code> 对象，并从中删除匹配指定过滤条件的文档。</p><p>在这个例子中，我们正在删除集合中字段名为 &quot;name&quot; 且值为 &quot;John&quot; 的文档。</p><p>在你的 <code>main</code> 函数中添加以下代码以调用 <code>delete_document</code> 函数并从你的 MongoDB 集合中删除文档：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client_options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClientOptions</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mongodb://localhost:27017&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Client</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_options</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client_options</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> db_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mydatabase&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> coll_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mycollection&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">delete_document</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码将创建一个新的 <code>Client</code> 对象，并删除 <code>mycollection</code> 集合中匹配过滤条件的文档。</p><p>恭喜你，现在你已经使用 Rust 从你的 MongoDB 集合中删除了文档。</p><h2 id="修改文档" tabindex="-1">修改文档 <a class="header-anchor" href="#修改文档" aria-label="Permalink to &quot;修改文档&quot;">​</a></h2><p>在 MongoDB 中，你可以通过更新文档中的一个或多个字段来修改集合中的文档。在本节中，我将向你展示如何使用 Rust 修改 MongoDB 集合中的文档。</p><p>在你的 <code>src/main.rs</code> 文件中创建一个新的 Rust 函数。这个函数将更新你的 MongoDB 数据库中指定集合中的文档。将以下代码添加到你的 <code>main.rs</code> 文件中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> update_document</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">Client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">database</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> coll</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> filter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doc!</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> update</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doc!</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&quot;$set&quot;</span><span style="color:#ABB2BF;">: {</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;">}};</span></span>
<span class="line"><span style="color:#E06C75;">    coll</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update_one</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个函数接受一个 <code>Client</code> 对象、一个数据库名称和一个集合名称作为参数。然后，它为指定的集合创建一个新的 <code>Collection</code> 对象，并更新其中匹配指定过滤条件的文档。</p><p>在这个例子中，我们正在更新集合中字段名为 &quot;name&quot; 且值为 &quot;John&quot; 的文档，并将 &quot;age&quot; 字段的值设置为 &quot;35&quot;。</p><p>在你的 <code>main</code> 函数中添加以下代码以调用 <code>update_document</code> 函数并更新你的 MongoDB 集合中的文档：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client_options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClientOptions</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mongodb://localhost:27017&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Client</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_options</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">client_options</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> db_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mydatabase&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> coll_name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mycollection&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">update_document</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db_name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">coll_name</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码将创建一个新的 <code>Client</code> 对象，并更新 <code>mycollection</code> 集合中匹配过滤条件的文档。</p><p>恭喜你，现在你已经使用 Rust 更新了你的 MongoDB 集合中的文档。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>在本文中，我向你介绍了 MongoDB 以及如何将其与 Rust 结合使用。我涵盖了设置 MongoDB 服务器、创建数据库和在数据库中创建集合的基础知识。我还展示了如何使用 Rust 插入、检索、修改和删除 MongoDB 数据库中的数据。</p><p>通过结合 Rust 编程语言和 MongoDB 数据库，你可以构建能够处理大量数据的强大且可扩展的应用程序。Rust 的性能和安全性特性使其成为与 MongoDB 等数据库合作的极佳选择。</p>`,280),F=[m];function C(h,A,g,E,f,D){return n(),a("div",null,F)}const _=s(b,[["render",C]]);export{k as __pageData,_ as default};
