import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const h=JSON.parse('{"title":"如何使用 GitHub Actions 构建 Docker 镜像","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/Docker应用/如何使用 GitHub Actions 构建 Docker 镜像.md","filePath":"Document/Docker/Docker应用/如何使用 GitHub Actions 构建 Docker 镜像.md","lastUpdated":1716297813000}'),p={name:"Document/Docker/Docker应用/如何使用 GitHub Actions 构建 Docker 镜像.md"},t=e(`<h1 id="如何使用-github-actions-构建-docker-镜像" tabindex="-1">如何使用 GitHub Actions 构建 Docker 镜像 <a class="header-anchor" href="#如何使用-github-actions-构建-docker-镜像" aria-label="Permalink to &quot;如何使用 GitHub Actions 构建 Docker 镜像&quot;">​</a></h1><p>本文将帮助您使用GitHub操作设置一个工作流，该工作流将构建和标记Docker镜像并将其推送到Docker Hub注册表。</p><h2 id="创建-github-repo" tabindex="-1"><strong>创建 GitHub Repo</strong> <a class="header-anchor" href="#创建-github-repo" aria-label="Permalink to &quot;**创建 GitHub Repo**&quot;">​</a></h2><p>让我们从创建一个新的GitHub存储库开始，它将保存我们的代码（在我们的例子中，实际上只需要一个Dockerfile）来构建镜像。在GitHub中创建repo，并将其命名为您想要的任何名称。在repo的根目录中添加一个文件，名为Dockerfile。如果你沿着我，你将构建一个包含Angular CLI的镜像。如果你需要一个不同的镜像，那么修改以下内容以满足你的需求。Dockerfile的内容应该是：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># ./Dockerfile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FROM node:12-alpine as node-angular-cli</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LABEL authors=&quot;Tinywan&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Linux setup</span></span>
<span class="line"><span># I got this from another, deprecated Angular CLI image.</span></span>
<span class="line"><span># I trust that developer, so I continued to use this, but you</span></span>
<span class="line"><span># can leave it out if you want.</span></span>
<span class="line"><span>RUN apk update \\</span></span>
<span class="line"><span>  &amp;&amp; apk add --update alpine-sdk \\</span></span>
<span class="line"><span>  &amp;&amp; apk del alpine-sdk \\</span></span>
<span class="line"><span>  &amp;&amp; rm -rf /tmp/* /var/cache/apk/* *.tar.gz ~/.npm \\</span></span>
<span class="line"><span>  &amp;&amp; npm cache verify \\</span></span>
<span class="line"><span>  &amp;&amp; sed -i -e &quot;s/bin\\/ash/bin\\/sh/&quot; /etc/passwd</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Angular CLI</span></span>
<span class="line"><span>RUN npm install -g @angular/cli@8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="创建github-action" tabindex="-1"><strong>创建GitHub Action</strong> <a class="header-anchor" href="#创建github-action" aria-label="Permalink to &quot;**创建GitHub Action**&quot;">​</a></h2><p>因此，要开始使用GitHub操作，请在GitHub中的repo页面上单击<code>Actions</code>选项卡：</p><p>![图片](./如何使用 GitHub Actions 构建 Docker 镜像.assets/640-88848498.webp)</p><p>您现在应该看到一个类似于以下内容的页面：</p><p>![图片](./如何使用 GitHub Actions 构建 Docker 镜像.assets/640-1716210984245-99.webp)</p><p>这一步将我们登录到Docker Hub Registry。我们输出密码，然后将其传递给docker login命令。不过，这里有一些新的东西，那就是我们正在使用的秘密。GitHub在每个存储库的设置中有一个部分，您可以在其中设置用于GitHub操作等的秘密。</p><p>这很棒，因为否则就没有办法登录到第三方服务，如Docker Hub，而不把你的密码或访问密钥放在仓库中，每个人都可以看到。要找到secrets，请单击存储库顶部的设置，然后单击左侧导航列表中的Secrets，然后添加您需要的secrets，在本例中是我们的Docker Hub用户名和密码：</p><p>![图片](./如何使用 GitHub Actions 构建 Docker 镜像.assets/640-1716210984245-100.webp)</p><h2 id="标签和发布" tabindex="-1"><strong>标签和发布</strong> <a class="header-anchor" href="#标签和发布" aria-label="Permalink to &quot;**标签和发布**&quot;">​</a></h2><p>最后一步是在我们的GitHub存储库中标记一个版本。这将启动我们的工作流程的构建。要做到这一点，点击代码标签下的<code>releases</code>部分：</p><p>![图片](./如何使用 GitHub Actions 构建 Docker 镜像.assets/640-1716210984245-101.webp)</p><p>点击“Draft a new release”按钮。GitHub将引导您完成创建发布的步骤，但您应该选择标记名称和所需的发布提交。您还可以添加标题和说明。记住两件事：您在这里使用的标签名称将用作Docker镜像的标签名称，一旦您单击“发布版本”按钮，工作流将启动。一旦你准备好了，发布新版本！</p><h2 id="查看工作流输出" tabindex="-1"><strong>查看工作流输出</strong> <a class="header-anchor" href="#查看工作流输出" aria-label="Permalink to &quot;**查看工作流输出**&quot;">​</a></h2><p>要查看工作流中发生的情况，并在需要时进行调试，请返回到存储库中的Actions选项卡。一旦你创建了一个动作，该页面将看起来像这样：</p><p>![图片](./如何使用 GitHub Actions 构建 Docker 镜像.assets/640-1716210984245-102.webp)</p><p>除了在Actions选项卡中输出您的工作流之外，不要忘记转到Docker Hub并在那里查看您的图像！</p><p>![图片](./如何使用 GitHub Actions 构建 Docker 镜像.assets/640-1716210984245-103.webp)</p>`,22),i=[t];function r(c,o,l,u,b,d){return n(),a("div",null,i)}const k=s(p,[["render",r]]);export{h as __pageData,k as default};
