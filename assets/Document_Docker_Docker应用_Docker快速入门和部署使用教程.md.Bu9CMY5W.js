import{_ as e,c as s,o as a,a3 as n}from"./chunks/framework.zGi9i9Bf.js";const o="/ProgramLearnNotes/assets/640-555149.Cq1LX8Dn.webp",c="/ProgramLearnNotes/assets/640-1716210901544-88.OrlzEXaH.webp",p="/ProgramLearnNotes/assets/640-1716210901544-89.Cd7PCgoz.webp",r="/ProgramLearnNotes/assets/640-1716210901544-90.DHGGV3il.webp",_=JSON.parse('{"title":"Docker快速入门和部署使用教程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/Docker应用/Docker快速入门和部署使用教程.md","filePath":"Document/Docker/Docker应用/Docker快速入门和部署使用教程.md","lastUpdated":1716297813000}'),d={name:"Document/Docker/Docker应用/Docker快速入门和部署使用教程.md"},l=n('<h1 id="docker快速入门和部署使用教程" tabindex="-1">Docker快速入门和部署使用教程 <a class="header-anchor" href="#docker快速入门和部署使用教程" aria-label="Permalink to &quot;Docker快速入门和部署使用教程&quot;">​</a></h1><h2 id="_0x01-前言" tabindex="-1">0x01 前言 <a class="header-anchor" href="#_0x01-前言" aria-label="Permalink to &quot;0x01 前言&quot;">​</a></h2><p>在本教程中，您将学习如何在云服务器 Cloud Linux 3操作系统部署Docker，并制作Docker镜像。</p><p>Docker是一款开源的应用容器引擎，具有可移植性、可扩展性、安全性和管理性等优势。开发者可将应用程序和依赖项打包到一个可移植的容器中，快速发布到Linux机器上并实现虚拟化，实现更高效地构建、部署和管理应用程序。</p><h2 id="_0x02-部署docker" tabindex="-1">0x02 部署Docker <a class="header-anchor" href="#_0x02-部署docker" aria-label="Permalink to &quot;0x02 部署Docker&quot;">​</a></h2><p>本教程以部署社区版Docker（docker-ce）为例。</p><blockquote><p>1、执行以下命令，下载<code>docker-ce</code>的<code>yum</code>源。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>2、执行以下命令，安装<code>docker-ce</code></p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo yum -y install docker-ce</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>3、执行以下命令，确认Docker是否部署成功。如果回显信息类似如图所示，表示Docker已部署成功。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>docker -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>4、执行以下命令，启动<code>Docker</code>服务。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo systemctl start docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>5、执行以下命令，设置<code>Docker</code>开机自启动。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo systemctl enable docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>6、执行以下命令，查看Docker服务的运行状态。如果回显信息显示<code>Active：active（running）</code>时，表示Docker已启动。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>systemctl status docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+o+`" alt="图片"></p><h2 id="_0x03-制作docker镜像" tabindex="-1">0x03 制作Docker镜像 <a class="header-anchor" href="#_0x03-制作docker镜像" aria-label="Permalink to &quot;0x03 制作Docker镜像&quot;">​</a></h2><blockquote><p>1、执行以下命令，拉取Nginx镜像。本示例以拉取 Nginx 1.23.4为例。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker pull nginx:1.23.4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>2、执行以下命令，新建并编辑<code>Dockerfile</code>文件。</p></blockquote><p>执行以下命令，新建并编辑Dockerfile文件。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>vim Dockerfile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按<code>i</code>进入编辑模式，并添加以下内容，改造原镜像。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#声明基础镜像来源，本示例中基础镜像为拉取的nginx:1.23.4镜像</span></span>
<span class="line"><span>FROM nginx:1.23.4</span></span>
<span class="line"><span>#RUN后面接容器运行前需要执行的命令，本示例将Nginx的首页内容改为Welcome, Docker!</span></span>
<span class="line"><span>RUN echo &#39;&lt;h1&gt;Welcome, Docker! 开源技术小栈 &lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>按<code>Esc</code>键，输入<code>:wq</code>并按<code>Enter</code>键，保存并退出<code>Dockerfile</code>文件。</p><blockquote><p>3、执行以下命令，基于基础镜像nginx构建新镜像。</p></blockquote><p>命令格式为<code>docker build -t [镜像名称]:[镜像版本] .</code>，命令末尾的<code>.</code>表示<code>Dockerfile</code>文件的路径，不能忽略。以基于构建新镜像<code>tinywan-image001:v1</code>为例，则命令为：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker build -t tinywan-image001:v1 .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+c+'" alt="图片"></p><blockquote><p>4、执行以下命令，查看新镜像是否构建成功。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker images</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如下图回显所示，表示构建成功。</p><p><img src="'+p+'" alt="图片"></p><blockquote><p>5、执行以下命令，将<code>Nginx</code>的<code>80</code>端口映射至服务器的<code>8080</code>端口，以启动镜像并实现通过公网访问。</p></blockquote><p>命令格式为<code>docker run --name [容器名称] -p 8888:80 -d [镜像名称]:[镜像版本]</code>，</p><p>示例命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>sudo docker run --name tinywan-nginx-test -p 8888:80 -d tinywan-image001:v1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_0x04-完成" tabindex="-1"><strong>0x04 完成</strong> <a class="header-anchor" href="#_0x04-完成" aria-label="Permalink to &quot;**0x04 完成**&quot;">​</a></h2><blockquote><p>部署和使用Docker制作镜像后，在浏览器中输入<code>http://&lt;公网IP地址&gt;:8888</code>并访问，如果出现如图所示内容，说明容器运行成功且镜像制作成功。</p></blockquote><p><img src="'+r+'" alt="图片"></p>',43),i=[l];function t(u,b,k,m,v,g){return a(),s("div",null,i)}const x=e(d,[["render",t]]);export{_ as __pageData,x as default};
