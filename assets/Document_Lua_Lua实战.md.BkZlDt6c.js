import{_ as s,c as a,o as n,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const p="/ProgramLearnNotes/assets/1671d4842a48b7c9tplv-t2oaga2asx-jj-mark3024000q75.Dji64avS.png",e="/ProgramLearnNotes/assets/1671d483bade267etplv-t2oaga2asx-jj-mark3024000q75.D_yrxQPT.png",m=JSON.parse('{"title":"Lua实战","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Lua/Lua实战.md","filePath":"Document/Lua/Lua实战.md","lastUpdated":1715181604000}'),o={name:"Document/Lua/Lua实战.md"},r=l(`<h1 id="lua实战" tabindex="-1">Lua实战 <a class="header-anchor" href="#lua实战" aria-label="Permalink to &quot;Lua实战&quot;">​</a></h1><h2 id="openresty-nginx与lua的梦幻联动-打造高性能web应用" tabindex="-1">OpenResty：Nginx与Lua的梦幻联动，打造高性能Web应用 <a class="header-anchor" href="#openresty-nginx与lua的梦幻联动-打造高性能web应用" aria-label="Permalink to &quot;OpenResty：Nginx与Lua的梦幻联动，打造高性能Web应用&quot;">​</a></h2><p>在Web开发领域，寻求性能与灵活性之间的完美平衡是开发者永恒的追求。</p><p>OpenResty以其独特的架构设计，将Nginx的高性能与Lua的轻量级脚本语言紧密结合，为构建高效、灵活的Web应用提供了全新的解决方案。</p><h3 id="openresty-nginx与lua的强强联合" tabindex="-1">OpenResty：Nginx与Lua的强强联合 <a class="header-anchor" href="#openresty-nginx与lua的强强联合" aria-label="Permalink to &quot;OpenResty：Nginx与Lua的强强联合&quot;">​</a></h3><p>OpenResty并非仅仅是一款Web服务器，它是基于Nginx并扩展了Lua脚本处理能力的一个全功能平台。这意味着，开发者能够在Nginx服务的生命周期中，几乎任何阶段（如访问控制、请求路由、响应生成等）嵌入执行Lua脚本，实现业务逻辑的动态化和精细化控制。</p><h3 id="openresty的优势" tabindex="-1">OpenResty的优势 <a class="header-anchor" href="#openresty的优势" aria-label="Permalink to &quot;OpenResty的优势&quot;">​</a></h3><ol><li>高性能：Nginx本身的高性能特性使得OpenResty在处理大量并发请求时表现出色。</li><li>灵活性：通过嵌入Lua代码，开发者可以在Web应用的各个层面实现自定义逻辑，满足不同业务场景的需求。</li><li>可扩展性：OpenResty提供了丰富的模块和API，方便开发者进行扩展和定制。 <strong>一个简单的OpenResty示例</strong></li></ol><p>下面是一个使用OpenResty和Lua实现的简单示例，用于演示如何在Web应用中嵌入Lua代码实现自定义逻辑。</p><p>假设我们有一个Web应用，需要实现对所有请求进行访问控制，只允许特定IP地址的用户访问。我们可以使用OpenResty和Lua来实现这一功能。</p><p>首先，确保你已经安装了OpenResty。然后，创建一个名为access_control.lua的Lua脚本文件，内容如下：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">-- 允许的IP地址列表</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> allowed_ips</span><span style="color:#ABB2BF;"> = {</span><span style="color:#98C379;">&quot;127.0.0.1&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 客户端IP地址</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> ip</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">ngx</span><span style="color:#ABB2BF;">.var.remote_addr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 判断IP地址是否在允许列表中</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> is_allowed</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">ip</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">allowed_ips</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> _</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">allowed_ip</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> ipairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">allowed_ips</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> allowed_ip</span><span style="color:#ABB2BF;"> == </span><span style="color:#E06C75;">ip</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> not </span><span style="color:#61AFEF;">is_allowed</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ip</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">allowed_ips</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    -- 设置返回状态码为403 Forbidden</span></span>
<span class="line"><span style="color:#E06C75;">    ngx</span><span style="color:#ABB2BF;">.status = </span><span style="color:#E06C75;">ngx</span><span style="color:#ABB2BF;">.HTTP_FORBIDDEN</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    -- 返回错误信息</span></span>
<span class="line"><span style="color:#E06C75;">    ngx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Access denied!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    -- 结束请求处理</span></span>
<span class="line"><span style="color:#E06C75;">    ngx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ngx</span><span style="color:#ABB2BF;">.HTTP_FORBIDDEN)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 将请求转发到指定的上游服务处理</span></span>
<span class="line"><span style="color:#E06C75;">ngx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@xx_upstream&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>Lua语言的注释规则：</p><ul><li>单行注释使用两个连字符（--）。</li><li>多行注释则可以使用 --[[ 和 --]] 标记对。</li></ul><p>接下来，在Nginx的配置文件（通常是conf/nginx.conf）中，添加以下配置：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">http</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    server</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">        ...</span></span>
<span class="line"><span style="color:#61AFEF;">        location</span><span style="color:#98C379;"> /</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">            ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            # 加载并执行Lua脚本文件</span></span>
<span class="line"><span style="color:#61AFEF;">            content_by_lua_file</span><span style="color:#98C379;"> lua/access_control.lua</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">            ...</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在Nginx配置文件中，使用content_by_lua_file指定Lua文件，文件路径使用相对于nginx目录的相对路径（上述示例中，lua与conf在同一级目录）；也可以使用content_by_lua_block，直接在Nginx配置文件中编写Lua代码块。</p><p>Nginx配置文件采用井号（#）进行单行注释。如果使用content_by_lua_block编写Lua代码块，需要注意Nginx配置文件与Lua语言的注释区别。</p><p>最后，重新加载Nginx配置，使配置生效：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> bin/openresty</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> reload</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在，只有允许列表中的IP地址才能访问Web应用，其他IP地址的请求将被拒绝并返回403 Forbidden状态码。可以通过curl命令的-I（字母i的大写）选项查看返回头信息。</p><p>使用本机访问时：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">~$ curl -I http://127.0.0.1/</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP/1.1</span><span style="color:#D19A66;"> 200</span><span style="color:#98C379;"> OK</span></span>
<span class="line"><span style="color:#61AFEF;">Server:</span><span style="color:#98C379;"> openresty/1.25.3.1</span></span>
<span class="line"><span style="color:#61AFEF;">Date:</span><span style="color:#98C379;"> Tue,</span><span style="color:#D19A66;"> 05</span><span style="color:#98C379;"> Mar</span><span style="color:#D19A66;"> 2024</span><span style="color:#98C379;"> 13:27:45</span><span style="color:#98C379;"> GMT</span></span>
<span class="line"><span style="color:#61AFEF;">Content-Type:</span><span style="color:#98C379;"> text/html</span></span>
<span class="line"><span style="color:#61AFEF;">Connection:</span><span style="color:#98C379;"> keep-alive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用他机访问时：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">~$ curl -I http://127.0.0.1/</span></span>
<span class="line"><span style="color:#61AFEF;">HTTP/1.1</span><span style="color:#D19A66;"> 403</span><span style="color:#98C379;"> Forbidden</span></span>
<span class="line"><span style="color:#61AFEF;">Server:</span><span style="color:#98C379;"> openresty/1.25.3.1</span></span>
<span class="line"><span style="color:#61AFEF;">Date:</span><span style="color:#98C379;"> Tue,</span><span style="color:#D19A66;"> 05</span><span style="color:#98C379;"> Mar</span><span style="color:#D19A66;"> 2024</span><span style="color:#98C379;"> 13:28:49</span><span style="color:#98C379;"> GMT</span></span>
<span class="line"><span style="color:#61AFEF;">Content-Type:</span><span style="color:#98C379;"> text/html</span></span>
<span class="line"><span style="color:#61AFEF;">Connection:</span><span style="color:#98C379;"> keep-alive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>OpenResty作为一款集成了Nginx和Lua的高性能Web平台，为开发者提供了强大的扩展能力和灵活性。通过嵌入Lua代码，我们可以在Web应用的各个层面实现自定义逻辑，满足不同业务场景的需求。希望本文能够帮助你了解OpenResty的优势和用法，并激发你对高性能Web应用的探索热情。</p><h2 id="lua实现正则表达式匹配" tabindex="-1">Lua实现正则表达式匹配 <a class="header-anchor" href="#lua实现正则表达式匹配" aria-label="Permalink to &quot;Lua实现正则表达式匹配&quot;">​</a></h2><p>在编程世界中，正则表达式是一个强大的工具，它能帮助我们高效地处理字符串匹配和替换的任务。Lua作为一种轻量级、可嵌入的脚本语言，也提供了丰富的字符串处理功能，其中就包括模式匹配。本文将探讨如何在Lua中使用基于字符串模式匹配的API来封装函数，检测字符串是否匹配正则表达式，并特别介绍一下在OpenResty环境下，如何利用ngx.re库进行高效的正则处理。</p><h3 id="一、lua中的字符串模式匹配" tabindex="-1">一、Lua中的字符串模式匹配 <a class="header-anchor" href="#一、lua中的字符串模式匹配" aria-label="Permalink to &quot;一、Lua中的字符串模式匹配&quot;">​</a></h3><p>Lua语言内置了一套强大的字符串模式匹配API，通过这套API，我们可以方便地进行正则表达式的匹配和替换操作。</p><p>Lua的字符串模式匹配主要依赖于string.find、string.match、string.sub等函数。这些函数都接受一个模式字符串作为参数，模式字符串中可以使用各种正则表达式元字符来定义匹配规则。</p><p>在Lua中，可以使用string.match函数来进行字符串匹配。该函数会返回第一个匹配到的捕获结果，如果没有匹配到则返回nil。例如：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> pattern</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;139[0-9]*&quot;</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> phone_number</span><span style="color:#ABB2BF;">= </span><span style="color:#98C379;">&quot;13912341234&quot;</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">phone_number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 输出匹配的号码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的代码中，我们定义了一个模式“139[0-9]*”，用于匹配以“139”开头的手机号码，并捕获其后的任意数字字符。然后，我们使用string.match函数对手机号码进行匹配，并打印出匹配结果。</p><p>Lua匹配单个数字也可以使用“%d”。然而，Lua并未采用正则表达式的完整语法，上述示例如果想要精确匹配11位数字的号码，不能使用“139%d{8}”或者“139[0-9]{8}”这种模式，可以使用“139%d%d%d%d%d%d%d%d”。</p><p>如果想匹配以“138”或者“139”开头的手机号，也不能使用“138%d*|139%d*”这种模式。因为在Lua的模式匹配语法中，竖线“|”只是一个普通的字符。可以自定义函数，将竖线分隔的模式拆分开，然后对各部分单独进行模式匹配。</p><h3 id="二、封装函数检测字符串匹配" tabindex="-1">二、封装函数检测字符串匹配 <a class="header-anchor" href="#二、封装函数检测字符串匹配" aria-label="Permalink to &quot;二、封装函数检测字符串匹配&quot;">​</a></h3><p>为了方便地实现“138%d*|139%d*”这种模式匹配，我们可以通过封装函数来完成。下面是一个简单的示例：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> _M</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _M</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">delimiter</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> from</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> start</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">finish</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">delimiter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> start</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#56B6C2;">        table.insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">string.sub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E06C75;">        from</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">finish</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E06C75;">        start</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">finish</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">delimiter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#56B6C2;">    table.insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">string.sub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _M</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">regmatch</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">pattern</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;"> == </span><span style="color:#E06C75;">null</span><span style="color:#ABB2BF;"> or </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;"> == </span><span style="color:#E06C75;">null</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> pattern_table</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">_M</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;|&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> _</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_pattern</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> ipairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pattern_table</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">        local</span><span style="color:#E06C75;"> start</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">finish</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_pattern</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> start</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> and </span><span style="color:#E06C75;">finish</span><span style="color:#ABB2BF;"> == </span><span style="color:#E06C75;">len</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> _M</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>在这个示例中，我们定义了两个函数：split和regmatch，前者将模式按竖线拆分，后者逐个对单个模式进行匹配。</p><p>_M通常在编写模块时出现，用来组织和导出模块的功能。它是一个表（table），用于存储模块提供的所有函数和变量，最后返回这个表，这样外部脚本可以通过require导入这个模块并访问_M中的内容。</p><p>将上述脚本保存为regmatch.lua文件，参考以下示例使用其中的函数：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> reg</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">require</span><span style="color:#98C379;"> &quot;regmatch&quot;</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> pattern</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;138%d*|139%d*&quot;</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> phone_number</span><span style="color:#ABB2BF;">= </span><span style="color:#98C379;">&quot;13912341234&quot;</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">phone_number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 输出匹配的号码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="三、openresty与ngx-re库" tabindex="-1">三、OpenResty与ngx.re库 <a class="header-anchor" href="#三、openresty与ngx-re库" aria-label="Permalink to &quot;三、OpenResty与ngx.re库&quot;">​</a></h3><p>OpenResty是一个基于Nginx与LuaJIT的高性能Web平台，它允许开发者使用Lua语言来扩展Nginx的功能。在OpenResty中，我们可以使用ngx.re库来进行高效的正则表达式处理。</p><p>ngx.re库提供了比Lua标准库更强大的正则表达式功能，并且支持JIT（即时编译）以提高性能。下面是一个在OpenResty中使用ngx.re库进行正则表达式匹配的示例：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/resty</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> ngx</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ngx&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> phone_number</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> pattern</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 执行正则匹配，options可以是&quot;jo&quot;（分别对应于ngx.RE_JAVASCRIPT_COMPAT和ngx.RE_OPTIMIZE选项）</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> match</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">ngx</span><span style="color:#ABB2BF;">.re.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">phone_number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;jo&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> err</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> match</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在这个示例中，通过require语句引入了ngx库，然后使用ngx.re.match进行正则表达式匹配，并可以设置各种选项来控制匹配的行为，更多选项将在后续介绍。如果匹配成功，则返回true；否则返回false。</p><p>注意该脚本的Shebang是#!/usr/bin/resty，区别于使用官方Lua解释器的#!/usr/bin/lua。</p><p>为方便测试，通过arg表来访问命令行参数，将该示例保存为文件ngxretest.lua，测试正则表达式匹配：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">~$ ./ngxretest.lua </span><span style="color:#98C379;">&quot;13912341234&quot;</span><span style="color:#98C379;"> &quot;^(138\\d{8}|139\\d{8})$&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过封装函数和使用ngx.re库，我们可以更加方便地在Lua和OpenResty环境中进行正则表达式匹配和处理。无论是简单的字符串模式匹配还是复杂的正则表达式处理，Lua都为我们提供了强大的支持。</p><h2 id="lua语言探秘-以n皇后问题展现其魅力" tabindex="-1">Lua语言探秘：以N皇后问题展现其魅力 <a class="header-anchor" href="#lua语言探秘-以n皇后问题展现其魅力" aria-label="Permalink to &quot;Lua语言探秘：以N皇后问题展现其魅力&quot;">​</a></h2><p>今天以N皇后问题为例，直观地展示Lua语言的特点和魅力。</p><p>N皇后问题是回溯算法的典型案例。在N×N的棋盘上放置N个皇后，使得任何两个皇后都不能相互攻击，即：不在同一行、同一列或同一斜线上。这个问题不仅考验了我们的逻辑思维能力，还能很好地展现编程语言的特性。</p><p>Lua语言是一种轻量级、可嵌入的脚本语言，它设计简单、清晰且易于学习。在解决N皇后问题时，Lua语言的简洁性和高效性得到了充分体现。</p><p>首先，Lua语言具有强大的数组和表处理能力。在解决N皇后问题时，我们需要频繁地访问和修改棋盘上的状态。Lua中的表（table）可以方便地存储和操作这些数据，使得我们能够轻松地实现问题的求解。</p><p>其次，Lua语言的语法简单明了，易于上手。这使得我们可以更加专注于问题本身，而不是花费大量时间在语言学习上。在编写N皇后问题的解决方案时，我们可以快速地构建出清晰、易懂的代码结构。</p><p>此外，Lua语言还具有高效的执行速度。虽然它是一种脚本语言，但在性能上并不逊色于其他主流编程语言。这使得Lua在处理复杂问题时能够保持高效的运行速度，从而更快地找到N皇后问题的解。</p><p>要解决N皇后问题，可以用一个由N个数字组成的数组来表示可能的解决方案，数组下标对应棋盘的行号，数组元素值代表棋盘的列。Lua的表作为数组时索引是从1开始的。例如，数组{1,5,8,6,3,7,2,4}表示皇后在8x8棋盘中的位置分别是(1,1)、(2,5)、(3,8)、(4,6)、(5,3)、(6,7)、(7,2)、(8,4)。</p><p>下面是一个简单的Lua程序示例，使用回溯算法解决N皇后问题：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/lua</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 棋盘大小默认为8*8，可通过命令行参数调整</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> #</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> and </span><span style="color:#56B6C2;">string.match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;%d&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#E06C75;">    N</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">tonumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#E06C75;">    N</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">math.min</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">math.max</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">N</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#E06C75;">    N</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">8</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 判断当前位置是否可以放置皇后</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isPlaceOk</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">board</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">row</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">col</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">row</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        -- 检查列</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> board</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] == </span><span style="color:#E06C75;">col</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        -- 检查左上对角线</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> board</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] == </span><span style="color:#E06C75;">col</span><span style="color:#ABB2BF;"> - (</span><span style="color:#E06C75;">row</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        -- 检查右上对角线</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> board</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] == </span><span style="color:#E06C75;">col</span><span style="color:#ABB2BF;"> + (</span><span style="color:#E06C75;">row</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 打印解决方案</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> printSolution</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">board</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">N</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#56B6C2;">        io.write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#56B6C2;">    io.write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> N</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">4</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        -- 输出4*4的棋盘示意图</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">N</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> j</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">N</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#56B6C2;">                io.write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] == </span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;"> and </span><span style="color:#98C379;">&quot;X&quot; </span><span style="color:#ABB2BF;">or </span><span style="color:#98C379;">&quot;-&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            end</span></span>
<span class="line"><span style="color:#56B6C2;">            io.write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#56B6C2;">        io.write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 添加皇后到棋盘进行求解</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> addQueen</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">board</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">row</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> row</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#E06C75;">N</span><span style="color:#C678DD;"> then</span><span style="color:#7F848E;font-style:italic;">  -- 所有皇后都已放置</span></span>
<span class="line"><span style="color:#61AFEF;">        printSolution</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> col</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">N</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#61AFEF;"> isPlaceOk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">row</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">col</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#E06C75;">            board</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">row</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">col</span></span>
<span class="line"><span style="color:#61AFEF;">            addQueen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">row</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        end</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 初始化棋盘并开始求解</span></span>
<span class="line"><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#61AFEF;">addQueen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">board</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>在上面的示例中，定义了一个isPlaceOk函数，用于检查在某个位置上放置皇后是否可以避免各皇后相互攻击。然后，使用了回溯法来求解N皇后问题，通过不断地尝试每一个位置，并在找到合法位置后继续为下一皇后寻找合法位置。当找到一组解时，打印出棋盘的状态。</p><p>当棋盘大小为4x4时，问题只有二组解，除了输出代表棋盘布局的数组值，还输出4x4的棋盘示意图，方便对照查看结果。</p><p>通过这个示例，我们可以看到Lua语言在解决N皇后问题时的简洁性和高效性。当然，Lua语言还有更多强大的功能和特性等待我们去发掘和应用。</p><h2 id="揭秘lua数学库math-让计算变得如此简单" tabindex="-1">揭秘Lua数学库math：让计算变得如此简单 <a class="header-anchor" href="#揭秘lua数学库math-让计算变得如此简单" aria-label="Permalink to &quot;揭秘Lua数学库math：让计算变得如此简单&quot;">​</a></h2><p>参考手册：<a href="https://www.lua.org/manual" target="_blank" rel="noreferrer">https://www.lua.org/manual</a></p><p>在编程的世界中，数学运算是一项不可或缺的技能。而对于Lua语言的使用者来说，math库就如同一位得力的助手，帮助我们轻松应对各种数学挑战。今天，就让我们一起走进Lua的math库，探索它为我们带来的便利与神奇。</p><h3 id="一、math库概述" tabindex="-1">一、math库概述 <a class="header-anchor" href="#一、math库概述" aria-label="Permalink to &quot;一、math库概述&quot;">​</a></h3><p>Lua的math库提供了一系列用于数学运算的函数，涵盖了基础数学、三角函数、指数和对数函数等多个方面。这些函数简单易用，能够帮助我们快速完成各种复杂的数学计算。</p><h3 id="二、常用函数介绍" tabindex="-1">二、常用函数介绍 <a class="header-anchor" href="#二、常用函数介绍" aria-label="Permalink to &quot;二、常用函数介绍&quot;">​</a></h3><h4 id="_1-基础数学函数" tabindex="-1">1.基础数学函数 <a class="header-anchor" href="#_1-基础数学函数" aria-label="Permalink to &quot;1.基础数学函数&quot;">​</a></h4><p>math.abs(x)：返回x的绝对值。</p><p>math.floor(x)：返回小于或等于x的最大整数值。</p><p>math.ceil(x)：返回大于或等于x的最小整数值。</p><p>math.modf(x)：返回x的整数部分和x的小数部分，它的第二个结果始终是浮点值。</p><p>math.max(x, y, ...)：返回参数中的最大值。</p><p>math.min(x, y, ...)：返回参数中的最小值。</p><p>math.random([min, [max]])：返回一个随机数，可选参数为整数。如果不带参数，返回一个在[0,1)范围内均匀分布的伪随机浮点值；如果带一个参数（该参数大于等于1），返回[1, 参数]之间的伪随机整数；如果带两个参数，返回[min, max]之间的伪随机整数。</p><p>math.randomseed(x)：将x设置为伪随机生成器的“种子”，相等的种子产生相等的数字序列。</p><h4 id="_2-三角函数" tabindex="-1">2.三角函数 <a class="header-anchor" href="#_2-三角函数" aria-label="Permalink to &quot;2.三角函数&quot;">​</a></h4><p>math.sin(x)：返回x的正弦值（弧度制）。</p><p>math.cos(x)：返回x的余弦值（弧度制）。</p><p>math.tan(x)：返回x的正切值（弧度制）。</p><p>math.asin(x)：返回x的正弦弧（以弧度为单位）。</p><p>math.acos(x)：返回x的反余弦（以弧度为单位）。</p><p>math.atan (y [, x])：返回y/x的反正切（以弧度为单位），但使用两个参数的符号来查找结果的象限。（它还可以正确处理x为零的情况。）</p><h4 id="_3-指数函数和对数函数" tabindex="-1">3.指数函数和对数函数 <a class="header-anchor" href="#_3-指数函数和对数函数" aria-label="Permalink to &quot;3.指数函数和对数函数&quot;">​</a></h4><p>math.exp(x)：返回e的x次方。</p><p>math.log(x [, base])：返回给定基数的x的对数。基数的默认值是e（因此函数返回x的自然对数）。</p><h3 id="三、整数边界" tabindex="-1">三、整数边界 <a class="header-anchor" href="#三、整数边界" aria-label="Permalink to &quot;三、整数边界&quot;">​</a></h3><p>除了常用的数学函数，math库还有两个重要的常量：</p><p>math.maxinteger：具有Lua能够表示的最大整数值，即64位有符号整数的最大正数。</p><p>math.mininteger：具有Lua能够表示的最小整数值，即64位有符号整数的最大负数。</p><p>当我们在数值计算时遇到比math.maxinteger更大，或者比math.mininteger更小的数值时，不会引发错误，而是会发生回环：即数值会从最大整数开始向最小整数方向循环，或者从最小整数开始向最大整数方向循环。</p><p>例如，在Lua 5.3中，如果尝试将math.maxinteger+1的结果打印出来，实际它返回了math.mininteger的值，而math.mininteger-1的结果为math.maxinteger的值：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">~$ lua</span></span>
<span class="line"><span style="color:#61AFEF;">Lua</span><span style="color:#D19A66;"> 5.3.3</span><span style="color:#98C379;">  Copyright</span><span style="color:#ABB2BF;"> (C) 1994-2016 Lua.org, PUC-Rio</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; print(</span><span style="color:#61AFEF;">math.maxinteger</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">9223372036854775807</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; print(</span><span style="color:#61AFEF;">math.mininteger</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">-9223372036854775808</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; print(</span><span style="color:#61AFEF;">math.maxinteger+1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">-9223372036854775808</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; print(</span><span style="color:#61AFEF;">math.mininteger-1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">9223372036854775807</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Lua的math库是一个强大的数学工具集，它能够帮助我们轻松应对各种数学挑战。通过掌握math库中的常用函数和使用方法，我们能够更加高效地进行数学计算，为编写高质量的Lua程序提供有力支持。</p><h2 id="深度解析lua字符串标准库-从基础到实践" tabindex="-1">深度解析Lua字符串标准库：从基础到实践 <a class="header-anchor" href="#深度解析lua字符串标准库-从基础到实践" aria-label="Permalink to &quot;深度解析Lua字符串标准库：从基础到实践&quot;">​</a></h2><p>在Lua的世界中，字符串处理是一项至关重要的任务。Lua语言为我们提供了一套功能强大的字符串标准库，它使得字符串的操作变得简单而高效。本文将深入解析Lua字符串标准库，并通过一些实用示例来展示其使用方法。</p><h3 id="基础操作" tabindex="-1">基础操作 <a class="header-anchor" href="#基础操作" aria-label="Permalink to &quot;基础操作&quot;">​</a></h3><p>string.len(s)：返回字符串s的长度。</p><p>string.lower(s)：将字符串s转换为全小写。</p><p>string.upper(s)：将字符串s转换为全大写。</p><p>string.byte(s [, i [, j]])：返回字符s[i]、s[i+1]、…s[j]的ASCII码。i的默认值为1；j的默认值是i。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">string.byte</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&quot;abcd&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 输出：97 98</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>string.char(···)：接收零个或多个整数，返回一个长度等于参数个数的字符串，其中每个字符的ASCII码等于其对应的参数。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">string.char</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">97</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">98</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 输出：ab</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>string.reverse(s)：返回字符串s反转后的字符串。</p><h3 id="字符串查找与替换" tabindex="-1">字符串查找与替换 <a class="header-anchor" href="#字符串查找与替换" aria-label="Permalink to &quot;字符串查找与替换&quot;">​</a></h3><p>string.find(s, pattern [, init [, plain]])：在字符串s中查找pattern出现的第一个匹配项，返回其起始和结束位置索引。若找不到则返回nil。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;Hello, World!&quot;  </span></span>
<span class="line"><span style="color:#E06C75;">starts</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ends</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;">)  </span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">starts</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ends</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">-- 输出：8 12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>string.gmatch (s, pattern)：返回一个迭代器函数，每次调用该函数时，该函数都会通过字符串s返回模式中的下一个捕获。如果模式未指定捕获，则在每次调用中生成整个匹配。以下示例将字符串s中的所有key=value对收集到表t中：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;from=world, to=Lua&quot;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> string.gmatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;(%w+)=(%w+)&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#E06C75;">    t</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">v</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>string.gsub(s, pattern, repl [, n])：在字符串s中全局替换所有匹配pattern的部分为repl，n可选参数用于限制替换次数。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;apple, banana, apple pie&quot;  </span></span>
<span class="line"><span style="color:#E06C75;">newStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.gsub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;orange&quot;</span><span style="color:#ABB2BF;">)  </span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newStr</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">-- 输出：orange, banana, orange pie  </span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">)   </span><span style="color:#7F848E;font-style:italic;">-- 输出：2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="其他实用函数" tabindex="-1">其他实用函数 <a class="header-anchor" href="#其他实用函数" aria-label="Permalink to &quot;其他实用函数&quot;">​</a></h3><p>string.sub(s, i [, j])：返回s的子字符串，该子字符串从i开始，一直持续到j；i和j可以是负数。如果j不存在，则假定它等于-1（与字符串长度相同）。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;Hello, World!&quot;</span></span>
<span class="line"><span style="color:#E06C75;">substr</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.sub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, -</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">substr</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 输出：World</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>string.format(formatString, ...)：格式化输出字符串，类似于C语言的printf函数。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;Lua&quot;</span></span>
<span class="line"><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;5.3&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">string.format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Language: %s, version: %.1f&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 输出：Language: Lua, version: 5.3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>string.rep(s, n [, sep])：返回由字符串sep分隔的、字符串s的n个副本串联而成的字符串。sep的默认值为空字符串（即没有分隔符）。如果n不为正，则返回空字符串。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">string.rep</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 输出：*,*,*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Lua字符串标准库提供了丰富而强大的功能，使得字符串处理变得简单高效。通过本文的介绍和示例，相信你已经对Lua字符串标准库有了更深入的了解。在实际开发中，你可以根据需求选择合适的函数来处理字符串，提高程序的灵活性和可读性。</p><p>更多不常用的函数可查阅Lua官方手册：<a href="https://www.lua.org/manual/" target="_blank" rel="noreferrer">https://www.lua.org/manual/</a></p><h2 id="lua表的奥秘-深入理解与运用lua表" tabindex="-1">Lua表的奥秘：深入理解与运用Lua表 <a class="header-anchor" href="#lua表的奥秘-深入理解与运用lua表" aria-label="Permalink to &quot;Lua表的奥秘：深入理解与运用Lua表&quot;">​</a></h2><p>在Lua的世界里，表（table）无疑是最核心、最强大的数据结构。它可以表示数组、集合、字典等多种数据结构，也用来表示包（package）和其它对象。本文将带领大家一同探索Lua表的奥秘。</p><h3 id="表的索引" tabindex="-1">表的索引 <a class="header-anchor" href="#表的索引" aria-label="Permalink to &quot;表的索引&quot;">​</a></h3><p>Lua表的索引灵活多变，既支持整数索引实现类似数组的操作，也可使用任意类型的数据作为键进行关联查找。这种特性使得Lua表能够轻松应对各类复杂的数据存储需求，无论是有序的数字序列还是无序的键值对集合。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">table</span><span style="color:#ABB2BF;"> = {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">apple</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">banana</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;yellow&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">table</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">])   </span><span style="color:#7F848E;font-style:italic;">-- 输出：1</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">table</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">-- 输出：red</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">table</span><span style="color:#ABB2BF;">.banana)</span><span style="color:#7F848E;font-style:italic;">-- 输出：yellow</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="遍历表" tabindex="-1">遍历表 <a class="header-anchor" href="#遍历表" aria-label="Permalink to &quot;遍历表&quot;">​</a></h3><p>Lua提供了两种主要的遍历表的方式：ipairs和pairs。前者用于按数字顺序遍历表中连续的整数索引元素，而后者则能遍历所有元素（包括非连续或非数字索引的项）。使用之前示例中的数据：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> ipairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">table</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 输出1-3共3个元素的索引及其值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> pairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">table</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">--输出所有5个元素的键和值</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="表构造器的魅力" tabindex="-1">表构造器的魅力 <a class="header-anchor" href="#表构造器的魅力" aria-label="Permalink to &quot;表构造器的魅力&quot;">​</a></h3><p>表构造器是Lua中创建和初始化表的一种简洁方式。通过表构造器，我们可以快速地定义表的结构和内容，使代码更加清晰易读。无论是创建空表，还是初始化包含多个元素的表，表构造器都能轻松搞定。同时，表构造器还能嵌套使用以构建多层次的数据结构。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">fruitColors</span><span style="color:#ABB2BF;"> = {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;banana&quot;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E06C75;">    apple</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    banana</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;yellow&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fruitColors</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">])  </span><span style="color:#7F848E;font-style:italic;">-- 输出：banana</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fruitColors</span><span style="color:#ABB2BF;">.banana)  </span><span style="color:#7F848E;font-style:italic;">-- 输出：yellow</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="表标准库" tabindex="-1">表标准库 <a class="header-anchor" href="#表标准库" aria-label="Permalink to &quot;表标准库&quot;">​</a></h3><p>Lua为表提供了一套丰富的标准库函数。这些函数可以帮助我们更高效地操作表，实现各种复杂的功能。掌握这些函数的使用，将极大地提升你的Lua编程能力。</p><p>table.concat(list [, sep [, i [, j]]])：合并表元素为字符串。默认的分隔符sep是空字符串，i的默认值为1，j的默认值则为#list。如果i大于j，则返回空字符串。</p><p>table.insert(list, [pos,] value)：在列表中的位置pos插入元素value。pos的默认值是#list+1，即在列表的末尾插入元素。</p><p>table.move(a1, f, e, t [,a2])：将元素从表a1移动到表a2，执行等效于以下多重赋值：a2[t],···=a1[f],···,a1[e]。a2的默认值为a1。目标范围可以与源范围重叠。要移动的元素数必须符合Lua整数。</p><p>table.remove(list [, pos])：从列表中删除位置pos处的元素，返回已删除元素的值。默认删除list的最后一个元素。</p><p>table.sort(list [, comp])：对列表元素进行排序。如果给定comp，那么它必须是一个接收两个列表元素的函数；如果没有给出comp，则使用标准Lua运算符&lt;。</p><p>table.unpack(list [, i [, j]])：返回给定列表中的元素。相当于：return list[i], list[i+1], ···, list[j]。默认情况下，i为1，j为#list。</p><h3 id="表的应用" tabindex="-1">表的应用 <a class="header-anchor" href="#表的应用" aria-label="Permalink to &quot;表的应用&quot;">​</a></h3><p>Lua的表由于其灵活性和强大性，常常被用来模拟数组或列表。通过合理地使用表索引和表操作函数，我们可以轻松实现这些数据结构的功能，并在实际编程中灵活应用。</p><p>在Lua模块（module）的编写中，通常会创建一个局部变量_M（或者M），并初始化为一个空的表，作为模块的命名空间，用于存放模块对外暴露的函数和变量，最后返回这个局部变量。导入模块的代码就可以通过模块名调用函数和访问变量。</p><h2 id="探秘lua的函数" tabindex="-1">探秘Lua的函数 <a class="header-anchor" href="#探秘lua的函数" aria-label="Permalink to &quot;探秘Lua的函数&quot;">​</a></h2><p>在Lua的世界里，函数是“第一类值”，这意味着函数可以像其他任何变量一样被存储、作为参数传递和作为返回值返回。这一独特设计赋予了Lua编程强大的灵活性与动态性，今天，让我们一起深入探索Lua函数的奇妙特性。</p><h3 id="匿名-函数没有名字" tabindex="-1">匿名：函数没有名字？ <a class="header-anchor" href="#匿名-函数没有名字" aria-label="Permalink to &quot;匿名：函数没有名字？&quot;">​</a></h3><p>首先，Lua中的所有函数都是匿名的，也就是说，它们不需要显式定义名称即可创建和使用。但这并不妨碍我们调用它们，因为Lua提供了灵活的方式来引用和执行函数。这种匿名性为Lua带来了极大的灵活性和便利性。例如：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;"> = </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">-- 输出30</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里的sum就是一个保存了匿名函数的变量，通过这个变量名，我们就可以调用它背后的函数。</p><h3 id="闭包-捕获环境的魔法盒子" tabindex="-1">闭包：捕获环境的魔法盒子 <a class="header-anchor" href="#闭包-捕获环境的魔法盒子" aria-label="Permalink to &quot;闭包：捕获环境的魔法盒子&quot;">​</a></h3><p>Lua的函数还拥有闭包特性，即函数可以访问并记住其外部作用域的变量，即使该环境在函数定义之后已经发生了改变。这个特性在许多场景下极为有用，如实现数据封装或模拟私有变量等：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> counter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">        count</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> count</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> = </span><span style="color:#61AFEF;">counter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">c</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">-- 输出1</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">c</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">-- 输出2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此处的counter函数返回了一个新的匿名函数，该匿名函数能记住并更新count变量，这就是闭包的实际应用。</p><h3 id="多返回值-一个函数-多个结果" tabindex="-1">多返回值：一个函数，多个结果 <a class="header-anchor" href="#多返回值-一个函数-多个结果" aria-label="Permalink to &quot;多返回值：一个函数，多个结果&quot;">​</a></h3><p>Lua支持多返回值，一个函数可以返回多个结果，这一特性在处理复杂的数据结构或需要同时返回多个结果的情况时非常有用。这对于简化代码逻辑以及提高程序效率尤为关键。例如：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;Hello, World!&quot;  </span></span>
<span class="line"><span style="color:#E06C75;">starts</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ends</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">starts</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ends</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">-- 输出：8 12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们也可以自定义返回多个值的函数：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> divide</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> nil</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0不能做除数&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;"> = </span><span style="color:#61AFEF;">divide</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 输出：nil  0不能做除数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上述divide函数中，我们同时返回了除法结果和一个状态消息，展示了Lua多返回值的魅力。</p><h3 id="可变参数列表-灵活应对不同场景" tabindex="-1">可变参数列表：灵活应对不同场景 <a class="header-anchor" href="#可变参数列表-灵活应对不同场景" aria-label="Permalink to &quot;可变参数列表：灵活应对不同场景&quot;">​</a></h3><p>Lua函数还可以接受可变数量的参数，通过...语法实现，这让函数变得更加灵活适应各种参数情况：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">(...)</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> total</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> ipairs</span><span style="color:#ABB2BF;">({</span><span style="color:#D19A66;">...</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#E06C75;">        total</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">total</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">v</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> total</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">-- 输出10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>不论传入多少个参数，sum函数都能妥善处理。</p><h3 id="高阶函数-函数作为第一类值" tabindex="-1">高阶函数：函数作为第一类值 <a class="header-anchor" href="#高阶函数-函数作为第一类值" aria-label="Permalink to &quot;高阶函数：函数作为第一类值&quot;">​</a></h3><p>高阶函数是Lua函数特性的重要一环。在Lua中，函数可以作为参数传递给其他函数，也可以作为其他函数的返回值。这种高阶函数的特性使得Lua能够轻松实现函数式编程。</p><p>例如，table.sort()函数用于对表进行排序，默认情况下按照字符串顺序进行比较。我们可以通过参数传递一个自定义的比较函数，以便按我们所需的规则进行排序：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">-- 定义一个包含用户年龄信息的表</span></span>
<span class="line"><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;"> = {</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;ZhangSan&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;LiSi&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;WangWu&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 按年龄从大到小排序</span></span>
<span class="line"><span style="color:#56B6C2;">table.sort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">u1</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">u2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> u1</span><span style="color:#ABB2BF;">.age&gt;</span><span style="color:#E06C75;">u2</span><span style="color:#ABB2BF;">.age </span><span style="color:#C678DD;">end</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 打印排序后的用户列表</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> _</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">user</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> ipairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">.name, </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">.age)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 输出</span></span>
<span class="line"><span style="color:#E06C75;">WangWu</span><span style="color:#D19A66;">  35</span></span>
<span class="line"><span style="color:#E06C75;">ZhangSan</span><span style="color:#D19A66;">  30</span></span>
<span class="line"><span style="color:#E06C75;">LiSi</span><span style="color:#D19A66;">  25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>再看另一个简单示例，函数作为另一个函数的返回值：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">-- 定义一个工厂函数，根据颜色生成绘制矩形的函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createDrawRectangleFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">color</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    -- 创建并返回一个新函数</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">x1</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">y1</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">x2</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">y2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">        print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;画一个矩形，对角线坐标((&quot;</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">x1</span><span style="color:#ABB2BF;">..</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">y1</span><span style="color:#ABB2BF;">..</span><span style="color:#98C379;">&quot;), (&quot;</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">x2</span><span style="color:#ABB2BF;">..</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">y2</span><span style="color:#ABB2BF;">..</span><span style="color:#98C379;">&quot;))，颜色为&quot; </span><span style="color:#ABB2BF;">.. </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 使用工厂函数获取一个红色矩形的绘制函数</span></span>
<span class="line"><span style="color:#E06C75;">drawRedRectangle</span><span style="color:#ABB2BF;"> = </span><span style="color:#61AFEF;">createDrawRectangleFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;红色&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 使用返回的函数绘制矩形</span></span>
<span class="line"><span style="color:#61AFEF;">drawRedRectangle</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 输出：画一个矩形，对角线坐标((0, 100), (100, 0))，颜色为红色</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个示例中，函数createDrawRectangleFunction接受一个表示颜色的参数，并返回一个内嵌函数，这个内嵌函数又可以根据给定的对角线坐标绘制矩形，并且在输出中指定了颜色。当我们调用createDrawRectangleFunction(&quot;红色&quot;) 时，它返回一个新的函数，并将其赋值给drawRedRectangle。随后，我们可以通过drawRedRectangle函数来“绘制”红色矩形。</p><h3 id="尾调用优化-优化递归调用的利器" tabindex="-1">尾调用优化：优化递归调用的利器 <a class="header-anchor" href="#尾调用优化-优化递归调用的利器" aria-label="Permalink to &quot;尾调用优化：优化递归调用的利器&quot;">​</a></h3><p>尾调用是Lua中一个非常重要的优化手段。当一个函数的返回动作是调用另一个函数且没有其它操作时，这个调用是尾调用。Lua对尾调用进行了特殊处理，使得在尾调用发生时不会创建新的调用栈帧，而是复用当前的调用栈帧。这大大减少了递归调用时的内存消耗，使得Lua在处理深度递归或大量循环调用时能够保持高效的性能。以下是阶乘函数的尾调用示例：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fact</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#ABB2BF;font-style:italic;">acc</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> nil</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> acc</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> fact</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">acc</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 尾调用</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fact</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">-- 输出120</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个递归求阶乘的函数接受一个额外的参数acc来累积阶乘的结果，初始为1。Lua引擎能够识别并优化尾部的函数调用，避免栈溢出的问题。</p><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p>以下阶乘函数中的递归调用是不是尾调用，为什么？</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fact</span><span style="color:#ABB2BF;">(</span><span style="color:#ABB2BF;font-style:italic;">n</span><span style="color:#ABB2BF;">)      </span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> nil</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">&lt;=</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;"> * </span><span style="color:#61AFEF;">fact</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="lua日期时间函数os-date-中的格式串指示符" tabindex="-1">Lua日期时间函数os.date()中的格式串指示符 <a class="header-anchor" href="#lua日期时间函数os-date-中的格式串指示符" aria-label="Permalink to &quot;Lua日期时间函数os.date()中的格式串指示符&quot;">​</a></h2><p>%a：星期几的缩写（例如：Sun, Mon, ...）</p><p>%A：星期几的全称（例如：Sunday, Monday, ...）</p><p>%b：月份的缩写（例如：Jan, Feb, ...）</p><p>%B：月份的全称（例如：January, February, ...）</p><p>%c：日期和时间，格式取决于主机系统和当前区域设置（例如：Tue Apr 2 13:01:40 2024）</p><p>%d：一个月中的第几天（01-31）</p><p>%H：小时（00-23）</p><p>%I：小时（01-12）</p><p>%j：一年中的第几天（001-366）</p><p>%m：月份（01-12）</p><p>%M：分钟（00-59）</p><p>%p：AM或PM</p><p>%S：秒（00-59）</p><p>%U：一年中的第几周，以第一个星期日作为第一周的第一天（00-53）</p><p>%w：一周中的第几天（0-6，其中0是星期天）</p><p>%W：一年中的第几周，以第一个星期一作为第一周的第一天（00-53）</p><p>%x：日期（例如：04/02/24）</p><p>%X：时间（例如：13:03:33）</p><p>%y：两位数的年份（00-99）</p><p>%Y：四位数的年份</p><p>%z：时区（例如：+0800）</p><p>%Z：时区的名称或缩写（例如：CST）</p><p>%%：百分号</p><p>*t：日期时间表</p><h2 id="lua游戏脚本开发" tabindex="-1">Lua游戏脚本开发 <a class="header-anchor" href="#lua游戏脚本开发" aria-label="Permalink to &quot;Lua游戏脚本开发&quot;">​</a></h2><p><a href="https://www.bilibili.com/video/BV1U54y1e7C2/?spm_id_from=333.788.recommend_more_video.3&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">Lua游戏脚本开发（完整版）_哔哩哔哩_bilibili</a></p><p>在所有脚本引擎中，Lua语言的运行速度最快</p><h2 id="lua开发安卓软件-参考lua开发安卓应用-md" tabindex="-1">Lua开发安卓软件：参考Lua开发安卓应用.md <a class="header-anchor" href="#lua开发安卓软件-参考lua开发安卓应用-md" aria-label="Permalink to &quot;Lua开发安卓软件：参考Lua开发安卓应用.md&quot;">​</a></h2><p>使用 lua 来构建跨平台原生应用有许多好处，比如 lua 语言简洁高效，可移植性好， Lua虚拟机极为轻量，仅占用200到300k的内存空间，且速度极快。</p><p>布局软件教程：<a href="https://www.bilibili.com/video/BV1Kt4y1L7kW/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">【Lua安卓开发 一】基础布局讲解_哔哩哔哩_bilibili</a></p><p>教程：<a href="https://www.bilibili.com/video/BV1Y64y1M7zL/?spm_id_from=333.788.recommend_more_video.24&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">【如何在手机上开发安卓应用程序？】如何使用lua语言编写Android应用程序？树莓编程工作室教你快速开发Android安卓应用程序_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1Ve4y1r725/?spm_id_from=333.788&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">【Lua基础实战】用“手机”编写一个属于自己的编辑器需要多长时间？#2_哔哩哔哩_bilibili</a></p><p>安卓开发2022教程：<a href="https://www.bilibili.com/video/BV19U4y1R7zV/?spm_id_from=333.788.recommend_more_video.5&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">2022 最新 Android 基础教程，从开发入门到项目实战，看它就够了，更新中_哔哩哔哩_bilibili</a></p><h2 id="lua开发打包apk的源码" tabindex="-1">Lua开发打包APK的源码 <a class="header-anchor" href="#lua开发打包apk的源码" aria-label="Permalink to &quot;Lua开发打包APK的源码&quot;">​</a></h2><p><a href="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">mkottman/AndroLua：Lua 和 LuaJava 移植到 Android (github.com)</a></p><p><a href="https://github.com/ichenhe/Android-Lua" target="_blank" rel="noreferrer">ichenhe/Android-Lua：基于 Androlua，做一些实际的改变。 (github.com)</a></p><p><a href="https://gitee.com/AideLua/AideLua" target="_blank" rel="noreferrer">Aide Lua: 依赖 Aide ，使用 Lua 快速、高效开发的工具 (gitee.com)</a></p><p><a href="https://gitee.com/three-to-three/and-lua-a" target="_blank" rel="noreferrer">AndLua: Alone大佬所写的一个lua编辑器 官网:https://andlua.top/ (gitee.com)</a></p><p><a href="https://github.com/TheMostBlack/AndLuaX" target="_blank" rel="noreferrer">TheMostBlack/AndLuaX: AndLuaX+ (github.com)</a></p><p><a href="https://github.com/mythoi/ALuaJ" target="_blank" rel="noreferrer">mythoi/ALuaJ: 移动端IDE，支持lua和java编译运行，支持打包apk (github.com)</a></p><p><a href="https://github.com/xiao00kang/AndroLua_Project_Template" target="_blank" rel="noreferrer">xiao00kang/AndroLua_Project_Template: 使用此模板在Android Studio上开发AndroLua应用！ (github.com)</a></p><p><a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noreferrer">nirenr/AndroLua_pro: Lua5.3.3 for android pro (github.com)</a></p><p><a href="https://github.com/AideLua/AndroLuaX" target="_blank" rel="noreferrer">AideLua/AndroLuaX: 适配了AndroidX的AndroLua+ (github.com)</a></p><p><a href="https://github.com/dingyi222666/AndroLua-Standalone" target="_blank" rel="noreferrer">dingyi222666/AndroLua-Standalone: 在android上运行lua (github.com)</a></p><p><a href="https://github.com/xiao00kang/AndroLua_Project_Template" target="_blank" rel="noreferrer">xiao00kang/AndroLua_Project_Template: 使用此模板在Android Studio上开发AndroLua应用！ (github.com)</a></p><p><a href="https://github.com/JealousCat/AndroLua_Pro_Plus" target="_blank" rel="noreferrer">JealousCat/AndroLua_Pro_Plus: 将AndroLua的Lua版本从5.3.x升级到了Lua5.4.4（Lua 5.4.4 for Android development） (github.com)</a></p><p><a href="https://github.com/haodynasty/AndroidLuaExample" target="_blank" rel="noreferrer">haodynasty/AndroidLuaExample：Lua 5.3.3 和 LuaJava 移植到 Android 示例 (github.com)</a></p><p><a href="https://github.com/haodynasty/AndroidLuaExample" target="_blank" rel="noreferrer">haodynasty/AndroidLuaExample：Lua 5.3.3 和 LuaJava 移植到 Android 示例 (github.com)</a></p><h2 id="androlua" tabindex="-1">Androlua <a class="header-anchor" href="#androlua" aria-label="Permalink to &quot;Androlua&quot;">​</a></h2><p>开源地址：<a href="https://github.com/mkottman/AndroLua" target="_blank" rel="noreferrer">mkottman/AndroLua：Lua 和 LuaJava 移植到 Android (github.com)</a></p><p><a href="https://lua.dianas.cyou/pages/9f7e48/#%E5%BF%AB%E9%80%9F%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8B%E6%99%AE%E9%81%8D%E5%86%99%E6%B3%95" target="_blank" rel="noreferrer">Lua初见 | AndroluaDocs (dianas.cyou)</a></p><h2 id="androluadocs" tabindex="-1">AndroluaDocs <a class="header-anchor" href="#androluadocs" aria-label="Permalink to &quot;AndroluaDocs&quot;">​</a></h2><p><a href="https://lua.dianas.cyou/pages/ffda64/#%E6%B8%A0%E9%81%9302-%E5%BC%80%E6%BA%90%E4%BB%93%E5%BA%93" target="_blank" rel="noreferrer">项目资源下载 | AndroluaDocs (dianas.cyou)</a></p><h2 id="开源" tabindex="-1">开源 <a class="header-anchor" href="#开源" aria-label="Permalink to &quot;开源&quot;">​</a></h2><p><a href="https://github.com/sudoskys/Moonnote" target="_blank" rel="noreferrer">sudoskys/Moonnote: A note-taking application developed using the Androlua framework |使用 Androlua 框架开发的一款笔记应用 (github.com)</a></p><p><a href="https://github.com/huajiqaq/Hydrogen" target="_blank" rel="noreferrer">huajiqaq/Hydrogen: 一个基于androlua+开发的第三方知乎安卓客户端 (github.com)</a></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p><a href="https://www.lua.org/" target="_blank" rel="noreferrer">Lua</a>: 一种轻量语言，由标准C编写而成，体积小，启动速度快。Lua 有一个同时进行的 JIT 项目，提供在特定平台上的即时编译功能。</p><p><a href="https://www.luaj.org/luaj/3.0/README.html" target="_blank" rel="noreferrer">LuaJ</a>： Luaj 是一个 Java 的 Lua 解释器，基于 Lua 5.2.x 版本，目的是：</p><ul><li>基于 Java 的实现，可以在 Java 应用中集成 Lua 虚拟机</li><li>轻量级、高性能的执行 Lua</li><li>多平台支持</li><li>完整的库和工具支持</li><li>可在 Java ME、SE 和 EE 环境中执行</li><li>luajava api 支持</li><li>混合调试</li></ul><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmkottman%2FAndroLua" target="_blank" rel="noreferrer">AndroLua</a> : <code>Androlua</code> 是安卓平台上的用 Lua 开发安卓程序的工具，不仅支持调用Java API，而且支持编写安卓界面程序，还可以将自己写的 Lua 程序打包成 apk 安装文件安装。Lua 语言的简单使没有任何编程经验的用户也能在短时间内开发出安卓程序。(来自百度<a href="https://link.juejin.cn?target=https%3A%2F%2Fbaike.baidu.com%2Flink%3Furl%3DuKUBS37YCr-ASuAsGJH4RaS2dTbm0AUq_1la8TGBJUHrdjkeFhTwqbxJy4OZkagOI146bPK0csWnijBr-zQ2uLOzN4f_pJGkWOcd5jWf-Hm" target="_blank" rel="noreferrer">百科</a>)</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Falibaba%2FLuaViewSDK" target="_blank" rel="noreferrer">LuaViewSDK - Android版</a> <code>LuaViewSDK</code> 由阿里聚划算无线开发团队开发并维护， LuaView 是一种运行在一个 ViewController/Activity 中，可以<strong>灵活加载</strong> Lua 脚本，并能够按照 <strong>Native</strong> 的方式运行的一种面向业务的开发技术方案。可以快速开发电商应用中既要求体验又要求灵活性的页面功能，例如首页，类目首页，垂直频道，大促活动会场等。LuaViewSDK 还有 iOS 版。</p><h3 id="luaviewsdk-体验" tabindex="-1">LuaViewSDK 体验 <a class="header-anchor" href="#luaviewsdk-体验" aria-label="Permalink to &quot;LuaViewSDK 体验&quot;">​</a></h3><p><a href="https://github.com/alibaba/LuaViewSDK/tree/master" target="_blank" rel="noreferrer">alibaba/LuaViewSDK: A cross-platform framework to build native, dynamic and swift user interface - 强大轻巧灵活的客户端动态化解决方案 (github.com)</a></p><p>下面的是我自己创建的项目，加载 assets 目录下的 <code>haha.lua</code> 文件</p><p><img src="`+p+`" alt="图片"></p><p>下面尝试加载外部的脚本文件， 我在 sd 卡上新建了一个 <code>local.lua</code> 脚本文件 内容如下</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>w,h = System.screenSize();</span></span>
<span class="line"><span>window.frame(0, 0, w, h);</span></span>
<span class="line"><span>window.backgroundColor(0x220000);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>label = Label();</span></span>
<span class="line"><span>label.frame(16,16,w, 60);</span></span>
<span class="line"><span>label.text(&quot;Local Hello World LuaView to Android&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+e+'" alt="img"></p><p>我们页可加载服务器上的 lua 脚本，注意校验服务器的文件，防止 lua 脚本恶意攻击。</p><h3 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h3><ul><li><a href="https://developer.ibm.com/devpractices/open-source-development/" target="_blank" rel="noreferrer">Lua 在移动平台上的应用</a></li></ul>',256),t=[r];function c(i,B,y,u,b,d){return n(),a("div",null,t)}const F=s(o,[["render",c]]);export{m as __pageData,F as default};
