import{_ as s,c as r,o as t,a3 as a}from"./chunks/framework.zGi9i9Bf.js";const e="/ProgramLearnNotes/assets/image-20240526145020785.COZ5dlpU.png",n="/ProgramLearnNotes/assets/640-99914444.8P_GHqCp.gif",l="/ProgramLearnNotes/assets/image-20240526145156825.Db2Z1Q8r.png",y=JSON.parse('{"title":"Rust 学习资源","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/Rust学习资源.md","filePath":"Document/Rust/Rust学习资源.md","lastUpdated":1717759497000}'),o={name:"Document/Rust/Rust学习资源.md"},p=a(`<h1 id="rust-学习资源" tabindex="-1">Rust 学习资源 <a class="header-anchor" href="#rust-学习资源" aria-label="Permalink to &quot;Rust 学习资源&quot;">​</a></h1><p><strong>Rust 语言开源组织</strong>：<a href="https://github.com/rust-lang" target="_blank" rel="noreferrer">https://github.com/rust-lang</a></p><p>Rust是Mozilla开发的一种安全的现代编程语言。它是为高效、可靠的软件开发而设计的，特别是在对系统资源的底层控制。</p><p>Rust具有独特的所有权系统和强类型系统，可以防止常见的编程错误。</p><p>对于熟悉C++语言的开发人员来说，Rust很容易学习。它在web开发、嵌入式系统和网络中很流行。Rust社区是非常活跃的，有许多可用的库和框架。</p><h2 id="中文网" tabindex="-1">中文网 <a class="header-anchor" href="#中文网" aria-label="Permalink to &quot;中文网&quot;">​</a></h2><p><a href="https://www.rustwiki.org.cn/" target="_blank" rel="noreferrer">Rust 文档网 - Rust 官方文档中文教程 (rustwiki.org.cn)</a></p><p><a href="https://geek-docs.com/rust/rust-top-tutorials/1000100_rust_index.html" target="_blank" rel="noreferrer">Rust 教程|极客教程 (geek-docs.com)</a></p><h2 id="rust-官网资源" tabindex="-1">Rust 官网资源 <a class="header-anchor" href="#rust-官网资源" aria-label="Permalink to &quot;Rust 官网资源&quot;">​</a></h2><p>官网：<a href="https://www.rust-lang.org/zh-CN/learn/get-started" target="_blank" rel="noreferrer">入门 - Rust 程序设计语言 (rust-lang.org)</a></p><p>Rust 演练场：<a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021" target="_blank" rel="noreferrer">Rust Playground (rust-lang.org)</a></p><p>官网学习文档：<a href="https://www.rust-lang.org/zh-CN/learn" target="_blank" rel="noreferrer">学习 Rust - Rust 程序设计语言 (rust-lang.org)</a></p><ul><li><p><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noreferrer">Rust Book “The Book”</a>：这是一本关于 Rust 编程语言的官方书籍，由 Mozilla 基金会的 Rust 开发团队编写。</p><ul><li>开源地址：<a href="https://github.com/rust-lang/book" target="_blank" rel="noreferrer">https://github.com/rust-lang/book</a></li><li><strong>中文翻译版</strong>：<a href="https://kaisery.github.io/trpl-zh-cn/" target="_blank" rel="noreferrer">Rust 程序设计语言 - Rust 程序设计语言 简体中文版 (kaisery.github.io)</a></li><li><strong>中文翻译版开源地址</strong>：<a href="https://github.com/KaiserY/trpl-zh-cn" target="_blank" rel="noreferrer">KaiserY/trpl-zh-cn：Rust 程序设计语言（2021 edition）</a></li></ul></li><li><p><a href="https://doc.rust-lang.org/rust-by-example/" target="_blank" rel="noreferrer">Rust By Example</a>：Rust by example 为 Rust 中的各种概念提供了一系列可运行的示例。我发现每当我在那里学习一个概念时，与“书”一起引用是很有用的。</p><blockquote><p>开源地址：<a href="https://github.com/rust-lang/rust-by-example" target="_blank" rel="noreferrer">https://github.com/rust-lang/rust-by-example</a></p><p>中文版：<a href="https://rustwiki.org/zh-CN/rust-by-example/" target="_blank" rel="noreferrer">简介 - 通过例子学 Rust 中文版 (rustwiki.org)</a></p><p>中文版开源地址：<a href="https://github.com/rust-lang-cn/rust-by-example-cn" target="_blank" rel="noreferrer">https://github.com/rust-lang-cn/rust-by-example-cn</a></p></blockquote></li><li><p><a href="https://doc.rust-lang.org/std/index.html" target="_blank" rel="noreferrer">std - Rust (rust-lang.org)</a></p></li><li><p><a href="https://doc.rust-lang.org/nomicon/intro.html#the-rustonomicon" target="_blank" rel="noreferrer">Rustonomicon</a> 高级和不安全的 Rust 编程的黑暗艺术</p><ul><li>开源地址：<a href="https://github.com/rust-lang/nomicon" target="_blank" rel="noreferrer">https://github.com/rust-lang/nomicon</a></li></ul></li><li><p><a href="https://doc.rust-lang.org/error_codes/error-index.html" target="_blank" rel="noreferrer">Rust 错误代码索引</a></p></li><li><p><a href="https://blog.burntsushi.net/rust-error-handling/" target="_blank" rel="noreferrer">Rust 中的错误处理 - Andrew Gallant 的博客 (burntsushi.net)</a></p><ul><li>翻译：<a href="https://www.oschina.net/translate/rust-error-handling" target="_blank" rel="noreferrer">Rust 中的错误处理 - OSCHINA - 中文开源技术交流社区</a></li></ul></li></ul><p>官网工具：<a href="https://www.rust-lang.org/zh-CN/tools" target="_blank" rel="noreferrer">工具 - Rust 程序设计语言 (rust-lang.org)</a></p><p>官方社区列表：<a href="https://www.rust-lang.org/zh-CN/community" target="_blank" rel="noreferrer">社区 - Rust 程序设计语言 (rust-lang.org)</a></p><ul><li><a href="https://users.rust-lang.org/" target="_blank" rel="noreferrer">The Rust Programming Language Forum (rust-lang.org)</a></li></ul><p>官方版本发布博客：<a href="https://blog.rust-lang.org/" target="_blank" rel="noreferrer">Rust 编程语言博客 (rust-lang.org)</a></p><p><a href="https://rust-lang.github.io/rustup/" target="_blank" rel="noreferrer">简介 - Rust 的书 (rust-lang.github.io)</a></p><h2 id="_1-阅读材料" tabindex="-1">1） 阅读材料 <a class="header-anchor" href="#_1-阅读材料" aria-label="Permalink to &quot;1） 阅读材料&quot;">​</a></h2><p>kaiy</p><h4 id="《the-little-book-of-rust-books》" tabindex="-1">《The Little Book of Rust Books》： <a class="header-anchor" href="#《the-little-book-of-rust-books》" aria-label="Permalink to &quot;《The Little Book of Rust Books》：&quot;">​</a></h4><p>项目地址：<a href="https://github.com/lborb/book" target="_blank" rel="noreferrer">https://github.com/lborb/book</a></p><p>在线阅读：<a href="https://lborb.github.io/book/" target="_blank" rel="noreferrer">https://lborb.github.io/book/</a></p><p><strong>创作背景</strong></p><p>《The Little Book of Rust Books》是 GitHub 上的一个开源项目，旨在汇总各类优秀的 Rust 编程书籍，方便 Rust 学习者查阅。该书由 Rust 社区的爱好者共同创作维护，目前已收录了数十本 Rust 书籍，包括官方出品和个人撰写的优秀作品。</p><p><strong>主要特性</strong></p><p>《The Little Book of Rust Books》有以下几个特点：</p><ol><li>官方推荐：收录了 Rust 官网推荐的系列书籍，权威性毋庸置疑。</li><li>分类清晰：按照书籍类型划分，包含入门、进阶、专项等多个层次。</li><li>简介详尽：每本书都配有简要介绍，读者可以快速了解书籍内容。</li><li>链接齐全：direct 提供书籍的在线阅读链接，方便读者访问。</li><li>开源共建：项目以 MIT 协议开源，欢迎所有人参与贡献。</li></ol><p><strong>快速上手</strong></p><p>作为一名 Rust 小白，如何利用《The Little Book of Rust Books》学习呢？这里给大家一个简单例子。</p><p>比如我们想学习 Rust 的基本语法，可以阅读官方出品的 Rust 程序设计语言 一书。</p><p>访问在线阅读地址：<a href="https://doc.rust-lang.org/book/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E3%80%82" target="_blank" rel="noreferrer">https://doc.rust-lang.org/book/，即可开始学习。</a></p><p>随便翻开一章，例如 Guessing Game，跟着教程一步步编写如下代码：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 引入标准库的 io 模块和 rand 模块  </span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::io;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> rand</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Rng</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Guess the number!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 生成一个 1-100 之间的随机秘密数字</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> secret_number</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rand</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">thread_rng</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">gen_range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">..=</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    loop</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Please input your guess.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建一个字符串变量，用于保存用户的输入</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> guess</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 读取用户从标准输入的一行字符串，并把它赋值给 guess 变量</span></span>
<span class="line"><span style="color:#E5C07B;">        io</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">stdin</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">read_line</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> guess</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed to read line&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 把用户输入的字符串解析为 u32 类型的数字</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> guess</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> match</span><span style="color:#E06C75;"> guess</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">            Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#C678DD;">continue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;You guessed: {guess}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 将用户猜的数字与秘密数字比较大小</span></span>
<span class="line"><span style="color:#C678DD;">        match</span><span style="color:#E06C75;"> guess</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cmp</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">secret_number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Ordering</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Less</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Too small!&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            Ordering</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Greater</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Too big!&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">            Ordering</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Equal</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">                println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;You win!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>运行后，控制台将输出如下交互界面：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>Guess the number!</span></span>
<span class="line"><span>Please input your guess.</span></span>
<span class="line"><span>50 </span></span>
<span class="line"><span>You guessed: 50</span></span>
<span class="line"><span>Too small!</span></span>
<span class="line"><span>Please input your guess.</span></span>
<span class="line"><span>75</span></span>
<span class="line"><span>You guessed: 75      </span></span>
<span class="line"><span>Too big!</span></span>
<span class="line"><span>Please input your guess.</span></span>
<span class="line"><span>68</span></span>
<span class="line"><span>You guessed: 68</span></span>
<span class="line"><span>You win!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>就这样，我们通过一个简单有趣的猜数字游戏，初步掌握了 Rust 的基本语法和控制流程。阅读 Rust 程序设计语言，你将收获更多编程知识！</p><h4 id="_1-tour-of-rust" tabindex="-1"><strong>1.</strong> <a href="https://tourofrust.com/" target="_blank" rel="noreferrer">Tour of Rust</a> <a class="header-anchor" href="#_1-tour-of-rust" aria-label="Permalink to &quot;**1.** [Tour of Rust](https://tourofrust.com/)&quot;">​</a></h4><p>是 Rust 编程语言的分步指南。它提供了语言的一个很好的概述，并允许学习者修改代码示例进行实验。我想说的是，Tour of Rust 本身并不是一种资源。</p><h4 id="_2-半小时学习-rust" tabindex="-1"><strong>2.</strong> <a href="https://fasterthanli.me/articles/a-half-hour-to-learn-rust" target="_blank" rel="noreferrer">半小时学习 Rust</a> <a class="header-anchor" href="#_2-半小时学习-rust" aria-label="Permalink to &quot;**2.** [半小时学习 Rust](https://fasterthanli.me/articles/a-half-hour-to-learn-rust)&quot;">​</a></h4><p>是一个很好的快速总结，它通过快速示例介绍了该语言的许多概念。一切都在一个网页页面上！因此，我发现这个资源对于快速刷新某些概念非常有用。</p><h4 id="_3-a-gentle-introduction-to-rust" tabindex="-1"><strong>3.</strong> <a href="https://stevedonovan.github.io/rust-gentle-intro/readme.html" target="_blank" rel="noreferrer">A Gentle Introduction to Rust</a> <a class="header-anchor" href="#_3-a-gentle-introduction-to-rust" aria-label="Permalink to &quot;**3.** [A Gentle Introduction to Rust](https://stevedonovan.github.io/rust-gentle-intro/readme.html)&quot;">​</a></h4><p>[Rust 的温和介绍]是一本总结了 Rust 主要概念的简短书。正如作者所提到的，这个想法是“先试后买”，以便在深入研究“书”等更复杂的资源之前充分了解该语言。</p><h3 id="🆓-免费在线书籍" tabindex="-1">🆓 免费在线书籍： <a class="header-anchor" href="#🆓-免费在线书籍" aria-label="Permalink to &quot;🆓 免费在线书籍：&quot;">​</a></h3><p>Rust 秘典(中文)：<a href="https://nomicon.purewhite.io/" target="_blank" rel="noreferrer">介绍 - Rust 秘典（死灵书） (purewhite.io)</a></p><p><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noreferrer">Rust Book “The Book”</a>：这是一本关于 Rust 编程语言的官方书籍，由 Mozilla 基金会的 Rust 开发团队编写。</p><ul><li>开源地址：<a href="https://github.com/rust-lang/book" target="_blank" rel="noreferrer">https://github.com/rust-lang/book</a></li><li><strong>中文翻译版</strong>：<a href="https://kaisery.github.io/trpl-zh-cn/" target="_blank" rel="noreferrer">Rust 程序设计语言 - Rust 程序设计语言 简体中文版 (kaisery.github.io)</a></li><li><strong>中文翻译版开源地址</strong>：<a href="https://github.com/KaiserY/trpl-zh-cn" target="_blank" rel="noreferrer">KaiserY/trpl-zh-cn：Rust 程序设计语言（2021 edition）</a></li></ul><p><a href="https://doc.rust-lang.org/rust-by-example/" target="_blank" rel="noreferrer">Rust By Example</a>：Rust by example 为 Rust 中的各种概念提供了一系列可运行的示例。我发现每当我在那里学习一个概念时，与“书”一起引用是很有用的。</p><blockquote><p>开源地址：<a href="https://github.com/rust-lang/rust-by-example" target="_blank" rel="noreferrer">https://github.com/rust-lang/rust-by-example</a></p><p>中文版：<a href="https://rustwiki.org/zh-CN/rust-by-example/" target="_blank" rel="noreferrer">简介 - 通过例子学 Rust 中文版 (rustwiki.org)</a></p><p>中文版开源地址：<a href="https://github.com/rust-lang-cn/rust-by-example-cn" target="_blank" rel="noreferrer">https://github.com/rust-lang-cn/rust-by-example-cn</a></p></blockquote><p><strong>6.</strong> <a href="https://dhghomon.github.io/easy_rust/" target="_blank" rel="noreferrer">Easy Rust</a>：这是一个资源，试图专注于使用“简单的英语”为非英语母语人士学习 Rust。我个人认为在此过程中澄清概念很有用。这本书的好处还在于，书中链接了一个 youtube 视频，并与每一章相关联。</p><ul><li><p>开源地址：<a href="https://github.com/Dhghomon/easy_rust" target="_blank" rel="noreferrer">https://github.com/Dhghomon/easy_rust</a></p></li><li><p><a href="./">简单英语学 Rust</a> 简单英语学 Rust 写于 2020 年 7 月至 8 月，长达 400 多页。这是一种试图使用“易懂的英语”来教授 Rust 编程语言的资源，适用于非英语母语的学习者，当然也提供了中文译本。</p><ul><li><p>中文版 GitHub：<a href="https://github.com/kumakichi/easy_rust_chs" target="_blank" rel="noreferrer">https://github.com/kumakichi/easy_rust_chs</a></p></li><li><p>中文版在线阅读：<a href="https://kumakichi.github.io/easy_rust_chs/" target="_blank" rel="noreferrer">https://kumakichi.github.io/easy_rust_chs/</a></p></li></ul></li></ul><p><strong><a href="https://marabos.nl/atomics/" target="_blank" rel="noreferrer">Rust Atomics and Locks</a></strong>：这本书由优秀的 Mara Bos 编写，可免费获取。正如书名所示，它介绍了 Rust 原子和锁的相关知识。因此，这本书的内容在编写并发应用程序代码时非常有用。通常来说，这并不是初学者可以轻松掌握的内容，但是，当你在 Rust 知识方面有所进步时，这是一本必须了解的资源。</p><p>Mara Bos 是 Rust 核心团队的成员，在 Rust 标准库中负责并发编程相关的模块。她发现虽然 Rust 的所有权机制和类型系统为并发编程提供了良好的基础，但开发者在实际编写并发代码时仍然会遇到不少困难，尤其是在使用底层的原子操作和内存顺序时。因此，她决定结合自己的经验，撰写一本全面介绍 Rust 多线程编程的书籍，帮助开发者深入理解 Rust 并发编程的原理和最佳实践。</p><p><strong>主要特性</strong></p><p>《Rust Atomics and Locks》这本书主要包含以下内容：</p><ul><li>详细介绍了 Rust 的并发编程模型，包括线程的创建、线程间的同步与通信等。</li><li>深入探讨了原子操作和内存顺序，以及它们在不同处理器架构下的实现。</li><li>介绍了如何使用 Rust 提供的锁（如 Mutex、RwLock）和同步原语（如 Condvar）。</li><li>教你如何从头开始实现自己的锁和并发数据结构，并保证其正确性和性能。</li><li>讲解了操作系统内核提供的并发编程支持，以及如何在 Rust 中使用它们。</li></ul><p>书中提供了大量的示例代码和练习题，帮助读者加深理解和掌握。</p><blockquote><p>开源地址：<a href="https://github.com/m-ou-se/rust-atomics-and-locks" target="_blank" rel="noreferrer">https://github.com/m-ou-se/rust-atomics-and-locks</a></p><p>中文翻译版：<a href="https://atomics.rs/about-book.html" target="_blank" rel="noreferrer">https://atomics.rs/about-book.html</a></p><p>中文翻译版开源地址：<a href="https://github.com/m-ou-se/rust-atomics-and-locks" target="_blank" rel="noreferrer">https://github.com/m-ou-se/rust-atomics-and-locks</a></p><p>《Rust Atomics and Locks》书籍官网：<a href="https://marabos.nl/atomics" target="_blank" rel="noreferrer">https://marabos.nl/atomics</a></p><p>Rust 并发编程文档：<a href="https://doc.rust-lang.org/book/ch16-00-concurrency.html" target="_blank" rel="noreferrer">https://doc.rust-lang.org/book/ch16-00-concurrency.html</a></p></blockquote><p><a href="https://google.github.io/comprehensive-rust/" target="_blank" rel="noreferrer">Comprehensive Rust 🦀 </a> 这是 Google(谷歌) 的 Android 团队使用的 Rust 课程。它为您提供了快速教授 Rust 的材料。该课程涵盖了 Rust 的全部内容，从基本语法到泛型和错误处理等高级主题。</p><ul><li>GitHub 开源地址：<a href="https://github.com/google/comprehensive-rust" target="_blank" rel="noreferrer">https://github.com/google/comprehensive-rust</a></li></ul><p><strong><a href="https://rust-unofficial.github.io/patterns/intro.html" target="_blank" rel="noreferrer">Rust Design Patterns</a></strong>：如果你想编写更符合 Rust 编程语言惯例的代码，这是一个很好的资源。对于初学者来说，这不是一本好书，而是在进一步学习 Rust 时可以参考的书籍。如果你来自另一种编程语言，这本书也可以帮助你理解设计模式的不同之处。阅读这本书的部分内容实际上帮助了我阅读其他人的代码。</p><blockquote><p>中文版：<strong><a href="https://fomalhauthmj.github.io/patterns/" target="_blank" rel="noreferrer">rust 设计模式</a></strong></p><p>中文版 GitHub 开源地址：<a href="https://github.com/Fomalhauthmj/patterns" target="_blank" rel="noreferrer">https://github.com/Fomalhauthmj/patterns</a></p></blockquote><p>🅰️<strong>Rust 圣经（中文重点推荐看的书籍）</strong>：<a href="https://course.rs/about-book.html" target="_blank" rel="noreferrer">关于本书 - Rust 语言圣经(Rust Course)</a></p><ul><li>开源地址：<a href="https://github.com/sunface/rust-course" target="_blank" rel="noreferrer">https://github.com/sunface/rust-course</a></li></ul><p><a href="https://zh.practice.rs/why-exercise.html" target="_blank" rel="noreferrer">Rust 语言实战</a> （中文）Rust 语言实战的目标是通过大量的实战练习帮助大家更好的学习和上手使用 Rust 语言。这里除了有大量的练习题和答案，还支持在线阅读、修改和编译 Rust 代码。书中的练习题非常易于使用：你所需的就是在线完成练习，并让它通过编译。</p><ul><li>开源地址：<a href="https://github.com/sunface/rust-by-practice" target="_blank" rel="noreferrer">https://github.com/sunface/rust-by-practice</a></li><li>在线阅读：<a href="https://zh.practice.rs/why-exercise.html" target="_blank" rel="noreferrer">https://zh.practice.rs/why-exercise.html</a></li></ul><p><strong>LearnRustEasy</strong>（中文）：<a href="https://rustycab.github.io/LearnRustEasy/" target="_blank" rel="noreferrer">前言：为什么写这本书 - LearnRustEasy (rustycab.github.io)</a></p><p><strong><a href="https://nnethercote.github.io/perf-book/#the-rust-performance-book" target="_blank" rel="noreferrer">Rust 性能手册</a></strong> 编写 Rust 代码的注意哪些是影响性能的</p><p><strong><a href="https://rustc-dev-guide.rust-lang.org/" target="_blank" rel="noreferrer">Rust 编译器开发指南</a></strong> 如何基于 rust 开发编译器</p><p><a href="https://rust-cli.github.io/book/index.html" target="_blank" rel="noreferrer">Rust 中的命令行应用程序 (rust-cli.github.io)</a> 使用 rust 开发命令行工具教程</p><p><a href="https://rust-unofficial.github.io/patterns/" target="_blank" rel="noreferrer">Rust 设计模式 (rust-unofficial.github.io)</a></p><p><a href="https://llever.com/rust-cookbook-zh/#rust-%E7%83%B9%E9%A5%AA%E4%B9%A6" target="_blank" rel="noreferrer">Rust 烹饪书</a> （中文）这个<em>Rust 烹饪书</em>是一套简单的例子，它演示了如何使用 Rust 生态系统的箱子，作为完成常见编程任务的良好实践。</p><ul><li>在线阅读：<a href="https://llever.com/rust-cookbook-zh/" target="_blank" rel="noreferrer">https://llever.com/rust-cookbook-zh/</a></li><li>GitHub 开源地址：<a href="https://github.com/rust-lang-nursery/rust-cookbook" target="_blank" rel="noreferrer">https://github.com/rust-lang-nursery/rust-cookbook</a></li></ul><p>Rust 宏编程：</p><ul><li><a href="https://www.bookstack.cn/read/DaseinPhaos-tlborm-chinese/README.md" target="_blank" rel="noreferrer">Rust 宏小册 中文版 - 《Rust 宏小册 中文版》 - 书栈网 · BookStack</a></li><li><a href="https://danielkeep.github.io/tlborm/book/index.html" target="_blank" rel="noreferrer">Rust 宏小书 (danielkeep.github.io)</a></li><li><a href="https://juejin.cn/post/7344567594086400015" target="_blank" rel="noreferrer">Rust 宏魔法系列 - 派生宏 - 掘金 (juejin.cn)</a></li></ul><p>Rust 异步编程：</p><ul><li><a href="https://huangjj27.github.io/async-book/index.html" target="_blank" rel="noreferrer">起步 - Rust 中的异步编程 (huangjj27.github.io)</a></li><li><a href="https://learnku.com/docs/rust-async-std" target="_blank" rel="noreferrer">《async-std 中文文档》 | Rust 技术论坛 (learnku.com)</a></li><li><a href="https://www.rectcircle.cn/posts/rust%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/" target="_blank" rel="noreferrer">Rust 异步编程 :：Rectcircle Blog</a></li><li><a href="https://juejin.cn/post/6875948465055072263" target="_blank" rel="noreferrer">Rust 之异步入门 - 掘金 (juejin.cn)</a></li></ul><p>Rust 🦀 和 WebAssembly 🕸：</p><ul><li><a href="https://rustwasm.github.io/docs/book/#rust--and-webassembly-" target="_blank" rel="noreferrer">Rust 🦀 和 WebAssembly 🕸</a></li></ul><p>《Effective Rust》改进 Rust 代码的 35 种具体方法：</p><ul><li>《Effective Rust》中文版在线阅读：<a href="https://rustx-labs.github.io/effective-rust-cn/" target="_blank" rel="noreferrer">https://rustx-labs.github.io/effective-rust-cn/</a></li><li>《Effective Rust》中文版 Github 仓库：<a href="https://github.com/rustx-labs/effective-rust-cn" target="_blank" rel="noreferrer">https://github.com/rustx-labs/effective-rust-cn</a></li><li>《Effective Rust》英文原版：<a href="https://www.lurklurk.org/effective-rust/" target="_blank" rel="noreferrer">https://www.lurklurk.org/effective-rust/</a></li></ul><p>《Effective Rust》是 Rust 社区的经典著作，提炼了编写高质量 Rust 代码的 35 个有效方法。无论你是 Rust 新手还是有一定经验，都能从中获益良多。而中文版的推出，进一步降低了 Rust 学习的门槛，让更多开发者能够享受到 Rust 编程的乐趣。</p><p>目前该中文翻译版本由【RustX 实验室】出品，RustX 实验室致力于推动 Rust 编程语言在技术社区中的应用与发展。专注于创建和分享实用的工具、库和资源，以帮助开发者更高效地使用 Rust。同时，也致力于翻译和传播国外优秀的 Rust 相关文章和书籍，以促进 Rust 在中国的普及和提升。</p><p><strong>主要特性</strong></p><p>《Effective Rust》中文版翻译版继承了原著的精华，主要包括以下内容：</p><ul><li>类型系统：如何利用 Rust 强大的类型系统来表达领域概念和编码意图</li><li>常见概念：深入理解生命周期、借用检查器、Unsafe 等 Rust 独有概念</li><li>错误处理：如何优雅地处理和传播错误</li><li>代码结构：如何组织和设计 Rust 项目，控制依赖关系</li><li>性能优化：学习常见的性能优化技巧和陷阱</li></ul><h4 id="💲-付费印刷书籍" tabindex="-1">💲 付费印刷书籍： <a class="header-anchor" href="#💲-付费印刷书籍" aria-label="Permalink to &quot;💲 付费印刷书籍：&quot;">​</a></h4><p>我个人完全依靠免费材料来学习 Rust，但是，这里列出的书籍是我看到许多正面评论的书籍。此外，有些人可能更喜欢一种更具体的书籍形式，其中“书”本身也可以<a href="https://amzn.to/3Km3jwl" target="_blank" rel="noreferrer">在这里</a>以硬拷贝形式获得。</p><p><strong>7.</strong> <a href="https://amzn.to/3DRu0qh" target="_blank" rel="noreferrer">Rust in Action</a>：在这本书中，作者 Tim Mcnamara 也有一个 youtube 频道，在那里他解释了 Rust 的概念。</p><blockquote><p>有中文版</p></blockquote><p><strong>8.</strong> <a href="https://amzn.to/3Jfxbtb" target="_blank" rel="noreferrer">Programming Rust： Fast， Safe Systems Development</a>：这本书也被评为亚马逊畅销书。</p><p><strong>9.</strong> <a href="https://amzn.to/3DS1pBi" target="_blank" rel="noreferrer">从新手到专业人士的 Rust 入门</a>：这本书的好处在于它的材料也与<a href="https://www.educative.io/courses/ultimate-guide-to-rust-programming" target="_blank" rel="noreferrer">教育</a>实践材料有关。</p><p><strong><a href="https://rust-for-rustaceans.com/" target="_blank" rel="noreferrer">Rust for Rustaceans</a></strong>：这是高级用户中广受欢迎的一本书，拥有很好的评价，但是我还没有得到过。我之所以推荐它，是因为作者 Jon Gjengset 有一个我非常喜欢的 Youtube 频道（下面的视频部分有更多详细信息）。</p><p><strong>《Rust for Rustaceans》书籍</strong></p><p><strong>创作背景</strong></p><p>《Rust for Rustaceans》由 Jon Gjengset 编写，他是一名经验丰富的 Rust 开发者，在 Rust 社区非常活跃。这本书旨在帮助开发者掌握 Rust 高级编程知识，构建和维护更加复杂的应用程序和库。作者用通俗易懂的语言和丰富的示例，对 Rust 的高级特性进行了深入浅出的讲解。</p><p><strong>主要特性</strong></p><ul><li>内容全面：涵盖了 Rust 高级编程的方方面面，包括生命周期、traits、异步编程、unsafe、内存布局等。</li><li>讲解透彻：作者不仅告诉你&quot;是什么&quot;，更重要的是&quot;为什么&quot;，让你对 Rust 的理解更加深刻。</li><li>示例丰富：每个知识点都配有代码示例，可以帮助你更好地理解和实践。</li><li>思路清晰：全书结构清晰，前后呼应，便于读者系统学习。</li></ul><p>如果你想成为一名 Rust 进阶玩家，《Rust for Rustaceans》是你必读的书籍之一。通过这本书，你将对 Rust 的高级特性有更全面和深入的认识，写出更加优雅、高效、安全的 Rust 代码。快来和作者 Jon Gjengset 一起开启 Rust 进阶之旅吧！</p><p><strong>参考文章</strong></p><p>[1] Rust for Rustaceans 官网：<a href="https://rust-for-rustaceans.com/" target="_blank" rel="noreferrer">https://rust-for-rustaceans.com/</a></p><h2 id="_2-练习资源-🏋️-♂️" tabindex="-1">2） 练习资源 🏋️ ♂️ <a class="header-anchor" href="#_2-练习资源-🏋️-♂️" aria-label="Permalink to &quot;2） 练习资源 🏋️ ♂️&quot;">​</a></h2><h4 id="🆓-免费资源" tabindex="-1">🆓 免费资源 <a class="header-anchor" href="#🆓-免费资源" aria-label="Permalink to &quot;🆓 免费资源&quot;">​</a></h4><p><a href="https://tourofrust.com/00_zh-cn.html" target="_blank" rel="noreferrer">Rust 语言之旅</a> （中文）本教程旨在循序渐进地介绍 Rust 编程语言的特性。</p><ul><li>GitHub 开源地址：<a href="https://github.com/richardanaya/tour_of_rust" target="_blank" rel="noreferrer">https://github.com/richardanaya/tour_of_rust</a></li><li>在线阅读：<a href="https://tourofrust.com/00_zh-cn.html" target="_blank" rel="noreferrer">https://tourofrust.com/00_zh-cn.html</a></li></ul><p><strong>10.</strong> <strong><a href="https://github.com/rust-lang/rustlings" target="_blank" rel="noreferrer">Rustlings</a></strong> 是一个 git 项目，带有学习 Rust 的小练习。我非常喜欢这个资源，因为它涵盖了“书”中的每个主题，有时很有挑战性。我完成了整套练习，每次完成艰难的练习时都感到非常有成就感。我最喜欢的是弄清楚如何编写一个函数，使用迭代器在一行中查找数字的阶乘。</p><blockquote><p>官网：<a href="https://rustlings.cool/" target="_blank" rel="noreferrer">https://rustlings.cool/</a></p></blockquote><p><strong>11.</strong> <strong><a href="https://exercism.org/tracks/rust" target="_blank" rel="noreferrer">Exercism</a></strong> 有一个动手实践的 Rust 学习轨道，初学者练习场。我个人认为这些练习的呈现方式很有趣。</p><p><strong>12.</strong> <strong><a href="https://www.codewars.com/?language=rust" target="_blank" rel="noreferrer">Codewars</a></strong> 允许您与同行进行编码挑战。这真的很酷，有助于磨练你的技能。我个人发现弄清楚我是否正确理解某些概念很有用。</p><p><strong>13.</strong> <strong><a href="https://www.codingame.com/start" target="_blank" rel="noreferrer">Coding Game</a></strong> 是一个基于游戏的学习如何编码的网站，也支持 Rust。我没有深入研究它，尽管 Coding Game 有很多好评，因为它有助于让学习变得有趣。</p><p>**<a href="https://app.stackup.dev/" target="_blank" rel="noreferrer">StackUp</a>**是一个开发者社区，您可以在其中学习，并通过参与我们的活动和任务赚取收益。</p><p>**<a href="https://adventofcode.com/" target="_blank" rel="noreferrer">Advent of Code</a>**是一年一度的活动，您可以在其中使用任何您想要的语言解决小型（但高质量的）编程难题。它适用于您正在学习的任何语言。您可能会发现这个、这个和这个存储库很有用，它们为前几年提供了模板和解决方案。</p><p>**<a href="https://leetcode.com/" target="_blank" rel="noreferrer">LeetCode</a>**是一个流行的面试准备平台，有各种不同难度的代码问题需要解决。如果您遇到困难，还有各种仓库和开发者解决 Rust 代码问题的视频资源。</p><p>编码挑战：<a href="https://codingchallenges.fyi/challenges/intro/" target="_blank" rel="noreferrer">编码挑战 - 简介 |编码挑战 (codingchallenges.fyi)</a></p><ul><li><a href="https://codingchallenges.fyi/blog/rust-coding-challenges" target="_blank" rel="noreferrer">Rust Coding Challenges | Coding Challenges</a></li></ul><h4 id="💲-付费资源" tabindex="-1">💲 付费资源 <a class="header-anchor" href="#💲-付费资源" aria-label="Permalink to &quot;💲 付费资源&quot;">​</a></h4><p><strong>14.</strong> <a href="https://egghead.io/q/rust" target="_blank" rel="noreferrer">Egghead.io</a> 更以项目为导向，帮助开发人员通过工作项目建立投资组合。有各种有趣的选择，尽管其中一个不错的选择是通过 Rustlings 练习的课程。</p><p><strong>15.</strong> <a href="https://www.educative.io/" target="_blank" rel="noreferrer">Educative</a> 有多种资源可以动手学习 Rust，其中一本与<a href="https://amzn.to/3DS1pBi" target="_blank" rel="noreferrer">从新手到专业的 Rust 入门</a>书有关。</p><h2 id="b-站视频" tabindex="-1">B 站视频 <a class="header-anchor" href="#b-站视频" aria-label="Permalink to &quot;B 站视频&quot;">​</a></h2><p><strong>程序员令狐壹冲</strong>：程序员，分享 Rust 和区块链技术：<a href="https://space.bilibili.com/485433391" target="_blank" rel="noreferrer">https://space.bilibili.com/485433391</a></p><p><a href="https://www.bilibili.com/video/BV1hp4y1k7SV/?vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">Rust 编程语言入门教程（Rust 语言/Rust 权威指南配套）【已完结】_哔哩哔哩_bilibili</a></p><h2 id="_3-youtube-视频" tabindex="-1">3） youtube 视频 <a class="header-anchor" href="#_3-youtube-视频" aria-label="Permalink to &quot;3） youtube 视频&quot;">​</a></h2><p><a href="https://www.youtube.com/watch?app=desktop&amp;v=ygL_xcavzQ4&amp;t=7122s" target="_blank" rel="noreferrer">Rust Tutorial Full Course (youtube.com)</a></p><p><strong>16.</strong> Doug Milford 的 <a href="https://www.youtube.com/playlist?list=PLLqEtX6ql2EyPAZ1M2_C0GgVd4A-_L4_5" target="_blank" rel="noreferrer">Rust 教程</a>是我最喜欢的资源之一。Doug 在解释 Rust 中的许多粘性概念方面做得很好。这些视频还介绍了不同的代码示例和方案来解释。</p><p><strong>17.</strong> <a href="https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/featured" target="_blank" rel="noreferrer">CS Honors @ Illinois</a> 是另一个最受欢迎的澄清概念的首选频道。该系列视频基于伊利诺伊大学厄巴纳香槟分校的 CS196（现为 CS124）新生课程，该课程由学生开设。这些课程视频并不完全是关于 Rust 的，但是，对于那些确实涵盖了 Rust 概念的视频，我发现它们非常有帮助。</p><p><strong>18.</strong> <a href="https://www.youtube.com/c/LetsGetRusty/featured" target="_blank" rel="noreferrer">Lets Get Rusty</a> 是一个有用的频道，每周提供有关 Rust 的视频。它有一个很好的播放列表，可以一一回顾“这本书”的章节。尽管我确实发现这些视频有时节奏很快，并且对一些解释有些挣扎。</p><ul><li><a href="https://www.youtube.com/@letsgetrusty" target="_blank" rel="noreferrer">Let&#39;s Get Rusty - YouTube</a></li></ul><p><strong>19.</strong> Brad Traversy 的 <a href="https://www.youtube.com/watch?v=zF34dRivLOw" target="_blank" rel="noreferrer">Rust Crash Course</a> 是一个很棒的快速教程，它向绝对的初学者介绍了各种概念。</p><p><strong>20.</strong> <a href="https://www.youtube.com/channel/UCpeX4D-ArTrsqvhLapAHprQ" target="_blank" rel="noreferrer">Ryan Levick</a> 是 Microsoft 的一名工程师，从事 Rust 工作，并有一系列视频对某些概念进行了有用的解释。还有一个很酷的项目，Ryan 使用 Rust 为 Microsoft Flight Simulator 2020 构建了一个 SDK。</p><p><strong>21.</strong> <a href="https://www.youtube.com/channel/UClny6qj9Mv7uFo9XGUGYQBA" target="_blank" rel="noreferrer">timClicks</a> 是 Tim Mcnamara 的一个频道，涵盖了 Rust 中的各种主题，还提供实时编码流。Tim 也是前面提到的 <a href="https://amzn.to/3DRu0qh" target="_blank" rel="noreferrer">Rust in Action</a> 一书的作者。</p><p><strong>22.</strong> <a href="https://www.youtube.com/watch?v=MsocPEZBd-M&amp;t=1820s" target="_blank" rel="noreferrer">Free Code Camp</a> 提供了 Rust 的初学者教程，该教程通过 CLI 应用程序运行。虽然有些有用，但我并没有花太多时间在这个上面，因为我在音频质量方面遇到了困难，而且视频很难在移动设备上观看。</p><p><strong>23.</strong> <a href="https://www.youtube.com/channel/UC_iD0xppBwwsrM9DegC5cQQ" target="_blank" rel="noreferrer">Jon Gjengset</a> 提供了一系列关于 Rust 概念的视频，但是，我没有发现很多是入门级的，因为它们需要一定程度的知识。当您对 Rust 概念更加熟悉时，这些视频可能会更好。虽如此，在我更深入地了解 Rust 之后，这是我非常喜欢的频道。在视频中，Jon 将选择 Rust 中的某个特定主题，并从几乎所有角度来解决它。不过要小心，这些视频可能非常长！每个视频的长度可能不少于一个小时。最长的视频长达 7 小时 20 分钟！</p><p><strong><a href="https://www.youtube.com/@codetothemoon/featured" target="_blank" rel="noreferrer">Code to the Moon</a></strong> 提供了很好的视频，澄清了 Rust 中的特定难点。</p><p><strong><a href="https://www.youtube.com/@NoBoilerplate/featured" target="_blank" rel="noreferrer">Noboilerplate</a></strong> 提供了有趣且快速的 Rust 技术视频。</p><p><strong><a href="https://www.youtube.com/watch?v=vOMJlQ5B-M0&amp;list=PLVvjrrRCBy2JSHf9tGxGKJ-bYAN_uDCUL" target="_blank" rel="noreferrer">Dcode</a></strong> 提供了一些高质量的 Rust 编程教程播放列表。</p><p><strong><a href="https://www.youtube.com/@300secondsofrust" target="_blank" rel="noreferrer">300 秒 Rust</a></strong> 提供了不同 Rust 概念的精短视频。如果您想快速刷新或深入了解某个概念，这将是一个很好的资源。</p><p><strong><a href="https://www.youtube.com/watch?v=pGh-0cMvH5g&amp;list=PLAJ-sYO1aGdxQ_skPPtJ7PlSAjTXM-atv" target="_blank" rel="noreferrer">The dev method</a></strong> 提供了 Rust 视频列表，解释了特定的概念。我发现解释非常清晰，很容易理解。</p><h2 id="_4-git-资源" tabindex="-1">4） git 资源 <a class="header-anchor" href="#_4-git-资源" aria-label="Permalink to &quot;4） git 资源&quot;">​</a></h2><p><a href="https://github.com/ctjhoa/rust-learning" target="_blank" rel="noreferrer">ctjhoa/rust-learning：一堆用于学习 Rust 的博客文章、文章、视频等链接 (github.com)</a></p><p><strong>24.</strong> 在 <a href="https://github.com/rust-lang" target="_blank" rel="noreferrer">Rust 编程语言</a>中，您可以找到与语言本身及其板条箱/库相关的大多数文档和指南。</p><p><strong>25.</strong> <a href="https://github.com/rust-unofficial/awesome-rust" target="_blank" rel="noreferrer">Awesome Rust</a> 是一个很棒的存储库，其中包含大量 Rust 代码和资源。您可以在基于 Rust 构建的不同领域找到完整的应用程序。</p><p><strong>26.</strong> <a href="https://github.com/ferrous-systems" target="_blank" rel="noreferrer">Ferrous Systems</a> 是一家 Rust 咨询公司，也是 Rust 生态系统的主要贡献者之一。在他们的存储库中，Ferrous 公开提供了其付费私人培训课程中的所有培训材料（代码示例和幻灯片）。这也包括他们的嵌入式培训。</p><p><strong>27.</strong> <a href="https://github.com/TheAlgorithms/Rust" target="_blank" rel="noreferrer">Rust 算法</a> Rust git repo 为数据结构、排序和字符串等许多基本标准算法提供了代码示例。如果您想练习求职面试，这是一个非常好的资源。</p><p><a href="https://github.com/QMHTMY/RustBook" target="_blank" rel="noreferrer">RustBook</a> （中文）一本关于 Rust 数据结构和算法的书。</p><ul><li>GitHub：<a href="https://github.com/QMHTMY/RustBook" target="_blank" rel="noreferrer">https://github.com/QMHTMY/RustBook</a></li></ul><h2 id="_5-课程-‍" tabindex="-1"><strong>5） 课程 ‍</strong> <a class="header-anchor" href="#_5-课程-‍" aria-label="Permalink to &quot;**5） 课程 ‍**&quot;">​</a></h2><p><a href="https://hackr.io/tutorials/learn-rust?sort=upvotes&amp;type_tags%5B%5D=1" target="_blank" rel="noreferrer">学习 Rust - [2023] 最佳 Rust 教程 |Hackr.io</a></p><ul><li>**<a href="https://learn.microsoft.com/en-us/training/paths/rust-first-steps/?WT.mc_id=academic-29077-cxa" target="_blank" rel="noreferrer">《Rust 初步》</a>**是由 Microsoft 提供的免费课程，提供 Rust 入门视角。</li><li>**<a href="https://www.manning.com/livevideo/rust-in-motion" target="_blank" rel="noreferrer">《Rust in Motion》</a>**是由 Carol Nichols 和 Jake Goulding 提供的付费短视频课程。Carol Nichols 是前面提到的《Rust 编程语言》的合著者。视频介绍 Rust 的基本方面。</li><li>**<a href="https://www.linkedin.com/learning/rust-essential-training" target="_blank" rel="noreferrer">《Rust Essential Training》</a>**是 LinkedIn 上提供的付费课程，评价很高。它涵盖了对初学者至关重要的 Rust 基本方面。</li></ul><h3 id="首选" tabindex="-1">首选 <a class="header-anchor" href="#首选" aria-label="Permalink to &quot;首选&quot;">​</a></h3><table><thead><tr><th><strong>课程亮点</strong></th><th><strong>工作量</strong></th></tr></thead><tbody><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#rust" target="_blank" rel="noreferrer">适合好学初学者的最佳综合课程</a>（Rust 基金会）</td><td>不适用</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#fcc" target="_blank" rel="noreferrer">最适合初学者的易于消化的课程</a>（自由代码营）</td><td>14 小时</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#linux" target="_blank" rel="noreferrer">好奇心的最佳入门课程</a>（Linux 基金会）</td><td>1–2 小时</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#duke" target="_blank" rel="noreferrer">最适合初学者的大学水平课程</a>（杜克大学）</td><td>36 小时</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#google" target="_blank" rel="noreferrer">Android 和嵌入式编程的最佳课程</a>（谷歌）</td><td>3 天</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#microsoft" target="_blank" rel="noreferrer">最适合初学者的一口课程</a>（Microsoft）</td><td>5–6 小时</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#webdev" target="_blank" rel="noreferrer">Web 开发最佳课程</a>（杰里米·乔恩）</td><td>1–2 小时</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#python" target="_blank" rel="noreferrer">Python 程序员的最佳课程</a>（迈克尔·凯费德）</td><td>14 小时</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#exercism" target="_blank" rel="noreferrer">练习 Rust 的最佳课程</a>（行使）</td><td>不适用</td></tr><tr><td><a href="https://www.classcentral.com/report/best-rust-courses/#webassembly" target="_blank" rel="noreferrer">WebAssembly 的最佳课程</a>（Linux 基金会）</td><td>7–14 小时</td></tr></tbody></table><h2 id="_6-备忘单" tabindex="-1">6） 备忘单 <a class="header-anchor" href="#_6-备忘单" aria-label="Permalink to &quot;6） 备忘单&quot;">​</a></h2><p>有多种选择，只需选择最适合您的选择即可</p><p><a href="https://rustwiki.org/docs/" target="_blank" rel="noreferrer">Rust 中文文档 | Rust 文档网 (rustwiki.org)</a></p><p><a href="https://rustwiki.org/zh-CN/edition-guide/introduction.html" target="_blank" rel="noreferrer">Rust版本指南</a></p><p><a href="https://www.runoob.com/rust/rust-tutorial.html" target="_blank" rel="noreferrer">Rust 教程 | 菜鸟教程 (runoob.com)</a></p><p>cheats Rust 语言备忘单官网：<a href="https://cheats.rs/" target="_blank" rel="noreferrer">https://cheats.rs/</a></p><p>cheats Rust 语言备忘单GitHub：<a href="https://github.com/ralfbiedert/cheats.rs" target="_blank" rel="noreferrer">https://github.com/ralfbiedert/cheats.rs</a></p><p><a href="https://quickref.me/rust" target="_blank" rel="noreferrer">Rust 初学者备忘单</a></p><p><a href="https://phaiax.github.io/rust-cheatsheet/" target="_blank" rel="noreferrer">Rust 备忘单</a></p><p><a href="https://forge.rust-lang.org/" target="_blank" rel="noreferrer">概述 - Rust Forge (rust-lang.org)</a></p><p><strong>31.</strong> 让我们得到 Rust 的备忘单，你必须<a href="https://letsgetrusty.com/" target="_blank" rel="noreferrer">在这里</a>注册一份时事通讯才能得到。</p><h2 id="_7-问题论坛" tabindex="-1">7） 问题论坛 <a class="header-anchor" href="#_7-问题论坛" aria-label="Permalink to &quot;7） 问题论坛&quot;">​</a></h2><p>提出问题显然是学习的关键部分。让它变得更好的是陆锈类动物是多么乐于助人和友好。此外，对于下面列出的资源，令人敬畏的部分是您可以非常快速地回答您的问题（大多数时候几乎是立即）。</p><p><strong>32.</strong> <a href="https://discord.com/invite/rust-lang" target="_blank" rel="noreferrer">Rust 编程语言 Discord</a></p><p><strong>33.</strong> <a href="https://discord.com/invite/rust-lang-community" target="_blank" rel="noreferrer">Rust 编程语言社区 Discord</a></p><p><strong>34.</strong> <a href="https://www.reddit.com/r/rust/" target="_blank" rel="noreferrer">Rust 编程语言 subreddit</a></p><p><strong>35.</strong> 有一个官方的 <a href="https://users.rust-lang.org/" target="_blank" rel="noreferrer">Rust 语言论坛</a>，我个人根本没有利用它，因为我在以前的论坛中找到了我需要的东西。</p><h2 id="其他社区" tabindex="-1">其他社区 <a class="header-anchor" href="#其他社区" aria-label="Permalink to &quot;其他社区&quot;">​</a></h2><p>Rust 语言中文社区：<a href="https://rustcc.cn/" target="_blank" rel="noreferrer">Rust 语言中文社区-首页 (rustcc.cn)</a></p><h2 id="_8-播客" tabindex="-1">8） 播客 <a class="header-anchor" href="#_8-播客" aria-label="Permalink to &quot;8） 播客&quot;">​</a></h2><p>以下是一些有用的播客，讨论 Rust 概念和有趣的主题。</p><ul><li><strong><a href="https://newrustacean.com/" target="_blank" rel="noreferrer">New Rustacean</a></strong></li><li><strong><a href="https://rustacean-station.org/" target="_blank" rel="noreferrer">Rustacean Station</a></strong></li><li><strong><a href="https://podcasts.apple.com/gb/podcast/building-with-rust/id1553513574" target="_blank" rel="noreferrer">Building with Rust</a></strong></li><li><strong><a href="https://rustgamedev.com/" target="_blank" rel="noreferrer">Rust Game Dev</a></strong></li></ul><h2 id="_9-新闻通讯" tabindex="-1">9） 新闻通讯 <a class="header-anchor" href="#_9-新闻通讯" aria-label="Permalink to &quot;9） 新闻通讯&quot;">​</a></h2><p>为了保持对 Rust 的了解，可以订阅以下一些新闻通讯。这些新闻通讯每周提供与 Rust 相关的一切信息的汇总。</p><p><a href="https://this-week-in-rust.org/" target="_blank" rel="noreferrer">本周 Rust (this-week-in-rust.org)</a></p><p><a href="https://rustmagazine.github.io/rust_magazine_2021/index.html" target="_blank" rel="noreferrer">介绍 - Rust 精选 (rustmagazine.github.io)</a></p><ul><li><strong><a href="https://rust.libhunt.com/newsletter" target="_blank" rel="noreferrer">Awesome Rust Weekly</a></strong></li><li><strong><a href="https://this-week-in-rust.org/" target="_blank" rel="noreferrer">This week in Rust</a></strong></li><li><strong><a href="https://discu.eu/weekly/rust/" target="_blank" rel="noreferrer">Rust Weekly</a></strong></li><li><strong><a href="https://rustinblockchain.org/" target="_blank" rel="noreferrer">Rust in Blockchain</a></strong></li></ul><p>RustMagazine 2021 期刊：<a href="https://github.com/RustMagazine/rust_magazine_2021" target="_blank" rel="noreferrer">RustMagazine/rust_magazine_2021: RustMagazine 2021 期刊 (已完结) (github.com)</a></p><p>官网：<a href="https://rustmagazine.github.io/rust_magazine_2021/print.html" target="_blank" rel="noreferrer">Rust精选 (rustmagazine.github.io)</a></p><p>组织：<a href="https://github.com/RustMagazine" target="_blank" rel="noreferrer">Rust Magazine (github.com)</a></p><p><a href="https://rust.jskou.com/this-week-in-rust/index.html" target="_blank" rel="noreferrer">Rust周资讯 - This Week in Rust (jskou.com)</a></p><h2 id="操作系统开发" tabindex="-1">操作系统开发 <a class="header-anchor" href="#操作系统开发" aria-label="Permalink to &quot;操作系统开发&quot;">​</a></h2><h3 id="rust-raspberrypi-os-tutorials-使用rust打造定制化嵌入式操作系统" tabindex="-1">rust-raspberrypi-OS-tutorials：使用Rust打造定制化嵌入式操作系统 <a class="header-anchor" href="#rust-raspberrypi-os-tutorials-使用rust打造定制化嵌入式操作系统" aria-label="Permalink to &quot;rust-raspberrypi-OS-tutorials：使用Rust打造定制化嵌入式操作系统&quot;">​</a></h3><p><strong>项目地址</strong>：<a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials" target="_blank" rel="noreferrer">https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials</a></p><p><strong>什么是rust-raspberrypi-OS-tutorials</strong></p><blockquote><p>rust-raspberrypi-OS-tutorials是一个在Raspberry Pi上使用Rust编程语言编写嵌入式操作系统的教程项目。该项目的目标是向开发者展示如何使用Rust语言和Raspberry Pi硬件来构建自己的操作系统。</p></blockquote><p><strong>为什么选择Rust编程语言</strong></p><p>Rust是一种现代、安全、并发的系统编程语言，具有高性能和内存安全的特性。它可以很好地与硬件交互，并提供了强大的工具和库来简化嵌入式系统的开发过程。</p><p><img src="`+e+'" alt="image-20240526145020785"></p><p><strong>学习rust-raspberrypi-OS-tutorials的好处</strong></p><p>通过学习rust-raspberrypi-OS-tutorials，开发者可以了解如何利用Rust语言的优势来编写嵌入式操作系统。这将使他们能够更好地理解操作系统的工作原理，提高对硬件的认识，并学习如何实现基本的系统功能。</p><p><img src="'+n+'" alt="图片"></p><p><strong>项目结构</strong></p><p>rust-raspberrypi-OS-tutorials项目包含了一系列教程和示例代码，涵盖了从初始化Raspberry Pi硬件到构建基本操作系统功能的全过程。开发者可以按照教程逐步学习，了解每个步骤的实现原理，并在实践中提升自己的编程技能。</p><p><strong>教程内容</strong></p><p>该项目包含了以下教程内容：</p><ol><li>Rust编程语言基础介绍：介绍了Rust语言的基本语法和特性，帮助开发者了解如何在Rust中进行嵌入式开发。</li><li>Raspberry Pi硬件介绍：介绍了Raspberry Pi硬件的基本结构和功能，以及如何与其进行交互和控制。</li></ol><p><img src="'+l+`" alt="image-20240526145156825"></p><ol><li><ol start="3"><li>低级编程：讲解了如何使用Rust语言进行低级编程，包括访问硬件寄存器、处理中断和异常等操作。</li></ol></li><li><ol start="4"><li>内存管理：介绍了如何在Rust中进行内存管理，包括堆栈管理、内存映射等操作。</li></ol></li><li><ol start="5"><li>文件系统：讲解了如何在嵌入式系统中实现简单的文件系统，并实现文件的读写操作。</li></ol></li><li><ol start="6"><li>网络功能：介绍了如何在嵌入式系统中实现网络功能，包括TCP/IP协议栈的实现和网络数据传输。</li></ol></li><li></li></ol><p><strong>学习路径</strong></p><p>开发者可以按照以下学习路径来学习rust-raspberrypi-OS-tutorials项目：</p><ol><li>阅读项目的README文件，了解项目背景和目标。</li><li>按照教程的顺序逐步学习，理解每个步骤的实现原理。</li><li>在实践中动手编写代码，实现教程中的功能，并进行调试和优化。</li><li>参与项目的讨论和贡献，与其他开发者交流经验和分享学习。</li></ol><p><strong>总结</strong></p><p>rust-raspberrypi-OS-tutorials项目为想要学习如何在Raspberry Pi上使用Rust语言编写嵌入式操作系统的开发者提供了一个很好的学习资源。通过逐步学习和实践，开发者可以掌握嵌入式系统开发的基本原理和技能，为未来的项目和工作提供更多的可能性。</p><h2 id="嵌入式开发简化指南" tabindex="-1">嵌入式开发简化指南 <a class="header-anchor" href="#嵌入式开发简化指南" aria-label="Permalink to &quot;嵌入式开发简化指南&quot;">​</a></h2><h3 id="evilhelix-编辑器" tabindex="-1">EvilHelix 编辑器 <a class="header-anchor" href="#evilhelix-编辑器" aria-label="Permalink to &quot;EvilHelix 编辑器&quot;">​</a></h3><p>EvilHelix 是一个采用 Vim 风格的模态编辑器，旨在提供快速且高效的编辑体验。它是 Helix 编辑器的一个分支，增加了 Vim binding，同时积极同步上游的特性，兼备了 Vim 和 Hexli 的优点：</p><ul><li>Vim 风格的模态编辑方式，使得熟悉 Vim 的用户能够更快速地上手</li><li>基于 Helix，使得其响应速度非常快</li></ul><p>github主页 <a href="https://github.com/usagi-flow/evil-helix" target="_blank" rel="noreferrer">https://github.com/usagi-flow/evil-helix</a></p><h3 id="quickwit-性能调查" tabindex="-1">Quickwit 性能调查 <a class="header-anchor" href="#quickwit-性能调查" aria-label="Permalink to &quot;Quickwit 性能调查&quot;">​</a></h3><p>这篇博客详细介绍了 Quickwit 团队在处理性能问题时所采取的方法和结果，其排查问题的思路很值得借鉴。</p><p>Quickwit 的目标是构建高性能、可扩展的分布式搜索引擎，团队发现在大型数据集上进行搜索时，搜索速度较慢、响应时间较长，与用户期望不符，因此需要解决这些性能问题。</p><p>在性能调查过程中，作者发现，发现未使用的内存分配可以将函数吞吐量提高 2 倍。通过对 FxHashMap 进行基准测试，作者发现了性能提升的效应。</p><p>由此，作者探讨了内存分配对性能的影响，包括缓存行改进和数据指针的缓存局部性，得到的结论是：如果程序因匿名内存映射（不由文件支持）而出现缺页错误（page fault），可以考虑避免释放内存回操作系统或分配器，以减少缺页错误（page fault）</p><p>原文链接 <a href="https://quickwit.io/blog/performance-investigation" target="_blank" rel="noreferrer">https://quickwit.io/blog/performance-investigation</a></p><p>示例项目主页 <a href="https://github.com/PSeitz/bench_riddle" target="_blank" rel="noreferrer">https://github.com/PSeitz/bench_riddle</a></p><h3 id="嵌入式-rust-一份简化指南" tabindex="-1">嵌入式 Rust：一份简化指南 <a class="header-anchor" href="#嵌入式-rust-一份简化指南" aria-label="Permalink to &quot;嵌入式 Rust：一份简化指南&quot;">​</a></h3><p>这是一份来自嵌入式 Rust 社区的新书/指南，旨在帮助人们更轻松地理解和使用 Rust 语言在嵌入式系统开发中的应用。它提供了一种简单的方法来开始学习和使用 Rust，特别是对那些对嵌入式系统编程有兴趣的人。</p><p>指南中包含了一系列的指导，旨在帮助读者了解 Rust 语言的基本概念，并将其应用于嵌入式系统开发中。它从Rust语言的基础知识开始，逐步介绍了如何配置和使用嵌入式系统，并提供了一些实际的例子来帮助读者更好地理解。</p><p>github主页 <a href="https://github.com/theembeddedrustacean/ser-std" target="_blank" rel="noreferrer">https://github.com/theembeddedrustacean/ser-std</a></p><p>嵌入式 Rust 简化指南主页 <a href="https://www.theembeddedrustacean.com/c/ser-std" target="_blank" rel="noreferrer">https://www.theembeddedrustacean.com/c/ser-std</a></p><p>嵌入式 Rust 主页 <a href="https://www.theembeddedrustacean.com/" target="_blank" rel="noreferrer">https://www.theembeddedrustacean.com/</a></p><h1 id="rust学习工具" tabindex="-1">Rust学习工具 <a class="header-anchor" href="#rust学习工具" aria-label="Permalink to &quot;Rust学习工具&quot;">​</a></h1><h2 id="aquascope-可视化揭秘-rust-程序的编译与运行时" tabindex="-1">Aquascope：可视化揭秘 Rust 程序的编译与运行时 <a class="header-anchor" href="#aquascope-可视化揭秘-rust-程序的编译与运行时" aria-label="Permalink to &quot;Aquascope：可视化揭秘 Rust 程序的编译与运行时&quot;">​</a></h2><h3 id="参考文网址" tabindex="-1">参考文网址 <a class="header-anchor" href="#参考文网址" aria-label="Permalink to &quot;参考文网址&quot;">​</a></h3><ul><li>Aquascope 项目主页：<a href="https://github.com/cognitive-engineering-lab/aquascope" target="_blank" rel="noreferrer">https://github.com/cognitive-engineering-lab/aquascope</a></li><li>Aquascope 项目试验场：<a href="https://cognitive-engineering-lab.github.io/aquascope/" target="_blank" rel="noreferrer">https://cognitive-engineering-lab.github.io/aquascope/</a></li><li>Rust 官方文档：<a href="https://doc.rust-lang.org/" target="_blank" rel="noreferrer">https://doc.rust-lang.org/</a></li></ul><h3 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>作为一名 Rust 开发者，你是否曾对 Rust 独特的所有权机制和借用检查感到好奇？是否希望能更直观地理解 Rust 编译器是如何“思考”你的代码的？今天，我要给大家介绍一款神奇的工具——Aquascope，它能生成 Rust 程序的交互式可视化图表，帮助我们深入洞察 Rust 的编译期和运行时行为。</p><h3 id="创作背景" tabindex="-1">创作背景 <a class="header-anchor" href="#创作背景" aria-label="Permalink to &quot;创作背景&quot;">​</a></h3><p>Aquascope 是由 Brown 大学 Cognitive Engineering Lab 开发的一款研究性质的软件工具。它旨在帮助 Rust 开发者、教育工作者和编程语言研究人员更好地理解 Rust 的内在机制。通过生成直观的交互式可视化图表，Aquascope 让 Rust 的编译期借用检查和运行时行为变得&quot;可见&quot;，方便我们学习和分析。</p><h3 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h3><ul><li>生成展示 Rust 借用检查器如何“思考”程序的交互式可视化图表</li><li>生成展示 Rust 程序实际执行情况的交互式可视化图表</li><li>提供 mdBook 预处理器，可将 Aquascope 图表嵌入 mdBook 中</li><li>支持通过 Web 界面本地运行 Aquascope 游乐场</li></ul><h3 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h3><p>想快速体验 Aquascope 的威力吗？我们可以直接在 Aquascope Playground 中尝试。访问以下网址:</p><p><a href="https://cognitive-engineering-lab.github.io/aquascope/" target="_blank" rel="noreferrer">https://cognitive-engineering-lab.github.io/aquascope/</a></p><p>你会看到一个在线的代码编辑器，可以在里面编写 Rust 代码。比如我们写下这样一段简单的代码:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 创建一个字符串变量 x</span></span>
<span class="line"><span style="color:#61AFEF;">    foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 将 x 传递给函数 foo</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 尝试打印 x</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">// 函数 foo 接收一个 String 类型的参数 s</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后点击 “Interpret“ 按钮，Aquascope 就会开始工作，生成该程序运行时的可视化图表。我们可以通过下方的控制面板调整细节，比如查看每一步的状态。</p><p>同时你会注意到，“Boundaries” 和 “Permissions” 按钮在这段代码下是灰色不可点击的。这提示我们这段代码没有通过 Rust 的借用检查。将光标移动到第 4 行，就会看到错误提示:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">error[E0382]:</span><span style="color:#98C379;"> borrow</span><span style="color:#98C379;"> of</span><span style="color:#98C379;"> moved</span><span style="color:#98C379;"> value:</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">x</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#61AFEF;"> --</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">src/lib.rs:4:20</span></span>
<span class="line"><span style="color:#ABB2BF;">  |</span></span>
<span class="line"><span style="color:#61AFEF;">2</span><span style="color:#ABB2BF;"> |     </span><span style="color:#56B6C2;">let</span><span style="color:#98C379;"> x</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> String::from</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  |         </span><span style="color:#61AFEF;">-</span><span style="color:#98C379;"> move</span><span style="color:#98C379;"> occurs</span><span style="color:#98C379;"> because</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">x</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;"> has</span><span style="color:#98C379;"> type</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">String</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">,</span><span style="color:#98C379;"> which</span><span style="color:#98C379;"> does</span><span style="color:#98C379;"> not</span><span style="color:#98C379;"> implement</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">Copy</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;"> trait</span></span>
<span class="line"><span style="color:#61AFEF;">3</span><span style="color:#ABB2BF;"> |     </span><span style="color:#61AFEF;">foo(x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  |         </span><span style="color:#61AFEF;">-</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> moved</span><span style="color:#98C379;"> here</span></span>
<span class="line"><span style="color:#61AFEF;">4</span><span style="color:#ABB2BF;"> |     </span><span style="color:#61AFEF;">println!(</span><span style="color:#61AFEF;">&quot;{}&quot;</span><span style="color:#61AFEF;">,</span><span style="color:#98C379;"> x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  |                    </span><span style="color:#61AFEF;">^</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> borrowed</span><span style="color:#98C379;"> here</span><span style="color:#98C379;"> after</span><span style="color:#98C379;"> move</span></span>
<span class="line"><span style="color:#61AFEF;">For</span><span style="color:#98C379;"> more</span><span style="color:#98C379;"> information</span><span style="color:#98C379;"> about</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> error,</span><span style="color:#98C379;"> try</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">rustc</span><span style="color:#D19A66;"> --explain</span><span style="color:#98C379;"> E0382\`</span><span style="color:#56B6C2;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Rust 独特的所有权机制在起作用。当我们将 x 传递给 foo 函数时，x 的所有权就转移给了函数参数 s，之后 x 就不再有效。第 4 行尝试再次使用 x，就会触发错误。</p><p>我们对代码做一些修改:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    foo</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 传递 x 的不可变引用给函数 foo</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">// 函数 foo 接收一个 &amp;String 类型的参数</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>再次点击 “Interpret”，“Boundaries” 和 “Permissions” 按钮就变成可点击的了。我们可以尝试点击它们，生成展示借用检查信息的可视化图表，进一步研究一下 Rust 所有权机制是如何工作的。</p><p>是不是感觉很神奇？我们只需要简单几步，就能在 Aquascope Playground 中学习和探索 Rust 的编译期和运行时行为。快去试试看吧，相信你一定能从 Aquascope 生动直观的可视化中获得新的认识和灵感!</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Aquascope 是一款非常有助于学习和理解 Rust 的实用工具。通过可视化的方式，它揭示了 Rust 编译期借用检查和运行时行为的奥秘，让 Rust 初学者能更轻松地掌握 Rust 的独特机制。</p><p>作为研究性质的软件，Aquascope 目前仍在活跃开发中。欢迎大家关注该项目，为其贡献代码和反馈问题。让我们一起推动 Rust 学习和研究的发展！</p><h1 id="rust算法实现" tabindex="-1">Rust算法实现 <a class="header-anchor" href="#rust算法实现" aria-label="Permalink to &quot;Rust算法实现&quot;">​</a></h1><ul><li>官网：<a href="https://rust.facepunch.com/" target="_blank" rel="noreferrer">https://rust.facepunch.com/</a></li><li>GitHub地址：<a href="https://github.com/TheAlgorithms/Rust" target="_blank" rel="noreferrer">https://github.com/TheAlgorithms/Rust</a></li><li>这里收集了 所有算法的Rust语言实现</li><li>镜像代码：<a href="http://www.gitpp.com/farsoft/rust-algorithms" target="_blank" rel="noreferrer">http://www.gitpp.com/farsoft/rust-algorithms</a></li></ul><p><strong>Rust</strong> 是一种系统级编程语言，由 Mozilla 主导开发，旨在提供高性能、安全、并发的特性。Rust 的设计特别注重内存安全，通过所有权（ownership）、借用（borrowing）和生命周期（lifetimes）等机制，来避免内存泄漏和数据竞争等问题。</p><p><strong>Rust 的一些主要特点包括：</strong></p><ol><li>内存安全：Rust 通过所有权和借用机制，提供了静态的内存安全保证，这意味着在编译时就能检测出许多内存相关的错误。</li><li>高性能：Rust 编译成的程序可以接近 C++ 的性能，同时提供了更多的安全和并发支持。</li><li>并发编程：Rust 提供了丰富的并发编程工具，如所有权、生命周期和原子操作等，帮助开发者编写高性能和线程安全的并发程序。</li><li>跨平台：Rust 编译器可以生成多种平台的代码，包括 Windows、macOS、Linux、Android 和 iOS 等。</li><li>丰富的库和工具：Rust 拥有一个不断增长的社区和丰富的库，支持各种开发需求，如 Web 开发、网络编程、系统编程等。</li><li>文档和社区支持：Rust 拥有高质量的官方文档和活跃的社区，帮助开发者解决问题和学习新知识。</li></ol><p>Rust 因其强大的性能和安全性，在开发社区中获得了广泛的认可，被用于开发各种系统级软件，如操作系统、数据库、Web 服务器等。同时，Rust 也成为了许多开发者的首选语言，用于各种项目和个人项目。</p><p>如果您对 Rust 感兴趣，可以通过学习官方文档、参加社区活动或阅读相关书籍来深入了解这个语言。Rust 是一个不断发展的语言，值得学习和使用。</p>`,255),u=[p];function i(c,h,b,g,f,m){return t(),r("div",null,u)}const B=s(o,[["render",i]]);export{y as __pageData,B as default};
