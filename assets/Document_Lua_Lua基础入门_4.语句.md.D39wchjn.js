import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const C=JSON.parse('{"title":"第四章 语句","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Lua/Lua基础入门/4.语句.md","filePath":"Document/Lua/Lua基础入门/4.语句.md","lastUpdated":1717759497000}'),p={name:"Document/Lua/Lua基础入门/4.语句.md"},o=l(`<h1 id="第四章-语句" tabindex="-1">第四章 语句 <a class="header-anchor" href="#第四章-语句" aria-label="Permalink to &quot;第四章 语句&quot;">​</a></h1><p>​ Lua同C或者Pascal等语言一样，支持常规语句，这些常规语句包括赋值、控制结构和过程调用；Lua也支持一些非常用语句，比如多重赋值和局部变量声明。</p><h2 id="_4-1-赋值" tabindex="-1">4.1 赋值 <a class="header-anchor" href="#_4-1-赋值" aria-label="Permalink to &quot;4.1 赋值&quot;">​</a></h2><p>​ 赋值是更改一个变量值或表中键值的最基本手段：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;hello&quot; </span><span style="color:#ABB2BF;">.. </span><span style="color:#98C379;">&quot;world&quot; </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">.n = </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">.n +</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Lua允许多重赋值，即仅需一个步骤便将多个值分别赋给多个变量。变量和值之间通过逗号分隔，例如下面的语句：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 变量a被赋值为10，变量b被赋值为2*x。</p><p>​ 在多重赋值中，Lua首先会计算出等号右边所有值得结果，然后再调用赋值。因此，可以利用多重赋值交换两个变量的值，比如下面的例子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#7F848E;font-style:italic;"> -- 交换&#39;x&#39;和&#39;y&#39;的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">-- 交换&#39;a[i]&#39;和&#39;a[j]&#39;的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Lua会自动调整值的数量来适应变量的数量：当值的数量比变量的数量少的时候，Lua会使用nil替代缺少的值；当值得数量比变量的数量多的时候，Lua会忽略多出来的值：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 0 1 nil</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">+</span><span style="color:#D19A66;">2</span><span style="color:#7F848E;font-style:italic;"> -- b+2的值被忽略</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 1 2 a, b, c = 0</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 0 nil nil</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面例子中的最后一个赋值是一个常见错误：请牢记，想要在多重复值中初始化每个变量，必须逐个为它们提供值。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 0 0 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 实际上，上面那些例子仅仅是为了说明多重赋值的使用方法，在现实中，人们很少将几个毫无关联的变量在同一行中使用多重赋值进行赋值。特别是，使用多重赋值并不比将赋值语句分开写在每一个独立行中效率更高。然后有些情况的确需要用到多重赋值，前面那个交换两个变量的值就是一个典型的例子。还有一种常见的情况是在一个函数有多个返回值时，单次调用并保存它的返回结果，这就要求在一个表达式中能够保存多个变量的值。例如赋值语句a,b=f()意味着函数f的调用返回两个结果：<strong>将第一个结果保存 结到a中，第二个结果保存到b中。</strong></p><h2 id="_4-2-局部变量和块" tabindex="-1">4.2 局部变量和块 <a class="header-anchor" href="#_4-2-局部变量和块" aria-label="Permalink to &quot;4.2 局部变量和块&quot;">​</a></h2><p>​ Lua除了支持全局变量，同时也支持局部变量。使用local 关键字来创建局部变量：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span><span style="color:#7F848E;font-style:italic;"> -- 全局变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> -- 局部变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 与全局变量不同的是，局部变量的作用于局限在声明他们的块中。&quot;块&quot;是可以是控制结构或者函数的执行体，也可以是程序块（变量被声明时所处的文件或字符串）：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> -- 程序块中的局部变量</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> &lt;= </span><span style="color:#E06C75;">x</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">	local</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">*</span><span style="color:#D19A66;">2</span><span style="color:#7F848E;font-style:italic;"> -- 执行体中的局部变量</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 2, 4, 6, 8, ...</span></span>
<span class="line"><span style="color:#E06C75;">	i</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#D19A66;">20</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#C678DD;">	local</span><span style="color:#E06C75;"> x</span><span style="color:#7F848E;font-style:italic;"> -- &quot;then&quot;执行体中的局部变量</span></span>
<span class="line"><span style="color:#E06C75;">	x</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">20</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- (如果为真，打印22)</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10 (全局变量)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10 (全局变量)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>​ 需要注意，这个例子在交互模式中无法得到预期结果。在交互模式中，每一个行都是一个独立的程序块（除非这一行是不完整的命令）。在输入这个例子中的第二行的时候，Lua会立即执行并在下一行重新开始一个程序块，这已经超出local 的作用域。可以将多行语句包含到关键词对do-end 中，这样就能显式声明一个程序块的边界，从而解决作用域问题。当输入do的时候，只有在得到对应的end 时才会认为是一条命令的结束，这样Lua就不会每次都仅仅执行独立的一行。</p><p>do-end 关键词对包起来的块还可以用于精确控制某些变量的作用域：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> a2</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> d</span><span style="color:#ABB2BF;"> = (</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">)^(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    x1</span><span style="color:#ABB2BF;"> = (-</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">)/</span><span style="color:#E06C75;">a2</span></span>
<span class="line"><span style="color:#E06C75;">    x2</span><span style="color:#ABB2BF;"> = (-</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">)/</span><span style="color:#E06C75;">a2</span></span>
<span class="line"><span style="color:#C678DD;">end</span><span style="color:#7F848E;font-style:italic;"> -- &#39;a2&#39;和&#39;d&#39;的作用域到此为止</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x2</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​ 尽量使用局部变量是一个良好的编程习惯。使用局部变量能够避免因为命名冲突而导致全局环境被破坏的情况。除此之外，局部变量比全局变量的访问速度要快。总而言之，局部变量会在离开它的作用域之后消失，并且允许垃圾回收器释放它的值。</p><p>​ Lua将声明局部变量作为语句来处理，这意味着，可以在任何地方定义一个局部变量。被声明变量的作用域从声明那一刻开始，到块末尾结束。变量声明的同时可以进行初始化赋值，遵循常规原则：多余的值会被丢弃；剩余未被赋值的变量被赋值为nil。如果一个声明没有初始化值，那么其中的变量都会被赋值为nil</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#E06C75;">b</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 1</span></span>
<span class="line"><span style="color:#C678DD;">	local</span><span style="color:#E06C75;"> a</span><span style="color:#7F848E;font-style:italic;"> -- a被默认赋值为&#39;nil&#39;</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; nil</span></span>
<span class="line"><span style="color:#C678DD;">end</span><span style="color:#7F848E;font-style:italic;"> -- 以&#39;then&#39;开始的块结束</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 1 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Lua中的一个常见用法是：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">foo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 这行代码创建一个局部变量，并使用全局变量foo的值对其进行初始化（只有在声明之后，局部变量 foo才可见）。代码中的其它函数可能会对全局变量foo进行修改，而这个用法可以将foo的原始值进行保存。同时，访问局部变量的速度要快于访问全局变量，这也是这种用法的意义所在。</p><p>​ 因为许多编程语言要求在一个块（或者过程）的起始必须声明所有将要用到的局部变量，所以人们觉得在块的中间声明一个变量是不好的习惯。现实是，恰恰相反：在需要的时候再声明变量不仅可以减少无法用有效值对其进行初始化的情况（也减少忘记对其初始化的情况），还可以缩小变量的作用范围，而这可以提高代码的可读性。</p><h2 id="_4-3-控制结构" tabindex="-1">4.3 控制结构 <a class="header-anchor" href="#_4-3-控制结构" aria-label="Permalink to &quot;4.3 控制结构&quot;">​</a></h2><p>Lua提供一些简单并且常用的控制结构：</p><p>if用于条件执行；while ，repeat 和for 用于循环。所有的控制语句都有一个显式的终止标识：end 用于终止 if 、for 和while 结构；until 用于终止repeat 结构。</p><p>​ 控制结构中的条件表达式可以返回任何值。Lua把除了false 和nil 的所有值都认为是真（特别需要注意的是，数字0和空字符串也是真），这点需要牢记。</p><h3 id="if-then-else" tabindex="-1">if then else <a class="header-anchor" href="#if-then-else" aria-label="Permalink to &quot;if then else&quot;">​</a></h3><p>​ if语句会对它的条件进行测试，如果测试结果为真，就运行then部分 ，如果测试为假，在有else部 分的时候，运行else部分。else部分 不是必须的。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> then</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#E06C75;">b</span><span style="color:#C678DD;"> then</span><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> else</span><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> b</span><span style="color:#C678DD;"> end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> line</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#E06C75;">MAXLINES</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#61AFEF;">	showpage</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	line</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果想连续使用if来对多种互斥可能性进行检查，可以使用elseif ，它的用法跟if后面接else 类似，但可以免去使用多个end ：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> op</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;+&quot; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#E06C75;">	r</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#C678DD;">elseif</span><span style="color:#E06C75;"> op</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;-&quot; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#E06C75;">	r</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#C678DD;">elseif</span><span style="color:#E06C75;"> op</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;*&quot; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#E06C75;">	r</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#C678DD;">elseif</span><span style="color:#E06C75;"> op</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;/&quot; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#E06C75;">	r</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">	error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;invalid operation&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Lua没有switch 语句，类似上面的用法跟switch 其实是大同小异的。while会循环检查条件是否为真，如果为真就会执行循环体中的代码，直到条件变为假。跟其它语言中的做法一样，Lua首先会对条件进行判断，如果为假，会直接结束循环；否则，Lua会执行循环体中的代码并重复这整个过程（判断和执行）。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#E06C75;">	i</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="repeat" tabindex="-1">repeat <a class="header-anchor" href="#repeat" aria-label="Permalink to &quot;repeat&quot;">​</a></h3><p>​ repeat-until语句会重复执行循环体，直到条件为真。repeat-until语句会先执行循环体，再进行条件判断，因此，该语句可以保证至少执行一次循环体。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">--打印出第一行非空输入</span></span>
<span class="line"><span style="color:#C678DD;">repeat</span></span>
<span class="line"><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">until</span><span style="color:#E06C75;"> line</span><span style="color:#ABB2BF;"> ~= </span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不同于其它多数语言，Lua在循环体中声明的变量，作用范围延伸至条件判断部分：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> sqr</span><span style="color:#ABB2BF;"> =  </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#C678DD;">repeat</span></span>
<span class="line"><span style="color:#E06C75;">sqr</span><span style="color:#ABB2BF;"> = (</span><span style="color:#E06C75;">sqr</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">sqr</span><span style="color:#ABB2BF;">)/</span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> error</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">math.abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sqr</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> - </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">until</span><span style="color:#56B6C2;"> error</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">10000</span><span style="color:#7F848E;font-style:italic;"> -- 局部变量&#39;error&#39;依旧可见</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="数字型for" tabindex="-1">数字型for <a class="header-anchor" href="#数字型for" aria-label="Permalink to &quot;数字型for&quot;">​</a></h3><p>​ for语句有两种形式：数字型for和泛型for。</p><p>​ 数字型for遵循下面的语法结构：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> var</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">exp1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">exp2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">exp3</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">	&lt;something&gt;</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的循环会将var变量初始设置为exp1，按照exp3的值步进并执行<code>&lt;something&gt;</code>中的代码内容，直到var的值大于exp2时结束。第三个表达式是可选的，如果没有，Lua会默认使用1作为步进值。下面是该循环使用的典型例子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span><span style="color:#56B6C2;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, -</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> do</span><span style="color:#56B6C2;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果想让循环没有上线，可以使用常熟math.huge：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">math.huge</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0.3</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">*</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> - </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;"> &gt;= </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">		print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		break</span></span>
<span class="line"><span style="color:#C678DD;">	end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>​ 为了合理使用for循环，有几点题需要注意：第一，在循环开始之前，exp1、exp2、exp3这三个表达式只会进行一次估值。比如，在第一个实例中，f(x)只会执行一次（之后的循环，f(x)将使用第一次计算的结果，而不会重新计算）；第二，控制变量是for语句自动声明的局部变量，它只在循环体中可见。一个典型的错误是在循环结束后继续使用这个变量：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#C678DD;"> do</span><span style="color:#56B6C2;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#E06C75;">max</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">i</span><span style="color:#7F848E;font-style:italic;"> -- 这个i跟循环体中的i不一样，此处的i是全局变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果需要在循环结束之后继续使用控制变量（通常在中断循环之后），那就必须要把它保存到另一个变量中：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">-- 从表中查找变量</span></span>
<span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> found</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">nil</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, #</span><span style="color:#E06C75;">a</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] &lt; </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#E06C75;">        found</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">i</span><span style="color:#7F848E;font-style:italic;"> -- 保存&#39;i&#39;的值</span></span>
<span class="line"><span style="color:#C678DD;">        break</span></span>
<span class="line"><span style="color:#C678DD;">	end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">found</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>第三，一定不要手动修改控制变量的值：这要做的后果是不可预知的。如果需要非正常终止for循环，只需要使用break语句（就像前面的那个例子中那样）。</p><h3 id="泛型for" tabindex="-1">泛型for <a class="header-anchor" href="#泛型for" aria-label="Permalink to &quot;泛型for&quot;">​</a></h3><p>​ 泛型for使用迭代函数来遍历所有值</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">-- 打印表 &#39;t&#39;的所有值</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> pairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span><span style="color:#56B6C2;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 上面的例子中使用了pairs来作为遍历表格的迭代函数，它是在Lua基本库中定义的。循环的每一步，k被赋值为一个键名，同时v被赋值为对应该键名的键值。</p><p>​ 除了这种简单的实例，泛型for还有更强大的用法。通过使用恰当的迭代器，几乎可以遍历任何以可读形式保存的数据。标准库中提供了多个迭代器，可以通过使用它们来遍历一个文件的所有行（io.lines）、表的键对（pairs）、序列的条目（ipairs）、字符串中的字符（string.gmatch）等等。</p><p>​ 当然，也可以实现自己的迭代器。虽然使用泛型for很容易，但设计对应的迭代函数却有很多玄机。因此，第七节将单独讨论这个话题。</p><p>​ 泛型循环跟数字型循环有两个共同之处：循环变量是只对循环体可见的局部变量；永远不要对它们进行赋值。</p><p>​ 看一个更加具体的使用泛型for的例子，假设有一个包含一周七天名称的表：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">days</span><span style="color:#ABB2BF;"> = {</span><span style="color:#98C379;">&quot;Sunday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Monday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Tuesday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Wednesday&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;Thursday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Friday&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Saturday&quot;</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 现在想根据某一天的名称得到它在这一周中的位置。虽然可以通过搜索获取到想要的结果，但以后大家就会知道，“搜索”在Lua中是极少使用的。一个更有效的解决方案是构造一个键名和键值对调的“逆转表”，比如叫revDays，它使用名字作为索引，使用数字作为值。这个表格看起来可能是下面的样子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">revDays</span><span style="color:#ABB2BF;"> = {[</span><span style="color:#98C379;">&quot;Sunday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;Monday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;Tuesday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;Wednesday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;Thursday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;Friday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;Saturday&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在，想要查找某一天对应在一周中的位置，只需要对这个“逆转表”进行索引：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;Tuesday&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">revDays</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当然，不需要对这个“逆转表”进行完全的初始化声明，而是可以利用既有的正常表，自动生成它：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">revDays</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> in</span><span style="color:#56B6C2;"> pairs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">days</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#E06C75;">	revDays</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">k</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的循环通过变量k对应的键名（1,2，...）和变量v对应的键值（“Sunday”、“Monday”，...）将一周中的每一天都重新赋值。</p><h2 id="_4-4-break-return和goto" tabindex="-1">4.4 break，return和goto <a class="header-anchor" href="#_4-4-break-return和goto" aria-label="Permalink to &quot;4.4 break，return和goto&quot;">​</a></h2><p>​ break和return语句允许从一个块中跳出。goto语句允许跳到函数中的几乎任意位置。</p><p>​ 可以使用break结束循环，这个语句可以中断包含它的最近的（比如多个循环嵌套）循环</p><p>（for，repeat和while）；不可以在循环外使用break。循环中断后，程序从距离被中断的循环结构最近的位置继续执行。</p><p>​ return语句用于返回一个函数不常出现的结果，或者仅仅用于函数返回。任何函数的结尾都有一个隐含的return，因此，如果函数不需要返回任何值，那么如果它可以自然结束，就不需要再写一个return了。</p><p>​ 因为语法上的原因，如果要使用return，它就必须作为块中的最后一条语句。换句话说，return只能是程序块中的最后一条语句，或者紧接end、else或者until。比如下面的例子中，return就是then块中的</p><p>最后一条语句：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">local</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] == </span><span style="color:#E06C75;">v</span><span style="color:#C678DD;"> then</span><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;"> end</span></span>
<span class="line"><span style="color:#E06C75;">    i</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通常情况下，因为return后面的语句都不可达，上面提到可以用return的地方是满足需求的。但有时候，需要在一个块的中间插入return避免后面代码的运行来进行调试，这种情况下，可以使用do-end块把return语句包含起来：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;"> ()</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#7F848E;font-style:italic;"> --&lt;&lt; 语法错误</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">other</span><span style="color:#E06C75;"> statements</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;"> ()</span></span>
<span class="line"><span style="color:#C678DD;">    do</span><span style="color:#C678DD;"> return</span><span style="color:#C678DD;"> end</span><span style="color:#7F848E;font-style:italic;"> -- 语法正确，因为return是do-end块中的最后一条语句</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">other</span><span style="color:#E06C75;"> statements</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ goto语句可以跳出程序执行到指定标签中。关于goto的使用经历了漫长的讨论，知道现在都有人坚持认为goto语句对于编程有害，应当从编程语言中被移除。尽管如此，流行的几种语言都提供了goto语法，因为它们都能找到使用goto的很好的理由。goto是一个强大的机制，小心并合理使用不仅无害，而且可以大大提高代码的质量。</p><p>​ Lua中goto语句的语法十分常规：预留字goto后面紧跟符合标识符标准的任意标签名。但定义标签的语法有点让人费解：使用两对冒号（::）将标签名包起来，就像::name::这样。其实这种啰嗦的做法是故意的，目的是让程序员在使用goto之前能够三思。</p><p>​ Lua对允许使用goto的地方做了一些限制。首先，便签遵从通常定义的可视化规则，因此无法跳入一个块（因为块中的标签在块外是不可见的）；其次，无法跳出函数（注意，第一条限制已经杜绝了跳入函数的可能性）；最后，goto不可以跳入局部变量的作用域。</p><p>​ 一个典型并且合理使用goto的情景是利用goto模拟其它语言中具备而在Lua中被抛弃的结构用法，比如continue、多级break、多级continue、redo、局部异常处理，等等。continue语句其实仅仅就是goto跳入块尾定义的标签；redo语句则是跳到块起始定义的标签：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> 某种_条件 </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">    ::</span><span style="color:#98C379;">redo</span><span style="color:#C678DD;">::</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> 分支条件_1 </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> continue</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> 分支条件_2 </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> redo</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;其它代码&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    ::</span><span style="color:#98C379;">continue</span><span style="color:#C678DD;">::</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>​ 需要注意的是，Lua的规则中对于局部变量作用域的定义有一个有意思的细节：局部变量的作用域从块中定义这个变量的位置开始，直到块最后一个“非空语句”止。而标签恰恰属于“空语句”。为了理解这个细节的意思，可以看一下下面两个例子（译者注：第二个例子及内容是译者个人添加）：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> 某种_条件 </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> 分支条件 </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> continue</span><span style="color:#C678DD;"> end</span><span style="color:#7F848E;font-style:italic;"> -----此处的goto正常</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> var</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">something</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;其它代码&gt; </span><span style="color:#7F848E;font-style:italic;">-----var作用域结束的地方</span></span>
<span class="line"><span style="color:#C678DD;">    ::</span><span style="color:#98C379;">continue</span><span style="color:#C678DD;">::</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> 某种_条件 </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> 分支条件 </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> continue</span><span style="color:#C678DD;"> end</span><span style="color:#7F848E;font-style:italic;"> -----此处的goto有语法错误</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> var</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">something</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;其它代码&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    ::</span><span style="color:#98C379;">continue</span><span style="color:#C678DD;">::</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">var</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-----var作用域结束的地方</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>​ 在第一个例子中，可能大家会认为goto语句跳入了局部变量var的作用域。其实，continue标签作为“空语句”，位于块中所有“非空语句”之后，此时，它已经不在局部变量var的作用域中，goto自然没有问题；而对于第二种情况，continue标签之后还有“非空语句”print，这导致print成为了块中最后一条“非空语句”并成为var作用域的结束之处，这导致continue标签被包含在了局部变量var的作用域中，导致goto语句出现语法错误。</p><p>goto语句在编写状态机的时候十分有用。下面的代码展示如何用0作为状态切换的标志在两个块中进行切换。当然，在处理具体的问题时可以进行更好的优化，但这是在Lua中引入有限自动机进行自动编码的极佳思路（考虑一下动态代码生成）。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">::</span><span style="color:#98C379;">s1</span><span style="color:#C678DD;">::</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&#39;0&#39; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> s2</span></span>
<span class="line"><span style="color:#C678DD;">    elseif</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">nil</span><span style="color:#C678DD;"> then</span><span style="color:#56B6C2;"> print</span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> s1</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">::</span><span style="color:#98C379;">s2</span><span style="color:#C678DD;">::</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&#39;0&#39; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> s1</span></span>
<span class="line"><span style="color:#C678DD;">    elseif</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">nil</span><span style="color:#C678DD;"> then</span><span style="color:#56B6C2;"> print</span><span style="color:#98C379;">&#39;not ok&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> s2</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">goto</span><span style="color:#98C379;"> s1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>​ 再举一个例子，假设要做一个简单的迷宫游戏：迷宫有几个房间，每个房间最多有四个门——东、南、西、北。每一步，玩家输入一个移动方向，如果这个方向有门，玩家可以进入对应的下一个房间；否则，打印警告。游戏的目标就是从最初的房间进入最后的房间。</p><p>​ 这个游戏是一个典型的状态机，当前的房间就是状态。可以把迷宫的每个房间都实现成一个程序块，使用goto在房间之间切换。下面的代码就演示了如何写一个有四个房间的小迷宫。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">goto</span><span style="color:#98C379;"> room1</span><span style="color:#7F848E;font-style:italic;"> -- 初始化房间</span></span>
<span class="line"><span style="color:#C678DD;">::</span><span style="color:#98C379;">room1</span><span style="color:#C678DD;">::</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;south&quot; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> room3</span></span>
<span class="line"><span style="color:#C678DD;">    elseif</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;east&quot; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> room2</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#56B6C2;">        print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;invalid move&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        goto</span><span style="color:#98C379;"> room1</span><span style="color:#7F848E;font-style:italic;"> -- stay in the same room</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">::</span><span style="color:#98C379;">room2</span><span style="color:#C678DD;">::</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;south&quot; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> room4</span></span>
<span class="line"><span style="color:#C678DD;">    elseif</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;west&quot; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> room1</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#56B6C2;">        print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;invalid move&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        goto</span><span style="color:#98C379;"> room2</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">::</span><span style="color:#98C379;">room3</span><span style="color:#C678DD;">::</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#C678DD;">    local</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;north&quot; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> room1</span></span>
<span class="line"><span style="color:#C678DD;">    elseif</span><span style="color:#E06C75;"> move</span><span style="color:#ABB2BF;"> == </span><span style="color:#98C379;">&quot;east&quot; </span><span style="color:#C678DD;">then</span><span style="color:#C678DD;"> goto</span><span style="color:#98C379;"> room4</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#56B6C2;">        print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;invalid move&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        goto</span><span style="color:#98C379;"> room3</span></span>
<span class="line"><span style="color:#C678DD;">    end</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">::</span><span style="color:#98C379;">room4</span><span style="color:#C678DD;">::</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Congratulations, you won!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getlabel</span><span style="color:#ABB2BF;"> ()</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">goto</span><span style="color:#98C379;"> L1</span><span style="color:#C678DD;"> end</span></span>
<span class="line"><span style="color:#C678DD;">    ::</span><span style="color:#98C379;">L1</span><span style="color:#C678DD;">::</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>​ 对于这个这个简单的例子，一个更好的设计是基于数据驱动编程，即使用表来表示房间和移动。但无论怎样，游戏中的每个房间都有几个特定的状态，因此“状态机”设计是十分符合需求的。</p>`,99),e=[o];function r(c,t,i,y,B,u){return a(),n("div",null,e)}const d=s(p,[["render",r]]);export{C as __pageData,d as default};
