import{_ as n,c as s,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const m=JSON.parse('{"title":"如何写出别人无法维护的代码","description":"","frontmatter":{},"headers":[],"relativePath":"Document/如何写出别人无法维护的代码.md","filePath":"Document/如何写出别人无法维护的代码.md","lastUpdated":1717759497000}'),r={name:"Document/如何写出别人无法维护的代码.md"},i=l(`<h1 id="如何写出别人无法维护的代码" tabindex="-1">如何写出别人无法维护的代码 <a class="header-anchor" href="#如何写出别人无法维护的代码" aria-label="Permalink to &quot;如何写出别人无法维护的代码&quot;">​</a></h1><p>对，你没看错，本文就是教你怎么写出让同事无法维护的代码，保证不会被打死。能写出这种“烂代码”的人，的确也不失一种人才啊！！！俗话说的好“走自己的路让别人无路可走”。</p><h4 id="_01-程序命名" tabindex="-1">01 程序命名 <a class="header-anchor" href="#_01-程序命名" aria-label="Permalink to &quot;01 程序命名&quot;">​</a></h4><ul><li><strong>容易输入的名字</strong>，比如：Fred，asdf</li><li><strong>单字母的变量名</strong>，比如：a,b,c, x,y,z（译者注：如果不够用，可以考虑 a1,a2,a3,a4,….）</li><li><strong>有创意地拼写错误</strong>，比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。</li><li><strong>抽象</strong>，比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。</li><li><strong>缩写</strong>，比如：WTF，RTFSC …… （译者注：使用拼音缩写也同样给力，比如：BT，TMD，TJJTDS）</li><li><strong>随机大写字母</strong>，比如：gEtnuMbER..</li><li><strong>重用命名</strong>，在内嵌的语句块中使用相同的变量名有奇效。</li><li><strong>使用重音字母</strong>，比如：int ínt（注：第二个 ínt 不是 int）</li><li><strong>使用下划线</strong>，比如：<code>_</code>, <code>**</code>, <code>_**</code>。</li><li><strong>使用不同的语言</strong>，比如混用英语，德语，或是中文拼音。</li><li><strong>使用字符命名</strong>，比如：slash, asterix, comma…</li><li><strong>使用无关的单词</strong>，比如：god, superman, iloveu….</li><li><strong>混淆 l 和 1</strong>，字母 l 和数字 1 有时候是看不出来的。</li></ul><h4 id="_02-伪装欺诈" tabindex="-1"><strong>02 伪装欺诈</strong> <a class="header-anchor" href="#_02-伪装欺诈" aria-label="Permalink to &quot;**02 伪装欺诈**&quot;">​</a></h4><ul><li><strong>把注释和代码交织在一起</strong>，</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>for(j=0; j&lt;array_len; j+ =8)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    total += array[j+0 ];</span></span>
<span class="line"><span>    total += array[j+1 ];</span></span>
<span class="line"><span>    total += array[j+2 ]; /* Main body of</span></span>
<span class="line"><span>    total += array[j+3]; * loop is unrolled</span></span>
<span class="line"><span>    total += array[j+4]; * for greater speed.</span></span>
<span class="line"><span>    total += array[j+5]; */</span></span>
<span class="line"><span>    total += array[j+6 ];</span></span>
<span class="line"><span>    total += array[j+7 ];</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><strong>隐藏宏定义</strong>，如：#define a=b a=0-b，当人们看到 a=b 时，谁也想不到那是一个宏。</li><li><strong>换行</strong>，如下所示，下面的示例使用搜索 xy_z 变得困难。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#define local_var xy\\</span></span>
<span class="line"><span>_z // local_var OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>代码和显示不一致</strong>，比如，你的界面显示叫 postal code，但是代码里确叫 zipcode.</li><li><strong>隐藏全局变量</strong>，把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</li><li><strong>使用同意词</strong>，如：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#define xxx global_var // in file std.h&amp;nbsp;</span></span>
<span class="line"><span>#define xy_z xxx // in file ..\\other\\substd.h&amp;nbsp;</span></span>
<span class="line"><span>#define local_var xy_z // in file ..\\codestd\\inst.h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p><strong>使用相似的变量名</strong>，如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</p></li><li><p><strong>重载函数</strong>，使用相同的函数名，但是其功能和具体实现完全没有关系。</p></li><li><p><strong>操作符重载</strong>，重载操作符可以让你的代码变得诡异，感谢 CCTV，感谢 C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</p></li><li><p><strong>#define</strong>，看过本站那些混乱代码的文章，你都会知道宏定义和预编译对于写出不可读的代码的重大意义。不过，一个具有想像力的东西是——在头文件中使用预编译来查看这个头文件被 include 了几次，而被 include 不同的次数时，其中的函数定义完全不一样。</p></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>#ifndef DONE</span></span>
<span class="line"><span>#ifdef TWICE</span></span>
<span class="line"><span>// put stuff here to declare 3rd time around</span></span>
<span class="line"><span>void g(char* str);</span></span>
<span class="line"><span>#define DONE</span></span>
<span class="line"><span>#else // TWICE</span></span>
<span class="line"><span>#ifdef ONCE</span></span>
<span class="line"><span>// put stuff here to declare 2nd time around&lt;</span></span>
<span class="line"><span>void g(void* str);</span></span>
<span class="line"><span>#define TWICE</span></span>
<span class="line"><span>#else // ONCE</span></span>
<span class="line"><span>// put stuff here to declare 1st time around</span></span>
<span class="line"><span>void g(std::string str);</span></span>
<span class="line"><span>#define ONCE</span></span>
<span class="line"><span>#endif // ONCE</span></span>
<span class="line"><span>#endif // TWICE</span></span>
<span class="line"><span>#endif // DONE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>03 文档和注释</strong></p><ul><li><strong>在注释中撒谎</strong>，你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</li><li><strong>注释明显的东西</strong>，比如：/_ add 1 to i _/。</li><li><strong>只注释是什么，而不是为什么</strong>，</li><li><strong>不要注释秘密</strong>，如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改 25 个以上的位置的程序。千万别把这个事写在文档中。</li><li><strong>注重细节</strong>，当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有 100 页不能罢休，段落要有 5 级以上，段落编号要有 500 个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13()</li><li><strong>千万不要注释度衡单位</strong>，比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是 MB 还是 KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</li><li><strong>Gotchas</strong>，陷阱，千万不要注释代码中的陷阱。</li><li><strong>在注释和文档中发泄不满</strong>，</li></ul><h4 id="_04-程序设计" tabindex="-1"><strong>04 程序设计</strong> <a class="header-anchor" href="#_04-程序设计" aria-label="Permalink to &quot;**04 程序设计**&quot;">​</a></h4><ul><li><p><strong>Java Casts</strong>，Java 的类型转型是天赐之物。每一次当你从 Collection 里取到一个 object 的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在 N 多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</p></li><li><p><strong>利用 Java 的冗余</strong>，比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。</p></li><li><p><strong>从不验证</strong>，从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员。</p></li><li><p><strong>不要封装</strong>，调用者需要知道被调用的所有的细节。</p></li><li><p><strong>克隆和拷贝</strong>，为了效率，你要学会使用 copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。（译者注：Copy + Paste 出来的代码 bug 多得不能再多）</p></li><li><p><strong>巨大的 listener</strong>，写一个 listener，然后让你的所有的 button 类都使用这个 listener，这样你可以在这个 listener 中整出一大堆 if…else…语句，相当的刺激。</p></li><li><p><strong>使用三维数组</strong>，如果你觉得三维还不足够，你可以试试四维。</p></li><li><p><strong>混用</strong>，同时使用类的 get/set 方法和直接访问那个 public 变量。这样做的好处是可以极大的挫败维护人员。</p></li><li><p><strong>包装，包装，包装</strong>，把你所有的 API 都包装上 6 到 8 遍，包装深度多达 4 层以上。然后包装出相似的功能。</p></li><li><p><strong>没有秘密</strong>，把所有的成员都声明成 public 的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</p></li><li><p><strong>排列和阻碍</strong>，把 drawRectangle(height, width) 改成 drawRectangle(width, height)，等 release 了几个版本后，再把其改回去。这样维护程序的程序员们将不能很快地明白哪一个是对的。</p></li><li><p><strong>把变量改在名字上</strong>，例如，把 setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。</p></li><li><p><strong>Packratting</strong>，保留你所有的没有使用的和陈旧的变量，方法和代码。</p></li><li><p><strong>That&#39;s Final</strong>，Final 你所有的子结点的类，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String 不也是这样吗？</p></li><li><p><strong>避免使用接口</strong>，在 java 中，BS 接口，在 C++中 BS 使用虚函数。</p></li><li><p><strong>避免使用 layout</strong>，这样就使得我们只能使用绝对坐标。如果你的老大强制你使用 layout，你可以考虑使用 GridBagLayout，然后把 grid 坐标 hard code.</p></li><li><p><strong>环境变量</strong>，如果你的代码需要使用环境变量。(getenv() – C++ / System.getProperty() – Java )，那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</p></li><li><p><strong>使用 Magic number</strong>，</p></li><li><p><strong>使用全局变量</strong>，</p><p>1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。</p><p>2）使用全局变量可以让你的函数的参数变得少一些。</p></li><li><p><strong>配置文件</strong>，配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。</p></li><li><p><strong>膨胀你的类</strong>，让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</p></li><li><p><strong>使用子类</strong>，面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写 10 个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</p></li></ul><h4 id="_05-混乱你的代码" tabindex="-1"><strong>05 混乱你的代码</strong> <a class="header-anchor" href="#_05-混乱你的代码" aria-label="Permalink to &quot;**05 混乱你的代码**&quot;">​</a></h4><ul><li><strong>使用 XML</strong>，XML 的强大是无人能及的。使用 XML 你可以把本来只要 10 行的代码变成 100 行。而且，还要逼着别人也有 XML。（参看，信 XML 得永生，信 XML 得自信）</li><li><strong>混乱 C 代码</strong>，</li><li><strong>使用不同的进制</strong>，比如：10 和 010 不是一样的。再比如：<code>array = new int[]{ 111, 120, 013, 121,};</code></li><li><strong>尽量使用 void*</strong>，然后把其转成各种类型。</li><li><strong>使用隐式的转型</strong>，C++的构造函数可以让你神不知鬼不觉得完成转型。</li><li><strong>分解条件表达式</strong>，如：把 a==100 分解成，a&gt;99 &amp;&amp; a&lt;101</li><li><strong>学会利用分号</strong>，如：<code>if ( a );else;{ int d; d = c;}</code></li><li><strong>间接转型</strong>，如：把 double 转 string，写成 <code>new Double(d).toString()</code> 而不是 <code>Double.toString(d)</code></li><li><strong>大量使用嵌套</strong>，一个 NB 的程序员可以在一行代码上使用超过 10 层的小括号（），或是在一个函数里使用超过 20 层的语句嵌套{}，把嵌套的 if else 转成 [? :] 也是一件很 NB 的事。</li><li><strong>使用 C 的变种数组</strong>，myArray[i] 可以变成*(myArray + i) 也可以变成 *(i + myArray) 其等价于 i[myArray]。再看一个函数调用的示例，函数声明：int myfunc(int q, int p) { return p%q; } 函数调用 myfunc(6291, 8)[Array];</li><li><strong>长代码行</strong>，一行的代码越长越好。这样别人阅读时就需要来来回回的</li><li><strong>不要较早的 return</strong>，不要使用 goto，不要使用 break，这样，你就需要至少 5 层以上的 if-else 来处理错误。</li><li><strong>不要使用{}</strong>，不要在 if else 使用{}，尤其是在你重量地使用 if-else 嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</li><li><strong>使用宏定义</strong>，宏定义绝对是混乱 C/C++代码的最佳利器。参看 老手是这样教新手编程的。</li><li><strong>琐碎的封装</strong>，比较封装一个 bool 类，类里面什么都做，就是一个 bool.</li><li><strong>循环</strong>，千万不可用 for(int i=0; i&lt;n; i++)使用 while 代替 for，交换 n 和 i，把&lt;改成&lt;=，使用 i–调整步伐 。</li></ul><h4 id="_06-测试" tabindex="-1"><strong>06 测试</strong> <a class="header-anchor" href="#_06-测试" aria-label="Permalink to &quot;**06 测试**&quot;">​</a></h4><ul><li><strong>从不测试</strong>，千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</li><li><strong>永远不做性能测试</strong>，如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</li><li><strong>不要写测试案例</strong>，不要做什么代码覆盖率测试，自动化测试。</li><li><strong>测试是懦夫行为</strong>，一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</li></ul><h4 id="_07-其它" tabindex="-1"><strong>07 其它</strong> <a class="header-anchor" href="#_07-其它" aria-label="Permalink to &quot;**07 其它**&quot;">​</a></h4><ul><li><strong>你的老板什么都知道</strong>，无论你的老板有多 SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识如何写出无法维护的代码来的。</li><li><strong>颠覆 Help Desk</strong>，你要确保你那满是 bug 的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</li><li><strong>闭嘴</strong>，对于一些像 y2k 这样的大 bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个 bug 挣钱了。</li><li><strong>忽悠</strong>，你会学会忽悠，就算你的代码写得很烂，你也要为其挂上 GoF 设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，只有学会像中国 Thoughtworks 的咨询师那样去忽悠，你才能学会更炫更酷的方法，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</li></ul><p>最后建议大家少做被打的事，多做好事。</p>`,24),e=[i];function t(o,p,g,c,d,u){return a(),s("div",null,e)}const _=n(r,[["render",t]]);export{m as __pageData,_ as default};
