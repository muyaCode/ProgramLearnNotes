import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.zGi9i9Bf.js";const o="/ProgramLearnNotes/assets/image-20240511174208288.FaLiisIL.png",l="/ProgramLearnNotes/assets/image-20240511174336355.BKmTw2WK.png",p="/ProgramLearnNotes/assets/image-20240511174406877.CkAozVPZ.png",r="/ProgramLearnNotes/assets/image-20240511174436346.DxuWQ9ei.png",t="/ProgramLearnNotes/assets/image-20240511174453381.YHO6KWM7.png",c="/ProgramLearnNotes/assets/image-20240511174513853.CcStyYfJ.png",i="/ProgramLearnNotes/assets/image-20240511174540089.DyMQ7qtH.png",d="/ProgramLearnNotes/assets/image-20240511174559478.Bfb9F9Ms.png",u="/ProgramLearnNotes/assets/image-20240511174617512.DZaL5WAQ.png",b="/ProgramLearnNotes/assets/image-20240511174634861.CgRBKZht.png",y="/ProgramLearnNotes/assets/image-20240511174701398.BVydwuPG.png",m="/ProgramLearnNotes/assets/640-19498.CwB6igJE.webp",h="/ProgramLearnNotes/assets/640-1715766098576-181.DWGJhdiG.webp",C="/ProgramLearnNotes/assets/640-1715766098576-182.pvLdbhft.webp",f=JSON.parse('{"title":"Docker 自建云手机","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker/Docker应用/Docker自建云手机.md","filePath":"Document/Docker/Docker应用/Docker自建云手机.md","lastUpdated":1715766493000}'),g={name:"Document/Docker/Docker应用/Docker自建云手机.md"},k=e('<h1 id="docker-自建云手机" tabindex="-1">Docker 自建云手机 <a class="header-anchor" href="#docker-自建云手机" aria-label="Permalink to &quot;Docker 自建云手机&quot;">​</a></h1><p><strong>Ubuntu 系统 Docker 本地部署 Android 模拟器并实现远程访问</strong></p><p>本文主要介绍如何在 Ubuntu 系统使用 Docker 部署 docker-android 安卓模拟器，并结合 cpolar 内网穿透工具实现公网远程访问本地部署的 Android 开发环境。</p><p>随着移动互联网的飞速发展，Android 应用开发日益成为业界关注的焦点。在开发过程中，对 Android 应用的测试和部署至关重要，这关系到应用能否在各种设备和环境下稳定运行。然而，传统的 Android 开发和测试环境搭建过程繁琐，且不易于管理和维护。为了解决这一问题，Docker-Android 应运而生，它将完整的 Android 开发环境封装在 Docker 容器中，大大简化了开发和部署流程。</p><p>Docker-Android 通过容器化技术，使得开发者可以在本地或远程服务器上轻松构建和运行 Android 模拟器。这种轻量级的部署方式不仅降低了资源占用，还提高了开发和测试的效率。更重要的是，Docker-Android 提供了灵活的配置选项，可以根据项目需求进行定制化设置，满足不同的开发和测试需求。</p><p>然而，对于需要远程访问 Android 开发环境的开发者来说，仅仅依靠 Docker-Android 还不足以实现这一目标。此时，我们需要借助 cpolar 这样的内网穿透工具，将本地的 Docker-Android 环境暴露到公网上，实现远程访问。cpolar 通过在本地和公网之间建立安全的隧道连接，使得远程用户可以通过公网地址访问到本地的 Docker-Android 环境。</p><p>结合 Docker-Android 和 cpolar，我们可以实现一个高效、灵活且安全的远程 Android 开发环境。这不仅方便了开发者的远程协作和项目管理，还提高了开发和测试的效率。本文旨在介绍如何使用 Docker-Android 和 cpolar 在本地部署并实现远程访问 Android 开发环境，为开发者提供一个更加便捷和高效的解决方案。</p><p>根据官方说法，尽量采用 ubuntu 系统进行安装，采用 Docker 部署，首先设备需要提前安装好 Docker，如没有安装，可以参考 Docker 官方教程进行安装</p><h2 id="项目地址" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><blockquote><p><a href="https://github.com/budtmo/docker-android" target="_blank" rel="noreferrer">https://github.com/budtmo/docker-android</a></p></blockquote><h3 id="注意事项" tabindex="-1">注意事项: <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项:&quot;">​</a></h3><p>x86 架构，部分软件不能运行</p><h2 id="_1-虚拟化环境检查" tabindex="-1">1. 虚拟化环境检查 <a class="header-anchor" href="#_1-虚拟化环境检查" aria-label="Permalink to &quot;1. 虚拟化环境检查&quot;">​</a></h2><p>执行下面命令安装检查工具</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> apt</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cpu-checker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后执行下面命令检查是否支持虚拟化</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">kvm-ok</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>提示下面信息表示正常支持虚拟化环境，如果不是出现如下信息，需要检查设备开启虚拟化支持，然后再进行下面进行 android 模拟器部署</p><p><img src="'+o+'" alt="image-20240511174208288"></p><h2 id="_2-android-模拟器部署" tabindex="-1">2. Android 模拟器部署 <a class="header-anchor" href="#_2-android-模拟器部署" aria-label="Permalink to &quot;2. Android 模拟器部署&quot;">​</a></h2><p>本文采用 docker 方式部署，首先拉取一个镜像，官方提供很多种安卓版本，具体可以访问 Github 查看：<a href="https://github.com/budtmo/docker-android%EF%BC%8C%E7%90%86%E8%AE%BA%E4%B8%8A%E7%89%88%E6%9C%AC%E8%B6%8A%E9%AB%98%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BC%80%E9%94%80%E4%BC%9A%E8%B6%8A%E5%A4%A7%EF%BC%8C%E6%89%80%E4%BB%A5%E6%9C%AC%E4%BE%8B%E4%BB%A5%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84android" target="_blank" rel="noreferrer">https://github.com/budtmo/docker-android，理论上版本越高运行的开销会越大，所以本例以运行一个低版本的android</a> 来演示，执行下面命令拉取一个 android 9.0 版本镜像。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> docker</span><span style="color:#98C379;"> pull</span><span style="color:#98C379;"> budtmo/docker-android:emulator_9.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>拉取后开始运行容器，下面命令指运行一台 Samsung Galaxy S7 的安卓设备，其他机型可以去看一下官方教程，对外访问端口是<code>6080</code></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 6080:6080</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> EMULATOR_DEVICE=&quot;Samsung Galaxy S7&quot;</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> WEB_VNC=</span><span style="color:#D19A66;">true</span><span style="color:#D19A66;"> --device</span><span style="color:#98C379;"> /dev/kvm</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> android-container</span><span style="color:#98C379;"> budtmo/docker-android:emulator_9.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行后，输入 sudo docker ps 可以看到运行的容器，UP 状态表示正常</p><p>运行后，在浏览器访问 Linux ubuntu 6080 端口，即可成功看到 android 模拟器界面，首次启动可能会比较慢，如果觉得卡，可以部署更低的机型，如 S6，本地测试访问成功后，下面我们安装 cpolar 内网穿透，实现远程访问</p><p><img src="'+l+`" alt="image-20240511174336355"></p><h2 id="_3-ubuntu-安装-cpolar" tabindex="-1">3. Ubuntu 安装 Cpolar <a class="header-anchor" href="#_3-ubuntu-安装-cpolar" aria-label="Permalink to &quot;3. Ubuntu 安装 Cpolar&quot;">​</a></h2><p>上面在本地 Docker 中成功部署了 Android 模拟器，并局域网访问成功，下面我们在 Linux 安装 Cpolar 内网穿透工具，通过 Cpolar 转发本地端口映射的 http 公网地址，我们可以很容易实现远程访问，而无需自己注册域名购买云服务器.下面是安装 cpolar 步骤</p><blockquote><p>cpolar 官网地址: <a href="https://www.cpolar.com" target="_blank" rel="noreferrer">https://www.cpolar.com</a></p></blockquote><ul><li>使用一键脚本安装命令</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#D19A66;"> -L</span><span style="color:#98C379;"> https://www.cpolar.com/static/downloads/install-release-cpolar.sh</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>安装完成后，可以通过如下方式来操作 cpolar 服务，首先执行加入系统服务设置开机启动，然后再启动服务</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 加入系统服务设置开机启动</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> systemctl</span><span style="color:#98C379;"> enable</span><span style="color:#98C379;"> cpolar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 启动cpolar服务</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> systemctl</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> cpolar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 重启cpolar服务</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> systemctl</span><span style="color:#98C379;"> restart</span><span style="color:#98C379;"> cpolar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看cpolar服务状态</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> systemctl</span><span style="color:#98C379;"> status</span><span style="color:#98C379;"> cpolar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 停止cpolar服务</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> systemctl</span><span style="color:#98C379;"> stop</span><span style="color:#98C379;"> cpolar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Cpolar 安装和成功启动服务后，内部或外部浏览器上通过局域网 IP 加 9200 端口即:【<a href="http://192.168.xxx.xxx:9200" target="_blank" rel="noreferrer">http://192.168.xxx.xxx:9200</a>】访问Cpolar管理界面，使用Cpolar官网注册的账号登录，登录后即可看到cpolar web 配置界面，接下来在 web 界面配置即可</p><p><img src="`+p+'" alt="image-20240511174406877"></p><h2 id="_4-配置公网地址" tabindex="-1">4. 配置公网地址 <a class="header-anchor" href="#_4-配置公网地址" aria-label="Permalink to &quot;4. 配置公网地址&quot;">​</a></h2><p>点击左侧仪表盘的隧道管理——创建隧道，创建一个 android 模拟器的公网 http 地址隧道!</p><ul><li>隧道名称：可自定义命名，注意不要与已有的隧道名称重复</li><li>协议：选择 http</li><li>本地地址：6080(docker 部署后对外访问的端口)</li><li>域名类型：免费选择随机域名</li><li>地区：选择 China vip</li></ul><p>点击<code>创建</code></p><p><img src="'+r+'" alt="image-20240511174436346"></p><p>隧道创建成功后，点击左侧的状态——在线隧道列表，查看所生成的公网访问地址，有两种访问方式，一种是 http 和 https，两种都可以访问，下面选择其中一种进行远程访问</p><p><img src="'+t+'" alt="image-20240511174453381"></p><h2 id="_5-远程访问" tabindex="-1">5. 远程访问 <a class="header-anchor" href="#_5-远程访问" aria-label="Permalink to &quot;5. 远程访问&quot;">​</a></h2><p>使用上面 Cpolar 生成的 https 公网地址，在任意设备的浏览器进行访问，即可成功看到我们 Android 模拟器，简单几步即可实现无需云服务器，无需公网 IP 实现远程访问.</p><p><img src="'+c+'" alt="image-20240511174513853"></p><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h4><p>为了更好地演示，我们在前述过程中使用了 cpolar 生成的隧道，其公网地址是随机生成的。</p><p>这种随机地址的优势在于建立速度快，可以立即使用。然而，它的缺点是网址由随机字符生成，不太容易记忆（例如：3ad5da5.r10.cpolar.top）。另外，这个地址在 24 小时内会发生随机变化，更适合于临时使用。</p><p>我一般会使用固定二级子域名，原因是我希望将网址发送给同事或客户时，它是一个固定、易记的公网地址（例如：android.cpolar.cn），这样更显正式，便于流交协作。</p><h2 id="_6-固定-cpolar-公网地址" tabindex="-1">6. 固定 Cpolar 公网地址 <a class="header-anchor" href="#_6-固定-cpolar-公网地址" aria-label="Permalink to &quot;6. 固定 Cpolar 公网地址&quot;">​</a></h2><p>由于以上使用 cpolar 所创建的隧道使用的是随机公网地址，24 小时内会随机变化，不利于长期远程访问。因此我们可以为其配置二级子域名，该地址为固定地址，不会随机变化【ps：cpolar.cn 已备案】</p><blockquote><p>注意需要将 cpolar 套餐升级至基础套餐或以上，且每个套餐对应的带宽不一样。【cpolar.cn 已备案】</p></blockquote><p>登录 cpolar 官网，点击左侧的预留，选择保留二级子域名，设置一个二级子域名名称，点击保留，保留成功后复制保留的二级子域名名称</p><p><img src="'+i+'" alt="image-20240511174540089"></p><p>保留成功后复制保留成功的二级子域名的名称</p><p><img src="'+d+'" alt="image-20240511174559478"></p><p>返回登录 cpolar web UI 管理界面，点击左侧仪表盘的隧道管理——隧道列表，找到所要配置的隧道，点击右侧的编辑</p><p><img src="'+u+'" alt="image-20240511174617512"></p><p>修改隧道信息，将保留成功的二级子域名配置到隧道中</p><ul><li>域名类型：选择二级子域名</li><li>Sub Domain：填写保留成功的二级子域名</li></ul><p>点击<code>更新</code>(注意，点击一次更新即可，不需要重复提交)</p><p><img src="'+b+'" alt="image-20240511174634861"></p><p>更新完成后，打开在线隧道列表，此时可以看到公网地址已经发生变化，地址二级名称变成了我们自己设置的二级子域名名称</p><h2 id="_7-固定地址访问" tabindex="-1">7. 固定地址访问 <a class="header-anchor" href="#_7-固定地址访问" aria-label="Permalink to &quot;7. 固定地址访问&quot;">​</a></h2><p>最后，我们使用固定的公网 https 地址访问，可以看到同样访问成功，这样一个固定且永久不变的公网地址就设置好了，随时随地都可以远程访问本地 android 模拟器，无需公网 IP，无需云服务器</p><p><img src="'+y+`" alt="image-20240511174701398"></p><h2 id="docker-镜像列表" tabindex="-1">Docker 镜像列表 <a class="header-anchor" href="#docker-镜像列表" aria-label="Permalink to &quot;Docker 镜像列表&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Android</span><span style="color:#98C379;"> API</span><span style="color:#98C379;"> Image</span><span style="color:#98C379;"> with</span><span style="color:#98C379;"> latest</span><span style="color:#98C379;"> release</span><span style="color:#98C379;"> version</span><span style="color:#98C379;"> Image</span><span style="color:#98C379;"> with</span><span style="color:#98C379;"> specific</span><span style="color:#98C379;"> release</span><span style="color:#98C379;"> version</span></span>
<span class="line"><span style="color:#61AFEF;">9.0</span><span style="color:#D19A66;"> 28</span><span style="color:#98C379;"> budtmo/docker-android:emulator_9.0</span><span style="color:#98C379;"> budtmo/docker-android:emulator_9.0_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">10.0</span><span style="color:#D19A66;"> 29</span><span style="color:#98C379;"> budtmo/docker-android:emulator_10.0</span><span style="color:#98C379;"> budtmo/docker-android:emulator_10.0_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">11.0</span><span style="color:#D19A66;"> 30</span><span style="color:#98C379;"> budtmo/docker-android:emulator_11.0</span><span style="color:#98C379;"> budtmo/docker-android:emulator_11.0_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">12.0</span><span style="color:#D19A66;"> 32</span><span style="color:#98C379;"> budtmo/docker-android:emulator_12.0</span><span style="color:#98C379;"> budtmo/docker-android:emulator_12.0_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">13.0</span><span style="color:#D19A66;"> 33</span><span style="color:#98C379;"> budtmo/docker-android:emulator_13.0</span><span style="color:#98C379;"> budtmo/docker-android:emulator_13.0_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">14.0</span><span style="color:#D19A66;"> 34</span><span style="color:#98C379;"> budtmo/docker-android:emulator_14.0</span><span style="color:#98C379;"> budtmo/docker-android:emulator_14.0_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">-</span><span style="color:#98C379;"> -</span><span style="color:#98C379;"> budtmo/docker-android:genymotion</span><span style="color:#98C379;"> budtmo/docker-android:genymotion_</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">release_versio</span><span style="color:#ABB2BF;">n&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="支持的机型及安卓版本" tabindex="-1">支持的机型及安卓版本 <a class="header-anchor" href="#支持的机型及安卓版本" aria-label="Permalink to &quot;支持的机型及安卓版本&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Samsung</span><span style="color:#98C379;"> Galaxy</span><span style="color:#98C379;"> S10</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Samsung</span><span style="color:#98C379;"> Galaxy</span><span style="color:#98C379;"> S9</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Samsung</span><span style="color:#98C379;"> Galaxy</span><span style="color:#98C379;"> S8</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Samsung</span><span style="color:#98C379;"> Galaxy</span><span style="color:#98C379;"> S7</span><span style="color:#98C379;"> Edge</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Samsung</span><span style="color:#98C379;"> Galaxy</span><span style="color:#98C379;"> S7</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Samsung</span><span style="color:#98C379;"> Galaxy</span><span style="color:#98C379;"> S6</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Nexus</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Nexus</span><span style="color:#D19A66;"> 5</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Nexus</span><span style="color:#98C379;"> One</span></span>
<span class="line"><span style="color:#61AFEF;">Phone</span><span style="color:#98C379;"> Nexus</span><span style="color:#98C379;"> S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="首先要保证你的机器支持-kvm-虚拟化" tabindex="-1">首先要保证你的机器支持 KVM 虚拟化 <a class="header-anchor" href="#首先要保证你的机器支持-kvm-虚拟化" aria-label="Permalink to &quot;首先要保证你的机器支持 KVM 虚拟化&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建三星S10手机</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 6008:6008</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> EMULATOR_DEVICE=&quot;Samsung Galaxy S10&quot;</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> WEB_VNC=</span><span style="color:#D19A66;">true</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> WEB_VNC_PORT=</span><span style="color:#D19A66;">6008</span><span style="color:#D19A66;"> --device</span><span style="color:#98C379;"> /dev/kvm</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> android</span><span style="color:#98C379;"> budtmo/docker-android:emulator_11.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建三星S6手机</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> --privileged</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 6080:6080</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 5554:5554</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 5555:5555</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> DEVICE=&quot;Samsung Galaxy S6&quot;</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> android-container</span><span style="color:#98C379;"> budtmo/docker-android-x86-8.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>浏览器中访问你的<code>http://ip:6080</code>，稍后即可看到独属于你自己的云手机</p><h2 id="关于安卓设置成中文" tabindex="-1">关于安卓设置成中文 <a class="header-anchor" href="#关于安卓设置成中文" aria-label="Permalink to &quot;关于安卓设置成中文&quot;">​</a></h2><h4 id="方法一" tabindex="-1">方法一： <a class="header-anchor" href="#方法一" aria-label="Permalink to &quot;方法一：&quot;">​</a></h4><p>你可以再安装的时候自定义 language 信息</p><h4 id="方法二" tabindex="-1">方法二： <a class="header-anchor" href="#方法二" aria-label="Permalink to &quot;方法二：&quot;">​</a></h4><p>进入手机后上滑找到 setting 软件-&gt;找到 System 设置-&gt;点击 Languages &amp; input-&gt;点击 Languages（下面有个 English(United States 那个)）-&gt;Add a language-&gt;右上角搜索 chinese-&gt;点击 简体中文 中国-&gt;右侧三个杠将 简体中文（中国） 拖动到 English 上</p><h1 id="docker-使用两个开源项目搭建专属云手机-打造个人社群" tabindex="-1">Docker 使用两个开源项目搭建专属云手机，打造个人社群 <a class="header-anchor" href="#docker-使用两个开源项目搭建专属云手机-打造个人社群" aria-label="Permalink to &quot;Docker 使用两个开源项目搭建专属云手机，打造个人社群&quot;">​</a></h1><h2 id="系统介绍" tabindex="-1">系统介绍 <a class="header-anchor" href="#系统介绍" aria-label="Permalink to &quot;系统介绍&quot;">​</a></h2><p>云手机（Cloudphone）是一种深度结合了网络服务的智能手机，其原理是将云计算技术运用于网络终端服务，并通过云服务器实现云服务的手机。</p><p>云手机的原理主要基于云计算和虚拟化技术。具体来说，它涉及以下几个核心方面：</p><ol><li><strong>云服务器</strong>：云手机的核心是云服务器，这些服务器提供了高性能的计算和存储资源。华为云等云服务提供商为云手机提供了这样的服务，确保了高可用性、弹性伸缩性和高安全性。这些服务器不仅为云手机提供了运行环境，还负责处理云手机上的所有数据和操作。</li><li><strong>数据存储与处理</strong>：用户的手机数据，包括应用程序、文件、照片等，都被存储在云端。当用户通过手机或其他终端访问云手机时，所有的数据处理和操作都是在云端完成的。这意味着，用户实际上是在操作一个运行在云端的虚拟手机，而不是本地的实体手机。</li><li><strong>远程管理与控制</strong>：用户可以通过云终端或命令行界面对云手机进行远程控制，包括开关机、重启、备份、恢复等操作。此外，用户还可以通过云端应用程序对云手机进行管理和控制，例如查看文件、发送消息、通话等。这种远程管理和控制的能力使得云手机可以在任何时间、任何地点被访问和使用。</li><li><strong>虚拟化技术</strong>：虚拟化技术是云手机得以实现的关键。通过虚拟化技术，云服务器可以创建多个虚拟手机环境，每个环境都相互独立，但又共享同一套物理资源。这使得多个用户可以同时使用云手机，而无需担心资源冲突或数据安全问题。</li></ol><h2 id="开源项目" tabindex="-1">开源项目 <a class="header-anchor" href="#开源项目" aria-label="Permalink to &quot;开源项目&quot;">​</a></h2><p>云手机可以采用 Docker 搭建，目前开源的云手机项目分别有 docker-android 和 redroid-doc，两者的 GitHub 地址如下：</p><blockquote><p>docker-android</p><p><a href="https://github.com/budtmo/docker-android" target="_blank" rel="noreferrer">https://github.com/budtmo/docker-android</a></p></blockquote><blockquote><p>redroid-doc</p><p><a href="https://github.com/remote-android/redroid-doc" target="_blank" rel="noreferrer">https://github.com/remote-android/redroid-doc</a></p></blockquote><h3 id="搭建方案-1" tabindex="-1">搭建方案 1 <a class="header-anchor" href="#搭建方案-1" aria-label="Permalink to &quot;搭建方案 1&quot;">​</a></h3><p>使用项目 docker-android 搭建云手机，需要服务器支持虚拟化，以 Windows 为例，在本地安装虚拟机软件 VMware Workstation，并创建虚拟机 Ubuntu，并且设置虚拟机的虚拟化技术，如图所示</p><p><img src="`+m+`" alt="图片"></p><p>进入虚拟机 Ubuntu，分别输入以下指令检查虚拟化是否启用：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> apt</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> cpu-checker</span></span>
<span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> kvm-ok</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下一步通过 Docker 创建云手机，指令如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 6080:6080</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#D19A66;">   -e</span><span style="color:#98C379;"> EMULATOR_DEVICE=&quot;Samsung Galaxy S10&quot;</span><span style="color:#56B6C2;"> \\ </span><span style="color:#D19A66;">  -e</span><span style="color:#98C379;"> WEB_VNC=</span><span style="color:#D19A66;">true</span><span style="color:#D19A66;"> --device</span><span style="color:#98C379;"> /dev/kvm</span><span style="color:#56B6C2;"> \\ </span><span style="color:#D19A66;">  --name</span><span style="color:#98C379;"> android-container</span><span style="color:#98C379;"> budtmo/docker-android:emulator_11.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当指令执行完成后，在浏览器访问 ip:6080 即可。</p><p><img src="`+h+`" alt="图片"></p><h3 id="搭建方案-2" tabindex="-1">搭建方案 2 <a class="header-anchor" href="#搭建方案-2" aria-label="Permalink to &quot;搭建方案 2&quot;">​</a></h3><p>使用项目 redroid-doc 搭建云手机需要安装所需的内核模块，在建虚拟机 Ubuntu 执行以下指令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 切换root账号sudo su# 安装内核模块</span></span>
<span class="line"><span style="color:#61AFEF;">apt</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> linux-modules-extra-\`</span><span style="color:#61AFEF;">uname</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#61AFEF;">modprobe</span><span style="color:#98C379;"> binder_linux</span><span style="color:#98C379;"> devices=&quot;binder,hwbinder,vndbinder&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">modprobe</span><span style="color:#98C379;"> ashmem_linux</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>下一步通过 Docker 创建云手机，指令如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -itd</span><span style="color:#D19A66;"> --rm</span><span style="color:#D19A66;"> --privileged</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#D19A66;">    --pull</span><span style="color:#98C379;"> always</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#D19A66;">    -v</span><span style="color:#98C379;"> ~/data:/data</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#D19A66;">    -p</span><span style="color:#98C379;"> 5555:5555</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#98C379;">    redroid/redroid:11.0.0-latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>指令执行完成后，我们需要借助 Scrcpy 工具连接云手机，详细安装教程可以参考以下文章</p><blockquote><p>安装 Scrcpy</p><p>大中小黄，公众号：幼稚猿<a href="http://mp.weixin.qq.com/s?__biz=Mzk0MzYyMzExMQ==&amp;mid=2247484255&amp;idx=1&amp;sn=d76f77d017204c689036ea90d8a676e1&amp;chksm=c3305df7f447d4e14f851076b8f91fba17c4001f447118d50ece562e46e813e8d524d99b1f31#rd" target="_blank" rel="noreferrer">一款开源安卓投屏软件，沉浸式刷视频玩游戏</a></p></blockquote><p>Scrcpy 安装后，打开终端窗口，并将终端窗口路径切换到 Scrcpy 所在目录，输入以下指令即可连接云手机：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 通过adb连接虚拟机Ubuntu的IP:5555</span></span>
<span class="line"><span style="color:#61AFEF;">adb</span><span style="color:#98C379;"> connect</span><span style="color:#98C379;"> IP:5555</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># scrcpy连接虚拟机Ubuntu的IP:5555</span></span>
<span class="line"><span style="color:#61AFEF;">scrcpy</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> IP:5555</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+C+'" alt="图片"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>从使用体验来说，docker-android 界面和初始化软件较为全面，但使用上有点卡顿，而 redroid-doc 界面较为简洁，但使用上相对流畅</p>',109),A=[k];function _(F,E,v,D,B,x){return n(),a("div",null,A)}const P=s(g,[["render",_]]);export{f as __pageData,P as default};
