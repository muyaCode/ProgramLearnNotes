import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const F=JSON.parse('{"title":"Zig 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Zig/Zig介绍.md","filePath":"Document/Zig/Zig介绍.md","lastUpdated":1717759497000}'),p={name:"Document/Zig/Zig介绍.md"},o=l(`<h1 id="zig-介绍" tabindex="-1">Zig 介绍 <a class="header-anchor" href="#zig-介绍" aria-label="Permalink to &quot;Zig 介绍&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/jgdeWh0im-870yQzoyqf_g" target="_blank" rel="noreferrer">下一个C语言的接班人Zig，能否打败Go和Rust？ (qq.com)</a></p><h2 id="zig-相关网址" tabindex="-1">Zig 相关网址 <a class="header-anchor" href="#zig-相关网址" aria-label="Permalink to &quot;Zig 相关网址&quot;">​</a></h2><p>GitHub 开源地址：<a href="https://github.com/ziglang/zig" target="_blank" rel="noreferrer">ziglang/zig：通用编程语言和工具链，用于维护健壮、优化和可重用的软件。 (github.com)</a></p><p>官网：<a href="https://ziglang.org/" target="_blank" rel="noreferrer">家 ⚡ Zig 编程语言 (ziglang.org)</a></p><h2 id="zig-介绍-1" tabindex="-1">Zig 介绍 <a class="header-anchor" href="#zig-介绍-1" aria-label="Permalink to &quot;Zig 介绍&quot;">​</a></h2><p>原文：<a href="https://zserge.com/posts/zig-the-small-language/" target="_blank" rel="noreferrer">Zig，小语言 (zserge.com)</a></p><p>Zig 是一种相对年轻的低级编程语言。 也许不像汇编程序那样低级，但绝对像 C 或 C++ 一样低级。</p><p>在玩了玩并用它构建了一些玩具项目之后 - 我会说，我真的很喜欢用 Zig 编码。它与 C 语言的优点非常相似，当语言感觉简单而小时，生成的程序仍然很小而且速度很快，编码感觉像是“编码”而不是“工程”或“架构”。Zig 仍然很有趣。</p><h2 id="zig-很小" tabindex="-1">ZIG 很小 <a class="header-anchor" href="#zig-很小" aria-label="Permalink to &quot;ZIG 很小&quot;">​</a></h2><p>虽然 Zig 感觉很有趣，但原因之一是因为语言本身很小。人们可以在不到一个小时的时间内探索完整的语法和基本语言结构。 例如，这是我尝试用几行代码引入 Zig 的尝试：</p><div class="language-zig line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Single-line comments start with &quot;//&quot;, documentation comments start with &quot;///&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">i32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// immutable int32 value that can not be changed</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// mutable unsigned int32 variable</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> z</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// type can be omitted if it can be inferred from the value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// There is no &quot;int&quot; type, all integers have fixed width.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Same about floats, there are f16, f32, f64 and f128.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// For indices, &quot;intptr_t&quot; or &quot;size_t&quot; types use &quot;isize&quot; or &quot;usize&quot;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// All function parameters are immutable as if they are passed-by-value.</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> add_two_ints</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">i32</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">i32</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">i32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// if statement looks like C</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Arrays have fixed length, here numbers.len == 5</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> numbers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">i32</span><span style="color:#ABB2BF;">{ </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// String literals are arrays of []u8</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> hello</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Arrays can be initialised with repeating values using ** operator</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> ten_zero_bytes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">u8</span><span style="color:#ABB2BF;">{</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">**</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Arrays may contain a sentinel value at the end, here array.len == 4 and array[4] == 0.</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">u8</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Slices are pointers to array data with associated length. The difference between</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// arrays and slices is that array&#39;s length is known at compile time, while slice</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// length is only known at runtime. Like arrays, slices also perform bounds checking.</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> full_slice</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> numbers</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">..]; </span><span style="color:#7F848E;font-style:italic;">// points at &amp;numbers[0] and has length of 5</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> short_slice</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> numbers</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// points at &amp;numbers[1] and has length of 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> count_nonzero</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: []</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> i32</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">i32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">i32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// &quot;for&quot; works only on arrays and slices, use &quot;while&quot; for generic loops.</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// there is no increment operator, but there are shortcuts for +=, *=, &gt;&gt;= etc.</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// main() is a special entry point to your program</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> eight</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add_two_ints</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> nonzeros</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> count_nonzero</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">full_slice</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>当然，它有结构、错误类型、延迟、枚举，甚至还有元编程的手段，所有这些都可以在浏览 <a href="https://ziglearn.org/" target="_blank" rel="noreferrer">https://ziglearn.org</a> 后发现。</p><p>我个人很喜欢 Zig 模块和宏的实现方式。看到现有的语言功能被重用以实现更多功能，感觉非常优雅。</p><h2 id="zig-程序很小" tabindex="-1">ZIG 程序很小 <a class="header-anchor" href="#zig-程序很小" aria-label="Permalink to &quot;ZIG 程序很小&quot;">​</a></h2><p>Zig 运行时非常简陋：没有 GC，没有 HTTP 或 JSON 的实用程序，甚至没有连接字符串的方法！但这也意味着大多数最小的 Zig 程序可以保持很小。</p><p>让我们试着写一个“Hello world”：</p><div class="language-zig line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> std</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> @import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;std&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  std</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStdOut</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">writeAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello, World!</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">catch</span><span style="color:#C678DD;"> unreachable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果我们只是用 amd64 的常规 Zig 编译器编译它，我们将得到一个 ~2KB 的二进制文件。用现代术语来说，这甚至比相应的 C 二进制文件还要小。</p><p>这可以通过直接使用 Linux 系统调用并作为链接器启用来进一步改进：<code>LDD</code></p><div class="language-zig line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> std</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> @import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;std&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> linux</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> std</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">os</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">linux</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> export</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> _start</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">callconv</span><span style="color:#ABB2BF;">(.</span><span style="color:#E06C75;">Naked</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">noreturn</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> linux</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    linux</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#E06C75;">zig</span><span style="color:#E06C75;"> build</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">exe</span><span style="color:#E06C75;"> hello</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">zig</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">strip</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">OReleaseSmall</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">name</span><span style="color:#E06C75;"> hello</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">target</span><span style="color:#E06C75;"> x86_64</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">linux</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">flto</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">fLLD</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这给出了一个 ~700 字节的二进制文件，还可以使用或自定义链接器脚本将其剥离为 ~200 字节。<code>sstrip</code></p><h2 id="arduino-的-zig" tabindex="-1">ARDUINO 的 ZIG？ <a class="header-anchor" href="#arduino-的-zig" aria-label="Permalink to &quot;ARDUINO 的 ZIG？&quot;">​</a></h2><p>另一个允许测试低级语言的平台是 Arduino。旧的 ATMega MCU 只有 2KB 的 RAM 和几 KB 的 ROM 用于代码。Zig 可以在没有太多黑客的情况下闪烁 LED 吗？</p><p>实际上，是的：</p><div class="language-zig line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> avr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    pub</span><span style="color:#C678DD;"> const</span><span style="color:#E06C75;"> ddrb</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> @intToPtr</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">volatile</span><span style="color:#C678DD;"> u8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0x24</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    pub</span><span style="color:#C678DD;"> const</span><span style="color:#E06C75;"> portb</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> @intToPtr</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">*</span><span style="color:#C678DD;">volatile</span><span style="color:#C678DD;"> u8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0x25</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> led_pin</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> led_bit</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#E06C75;"> led_pin</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> loop_ms</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0x0a52</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> flipLed</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    avr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">portb</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">*</span><span style="color:#56B6C2;"> ^=</span><span style="color:#E06C75;"> led_bit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ms</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">u8</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> ms</span><span style="color:#ABB2BF;">) : (</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> loop</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">u16</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">loop</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> loop_ms</span><span style="color:#ABB2BF;">) : (</span><span style="color:#E06C75;">loop</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            asm</span><span style="color:#C678DD;"> volatile</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> ::: </span><span style="color:#98C379;">&quot;memory&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">noreturn</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    avr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ddrb</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">*</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> led_bit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    avr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">portb</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">*</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> led_bit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        flipLed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        delay</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">250</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>这可以针对目标进行交叉编译，并生成以下程序集代码：<code>avr-freestanding-none</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">main:</span></span>
<span class="line"><span style="color:#61AFEF;">	ldi</span><span style="color:#98C379;">	r24,</span><span style="color:#D19A66;"> 32</span></span>
<span class="line"><span style="color:#61AFEF;">	out</span><span style="color:#98C379;">	4,</span><span style="color:#98C379;"> r24</span></span>
<span class="line"><span style="color:#61AFEF;">	out</span><span style="color:#98C379;">	5,</span><span style="color:#98C379;"> r24</span></span>
<span class="line"><span style="color:#61AFEF;">	ldi</span><span style="color:#98C379;">	r18,</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#61AFEF;">	ldi</span><span style="color:#98C379;">	r19,</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#61AFEF;">	ldi</span><span style="color:#98C379;">	r25,</span><span style="color:#D19A66;"> 10</span></span>
<span class="line"><span style="color:#61AFEF;">.LBB0_1:</span></span>
<span class="line"><span style="color:#ABB2BF;">	in	r20, 5</span></span>
<span class="line"><span style="color:#61AFEF;">	eor</span><span style="color:#98C379;">	r20,</span><span style="color:#98C379;"> r24</span></span>
<span class="line"><span style="color:#61AFEF;">	out</span><span style="color:#98C379;">	5,</span><span style="color:#98C379;"> r20</span></span>
<span class="line"><span style="color:#61AFEF;">	ldi</span><span style="color:#98C379;">	r20,</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#61AFEF;">.LBB0_2:</span></span>
<span class="line"><span style="color:#61AFEF;">	cpi</span><span style="color:#98C379;">	r20,</span><span style="color:#D19A66;"> -6</span></span>
<span class="line"><span style="color:#61AFEF;">	breq</span><span style="color:#98C379;">	.LBB0_1</span></span>
<span class="line"><span style="color:#61AFEF;">	movw</span><span style="color:#98C379;">	r30,</span><span style="color:#98C379;"> r18</span></span>
<span class="line"><span style="color:#61AFEF;">.LBB0_4:</span></span>
<span class="line"><span style="color:#61AFEF;">	cpi</span><span style="color:#98C379;">	r30,</span><span style="color:#D19A66;"> 82</span></span>
<span class="line"><span style="color:#61AFEF;">	cpc</span><span style="color:#98C379;">	r31,</span><span style="color:#98C379;"> r25</span></span>
<span class="line"><span style="color:#61AFEF;">	brsh</span><span style="color:#98C379;">	.LBB0_6</span></span>
<span class="line"><span style="color:#61AFEF;">	adiw</span><span style="color:#98C379;">	r30,</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">	rjmp</span><span style="color:#98C379;">	.LBB0_4</span></span>
<span class="line"><span style="color:#61AFEF;">.LBB0_6:</span></span>
<span class="line"><span style="color:#61AFEF;">	inc</span><span style="color:#98C379;">	r20</span></span>
<span class="line"><span style="color:#61AFEF;">	rjmp</span><span style="color:#98C379;">	.LBB0_2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>20 条组装指令，用于切换 LED（输入+eor+输出）并在闪烁之间进行倒计时循环。就像 C 编译器一样。</p><h2 id="demoscene-的-zig" tabindex="-1">DEMOSCENE 的 ZIG？ <a class="header-anchor" href="#demoscene-的-zig" aria-label="Permalink to &quot;DEMOSCENE 的 ZIG？&quot;">​</a></h2><p>到目前为止，Zig 一直是 C 的不错竞争对手。还有另一个利基市场，像 C 这样的严肃语言几十年来一直闪耀着光芒——demoscene。与传统的工业编程相去甚远，演示场景是一门艺术，其中一些视觉或听觉上吸引人的应用程序被编写为在有限的环境中执行。大多数情况下，二进制大小是一个限制，人们可以将令人惊叹的艺术品放入 512 到 4096 字节的任何字节中。</p><p>当然，构建一个跨平台的二进制文件是很困难的，所以让我们假设我们的平台是一个带有 SDL2 的现代 Linux 发行版。我自己从未参加过演示场景，所以不要期望太多。我的目标是让 SDL2 + Zig 在不到 4KB 的时间内以可视化的方式运行。</p><div class="language-zig line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> sdl</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> @cImport</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#56B6C2;">    @cInclude</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;SDL2/SDL.h&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> std</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> @import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;std&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_Init</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_INIT_VIDEO</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    defer</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_Quit</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E06C75;"> window</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_CreateWindow</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_WINDOWPOS_CENTERED</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_WINDOWPOS_CENTERED</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">166</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">166</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    defer</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_DestroyWindow</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E06C75;"> surface</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_GetWindowSurface</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> quit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">quit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> event</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_Event</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_PollEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">@&quot;type&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_QUIT</span><span style="color:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                    quit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                },</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// Draw a white cross on red background</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_FillRect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">surface</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0xff0000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E06C75;"> v</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_Rect</span><span style="color:#ABB2BF;">{ .</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 33</span><span style="color:#ABB2BF;">, .</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 66</span><span style="color:#ABB2BF;">, .</span><span style="color:#E06C75;">w</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">, .</span><span style="color:#E06C75;">h</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 34</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_FillRect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">surface</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0xffffff</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E06C75;"> h</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SDL_Rect</span><span style="color:#ABB2BF;">{ .</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 66</span><span style="color:#ABB2BF;">, .</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 33</span><span style="color:#ABB2BF;">, .</span><span style="color:#E06C75;">w</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 34</span><span style="color:#ABB2BF;">, .</span><span style="color:#E06C75;">h</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_FillRect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">surface</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0xffffff</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sdl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SDL_UpdateWindowSurface</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// zig build-exe main.zig -OReleaseSmall --strip $(shell pkg-config --libs --cflags sdl2) -lc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>这种动态链接的可执行文件是 3700 字节。是的，留给实际艺术的空间不多了，但话又说回来 - 进一步的优化和链接器黑客应该能够稍微剥离这一点。给我印象最深的是，从 Zig 处理 SDL2（一个 C 库）是多么容易，而无需下载任何包装器或编写任何胶水代码。</p><h2 id="zig-用于其他一切" tabindex="-1">ZIG 用于其他一切 <a class="header-anchor" href="#zig-用于其他一切" aria-label="Permalink to &quot;ZIG 用于其他一切&quot;">​</a></h2><p>小可能是 Zig 最好的事情。熟悉这门语言并富有成效需要几天时间。Zig 与 C 有很好的集成，包括 C 标头和通过 FFI 从 Zig 调用 C 函数就可以了。这已经允许使用 Zig，而 C 本来会被使用，这是一个相当大的领域。</p><p>我期待 Zig 变得更加稳定，希望有一个自托管编译器和一个包管理器。对于现代低端（不仅如此）应用程序来说，这是一种非常有吸引力的语言，值得拥有光明的未来。</p>`,37),e=[o];function r(t,c,B,y,i,C){return a(),n("div",null,e)}const A=s(p,[["render",r]]);export{F as __pageData,A as default};
