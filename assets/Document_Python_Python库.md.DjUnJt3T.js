import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const p="/ProgramLearnNotes/assets/image-20240427003121315.CmwuWltF.png",e="/ProgramLearnNotes/assets/640.CoqSjwk2.gif",o="/ProgramLearnNotes/assets/640-1714239023141-665.DdYlIQGa.webp",r="/ProgramLearnNotes/assets/640-1714239023141-666.YWQebObP.webp",g=JSON.parse('{"title":"Python库","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Python/Python库.md","filePath":"Document/Python/Python库.md","lastUpdated":1716715863000}'),t={name:"Document/Python/Python库.md"},i=l(`<h1 id="python库" tabindex="-1">Python库 <a class="header-anchor" href="#python库" aria-label="Permalink to &quot;Python库&quot;">​</a></h1><h2 id="tinydb-可能是最合适小型应用的数据库" tabindex="-1">TinyDB：可能是最合适小型应用的数据库 <a class="header-anchor" href="#tinydb-可能是最合适小型应用的数据库" aria-label="Permalink to &quot;TinyDB：可能是最合适小型应用的数据库&quot;">​</a></h2><p>TinyDB 是一个 Python 中的轻量级、快速、简单的文档数据库，它以 JSON 文件的形式存储数据。</p><p>TinyDB 是为了简化小型应用程序中的数据存储而设计的，它不需要配置数据库服务器，只需一个 JSON 文件即可。TinyDB 具有简单的 API，易于学习和使用。</p><p>你可以使用 TinyDB 来存储和检索数据，例如配置信息、用户偏好设置、日志等。它适用于小型项目和原型开发，但对于大型或高性能需求的项目，可能需要更强大的数据库解决方案。</p><p>TinyDB 和 SQLite 是两种不同类型的数据库，它们有各自的特点和适用场景。</p><p>TinyDB 是一种文档数据库，以 JSON 文件的形式存储数据，适用于存储和检索简单的文档数据。SQLite 是一种关系型数据库管理系统 (RDBMS)，使用 SQL 查询语言进行操作，适用于存储和检索结构化数据。</p><p>TinyDB 使用单个 JSON 文件存储数据，这种简单的存储方式适用于小型应用程序。SQLite 使用单个文件数据库，通常以.db 文件的形式存储，支持更复杂的数据结构和查询操作。</p><p>TinyDB 通常比 SQLite 更轻量级，适用于小型数据集和低负载环境。SQLite 在处理大型数据集和复杂查询时通常比 TinyDB 更高效。</p><p>SQLite 支持丰富的 SQL 查询语言和事务操作，适用于复杂的数据操作和关系型数据库需求。TinyDB 的功能相对较简单，适用于简单的数据存储和检索需求，不支持复杂的查询语言和事务操作。</p><p>TinyDB 不需要配置数据库服务器，只需一个 JSON 文件，部署和维护比较简单。SQLite 需要配置数据库服务器，需要考虑服务器的部署和维护，相对复杂一些。</p><p>综上所述，如果你的应用程序需要存储和检索简单的文档数据，并且对性能要求不高，那么可以选择 TinyDB。如果你的应用程序需要处理结构化数据，进行复杂的查询操作，并且对性能要求较高，那么可以选择 SQLite。</p><p>如何使用 TinyDB 进行数据存储和检索呢：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>from tinydb import TinyDB, Query</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建或连接到一个名为 &#39;db.json&#39; 的 TinyDB 数据库文件</span></span>
<span class="line"><span>db = TinyDB(&#39;db.json&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 获取一个名为 &#39;users&#39; 的数据表</span></span>
<span class="line"><span>users_table = db.table(&#39;users&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 插入一条用户记录</span></span>
<span class="line"><span>users_table.insert({&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 30})</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 插入多条用户记录</span></span>
<span class="line"><span>users_table.insert_multiple([</span></span>
<span class="line"><span>    {&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 25},</span></span>
<span class="line"><span>    {&#39;name&#39;: &#39;Charlie&#39;, &#39;age&#39;: 35}</span></span>
<span class="line"><span>])</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查询所有用户记录</span></span>
<span class="line"><span>all_users = users_table.all()</span></span>
<span class="line"><span>print(&quot;All users:&quot;, all_users)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查询年龄大于 25 的用户记录</span></span>
<span class="line"><span>User = Query()</span></span>
<span class="line"><span>users_over_25 = users_table.search(User.age &gt; 25)</span></span>
<span class="line"><span>print(&quot;Users over 25:&quot;, users_over_25)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 更新用户记录</span></span>
<span class="line"><span>users_table.update({&#39;age&#39;: 40}, User.name == &#39;Bob&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除用户记录</span></span>
<span class="line"><span>users_table.remove(User.name == &#39;Charlie&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 关闭数据库连接</span></span>
<span class="line"><span>db.close()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>这段代码首先导入了 TinyDB 模块，并创建了一个名为 &#39;db.json&#39; 的 TinyDB 数据库文件。然后创建了一个名为 &#39;users&#39; 的数据表，并向其中插入了一些用户记录。</p><p>接着进行了一些简单的查询、更新和删除操作，并最终关闭了数据库连接。</p><p>可以根据自己的需要修改和扩展这段代码，以满足特定的数据存储和检索需求。</p><h2 id="m3u8" tabindex="-1">m3u8 <a class="header-anchor" href="#m3u8" aria-label="Permalink to &quot;m3u8&quot;">​</a></h2><p><strong>m3u8</strong>是一个用于解析和生成M3U8文件的Python库，这种文件格式通常用于HTTP Live Streaming（HLS）中，用于流式传输多媒体内容。该库提供了一种简单的方式来处理HLS流的各个组成部分，如播放列表、片段以及加密信息，使得开发者可以轻松地创建、修改和读取M3U8文件。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ol><li><p><strong>解析与生成</strong></p></li><li><ul><li>m3u8能够解析现有的M3U8文件，并基于这些信息生成新的M3U8文件。这对于开发直播流、视频点播等应用至关重要。</li></ul></li><li><p><strong>支持广泛</strong></p></li><li><ul><li>支持各种类型的M3U8标签和属性，包括EXT-X-VERSION、EXTINF、EXT-X-STREAM-INF等，几乎覆盖了HLS规范的所有方面。</li></ul></li><li><p><strong>简单易用</strong></p></li><li><ul><li>通过提供直观的API接口，m3u8使得操作M3U8文件变得非常简单，即使是没有深入了解HLS协议的开发者也能快速上手。</li></ul></li></ol><h3 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h3><h4 id="安装方法" tabindex="-1">安装方法： <a class="header-anchor" href="#安装方法" aria-label="Permalink to &quot;安装方法：&quot;">​</a></h4><p>安装m3u8同样简单，通过pip命令即可完成安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> m3u8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="易于上手的功能示例" tabindex="-1">易于上手的功能示例： <a class="header-anchor" href="#易于上手的功能示例" aria-label="Permalink to &quot;易于上手的功能示例：&quot;">​</a></h4><p><strong>1.解析M3U8文件</strong>：</p><p>下面的代码展示了如何读取并解析一个M3U8文件。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;"> import</span><span style="color:#ABB2BF;"> m3u8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 假设你已经有了一个M3U8文件的URL或者文件路径</span></span>
<span class="line"><span style="color:#ABB2BF;">m3u8_url </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;http://example.com/path/to/playlist.m3u8&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">playlist </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(m3u8_url)  </span><span style="color:#7F848E;font-style:italic;"># 从URL加载</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或者使用m3u8.load()从文件路径加载</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(playlist.segments)  </span><span style="color:#7F848E;font-style:italic;"># 打印所有的片段信息</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(playlist.playlists)  </span><span style="color:#7F848E;font-style:italic;"># 如果是一个master playlist，打印所有的variant streams</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>2.生成M3U8文件</strong>：</p><p>要将播放列表从对象转储到控制台或文件，请使用 dump/dump 函数</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> m3u8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 假设你已经有了一个M3U8文件的URL或者文件路径</span></span>
<span class="line"><span style="color:#ABB2BF;">m3u8_url </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;http://example.com/path/to/playlist.m3u8&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">playlist </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(m3u8_url)  </span><span style="color:#7F848E;font-style:italic;"># 从URL加载</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或者使用m3u8.load()从文件路径加载</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(playlist.segments)  </span><span style="color:#7F848E;font-style:italic;"># 打印所有的片段信息</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(playlist.playlists)  </span><span style="color:#7F848E;font-style:italic;"># 如果是一个master playlist，打印所有的variant streams</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="进阶功能示例" tabindex="-1">进阶功能示例： <a class="header-anchor" href="#进阶功能示例" aria-label="Permalink to &quot;进阶功能示例：&quot;">​</a></h3><p>探索m3u8库更深层次的功能，比如处理加密的流。</p><p><strong>1.通过请求查看秘钥</strong></p><p><img src="`+p+`" alt="image-20240427003121315"></p><p>首先用F12查看当前m3u8的秘钥方法，这里不详细展开，百度上已经有许多现成的教程，</p><p><strong>2.之后可以通过最后的key来获取所有片段</strong></p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> m3u8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">m3u8_obj </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8.</span><span style="color:#61AFEF;">loads</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#EXTM3U8 ... etc ...&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">segmk1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8_obj.segments.</span><span style="color:#61AFEF;">by_key</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">segm </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8_obj.segments.</span><span style="color:#61AFEF;">by_key</span><span style="color:#ABB2BF;">( m3u8_obj.keys[</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>不仅如此，我们还可以更改已有的key值通过这个方法</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> m3u8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">m3u8_obj </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8.</span><span style="color:#61AFEF;">loads</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#EXTM3U8 ... etc ...&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建一个新的秘钥并替换</span></span>
<span class="line"><span style="color:#ABB2BF;">new_key </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> m3u8.</span><span style="color:#61AFEF;">Key</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AES-128&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;/encrypted/newkey.bin&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">iv</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;0xf123ad23f22e441098aa87ee&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> segment </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> m3u8_obj.segments.</span><span style="color:#61AFEF;">by_key</span><span style="color:#ABB2BF;">( m3u8_obj.keys[</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] ):</span></span>
<span class="line"><span style="color:#ABB2BF;">    segment.key </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> new_key</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 最后记得同步最终的key</span></span>
<span class="line"><span style="color:#ABB2BF;">m3u8_obj.keys[</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> new_key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>m3u8库为Python开发者提供了一个强大而简单的工具，用于处理HTTP Live Streaming的各个方面。无论是解析、生成M3U8文件，还是处理复杂的流加密问题，m3u8都能提供直观、易于使用的解决方案。</p><h2 id="playwrigtht-浏览器自动化操作库" tabindex="-1">Playwrigtht：浏览器自动化操作库 <a class="header-anchor" href="#playwrigtht-浏览器自动化操作库" aria-label="Permalink to &quot;Playwrigtht：浏览器自动化操作库&quot;">​</a></h2><p>无论你是在测试，还是爬虫，或者是自动化执行，可能都绕不开直接控制浏览器的问题。</p><p>如何方便轻松的控制浏览器呢？</p><p>方法很多，但今天要介绍的神奇工具，能够轻松地满足你的任何需求（当然限于操控浏览器哈）它就是 <strong>Playwright</strong>。</p><p>它不只是能模拟用户在网页上的每一个点击，滚动、拖拽，甚至是多浏览器的并发操作，都能够精准执行，规避了传统测试方法中的那些痛点。</p><h3 id="playwright" tabindex="-1"><strong>Playwright？</strong> <a class="header-anchor" href="#playwright" aria-label="Permalink to &quot;**Playwright？**&quot;">​</a></h3><p>起初，Playwright 由微软的大脑所孕育，诞生为一个用于自动化主流浏览器操作的强大工具库。</p><p>虽然它的本体是一个 Node 库，但随着 Python 社区的蓬勃发展，其 Python 版本包也应运而生。</p><p>与老牌的自动化测试工具 Selenium 相比，Playwright 所带来的不仅仅是在现代化 API 设计上的简洁明了，还有着对现代网络功能的全面支持，尤其是它那原生操作浏览器的能力，让一切测试都变得水到渠成。</p><p>Playwright 拒绝了 WebDriver 这类<strong>中间人</strong>，提供了直接与浏览器内核对话的方式，因此无论是性能还是稳定性，都有显著提升。</p><p>它支援的不仅是 Chrome，Firefox 和WebKit，更是所有基于这些内核的现代浏览器。</p><p>而且它携带的功能，像是<strong>自动化测试</strong>、<strong>跨浏览器测试</strong>，甚至是<strong>网页截屏</strong>，都是测试工程师日常工作中的得力助手。</p><h3 id="安装" tabindex="-1"><strong>安装</strong> <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;**安装**&quot;">​</a></h3><p>事不宜迟，一起来安装 Playwright 吧！</p><p>由于 Playwright 不包含在 Python 标准库中，我们可使用 pip 来安装它。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>pip install playwright</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完后，别忘了运行 Playwright 提供的安装脚本为所有支持的浏览器下载必要组件。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>playwright install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="playwright-的核心功能" tabindex="-1"><strong>Playwright 的核心功能</strong> <a class="header-anchor" href="#playwright-的核心功能" aria-label="Permalink to &quot;**Playwright  的核心功能**&quot;">​</a></h3><h4 id="基本用法" tabindex="-1"><strong>基本用法</strong> <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;**基本用法**&quot;">​</a></h4><p>要启动 Playwright 的冒险之旅，我们首先要创建一个浏览器实例，然后打开一个新页面，如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>from playwright.sync_api import sync_playwright</span></span>
<span class="line"><span></span></span>
<span class="line"><span>with sync_playwright() as p:</span></span>
<span class="line"><span>    browser = p.chromium.launch()</span></span>
<span class="line"><span>    page = browser.newPage()</span></span>
<span class="line"><span>    page.goto(&#39;https://www.example.com&#39;)</span></span>
<span class="line"><span>    print(page.title())</span></span>
<span class="line"><span>    browser.close()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这里，我们启动了 Chromium 浏览器，并访问了一个示例页面，打印出了页面的标题。</p><h4 id="跨浏览器测试" tabindex="-1"><strong>跨浏览器测试</strong> <a class="header-anchor" href="#跨浏览器测试" aria-label="Permalink to &quot;**跨浏览器测试**&quot;">​</a></h4><p>Playwright 的一大特点就是跨浏览器测试能力。</p><p>以下示例代码展示了如何分别在 Chrome, Firefox 和 WebKit 中运行你的测试脚本：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">with</span><span style="color:#61AFEF;"> sync_playwright</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> p:</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> browser_type </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> [p.chromium, p.firefox, p.webkit]:</span></span>
<span class="line"><span style="color:#ABB2BF;">        browser </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> browser_type.</span><span style="color:#61AFEF;">launch</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        page </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> browser.</span><span style="color:#61AFEF;">newPage</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        page.</span><span style="color:#61AFEF;">goto</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://www.example.com&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        # 进行相关测试操作 </span></span>
<span class="line"><span style="color:#ABB2BF;">        browser.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>每次循环运行对应不同内核的浏览器，执行相同的测试操作，让你毫不费力的完成跨浏览器测试。</p><h3 id="高级特性" tabindex="-1"><strong>高级特性</strong> <a class="header-anchor" href="#高级特性" aria-label="Permalink to &quot;**高级特性**&quot;">​</a></h3><p>Playwright 还提供了一系列的高级特性，例如页面截图、PDF 生成、网络请求拦截等等。</p><p>我们这里主要介绍其中的页面截图功能：</p><h4 id="网页截屏" tabindex="-1"><strong>网页截屏</strong> <a class="header-anchor" href="#网页截屏" aria-label="Permalink to &quot;**网页截屏**&quot;">​</a></h4><p>在自动化测试或监控网页布局的时候，截屏功能是非常有用的。</p><p>Playwright 可以轻松地捕获当前页面的视觉呈现状态：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">page.</span><span style="color:#61AFEF;">screenshot</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;example.png&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会保存当前页面的截图到你指定的文件中。</p><h3 id="实践" tabindex="-1"><strong>实践</strong> <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;**实践**&quot;">​</a></h3><p>现在，你已经掌握了 Playwright 的核心功能和一些高级特性，为何不自己动手，尝试撰写一个自动化测试脚本，监测你最爱的网站是否如期运行？</p><p>或者，试试写一个脚本，在不同的浏览器中验证一个网页的响应式设计，确保布局的完美呈现。</p><h3 id="结语" tabindex="-1"><strong>结语</strong> <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;**结语**&quot;">​</a></h3><p>在这个高速迭代的数字世界，Playwright 似乎赋予了测试工程师超能力，让他们在保证质量的同时，也能享受到开发的乐趣。</p><p>Playwright 不仅改变了自动化测试的景观，更拉近了开发者与测试者的距离。</p><p>无论是简单的脚本还是复杂的自动化任务，Playwright 都能够让你如鱼得水。</p><h2 id="pybind11-让python和c-完美结合的开源工具库-轻松地将c-代码封装为python模块" tabindex="-1">Pybind11：让Python和C++完美结合的开源工具库，轻松地将C++代码封装为Python模块 <a class="header-anchor" href="#pybind11-让python和c-完美结合的开源工具库-轻松地将c-代码封装为python模块" aria-label="Permalink to &quot;Pybind11：让Python和C++完美结合的开源工具库，轻松地将C++代码封装为Python模块&quot;">​</a></h2><p><strong>项目地址</strong>：<a href="https://github.com/pybind/pybind11" target="_blank" rel="noreferrer">https://github.com/pybind/pybind11</a></p><p>Pybind11这个开源工具的目标是让Python和C++之间的交互更加简单高效。Pybind11提供了一套完整的工具，帮助用户轻松地将C++代码封装为Python模块，并在Python中直接调用。这样用户即可以享受C++的高性能，又可以利用Python的高效和简洁性快速搭建程序。</p><p>Pybind11的使用方法非常简单，用户只需要按照以下步骤来进行：</p><ol><li><p>首先，用户需要安装Pybind11。在Python环境下可以通过源代码或者包管理工具（如pip）进行安装。</p><p>pip install pybind11</p></li><li><p>在C++代码中，用户只需要简单使用Pybind11提供的宏和函数来定义，就可以把想要绑定到Python的函数和类。通过使用<code>PYBIND11_MODULE</code>宏，用户就可以方便的定义一个Python模块，并在其中定义自己的函数和类。</p></li><li><p>在C++代码中，用户可以便捷地使用Pybind11提供的API来操作Python对象，包括但不限于获取和设置属性、调用函数等。</p></li><li><p>在Python中，用户可以方便高效地导入已经绑定的C++模块，并像调用Python模块一样方便的使用其中的函数和类。</p></li></ol><p>通过上述步骤，用户可以方便地在Python中调用C++代码，无需担心性能损失，同时还能享受Python编程的便捷性，可谓一举两得，事半功倍。</p><p>除了上述简单的使用方法，Pybind11还提供了更加丰富的特性和工具，方便用户更好地控制绑定的细节。用户不但可以自定义Python模块的名称、函数签名和参数类型，还可以方便地处理异常和错误信息，使得Python和C++之间的交互更加稳定和可靠。此外，Pybind11还支持多线程和多进程的并发操作，满足了用户在复杂应用场景的需求。</p><p>作为一个开源工具，Pybind11的源代码完全开放，用户可以自由地修改和定制，以满足个人或团队的特定需求。</p><p>总而言之，Pybind11是一个让Python和C++完美结合的开源项目，它通过简洁的语法、出色的性能和丰富的特性，让用户能够轻松地将C++代码封装为Python模块，并在Python中直接调用。如果你有Python和C++的交互有需求，那么不妨尝试一下Pybind11，它将给你带来更加便捷的编程体验。</p><h2 id="httpx-下一代python-http-客户端-一个非常强大、灵活的工具" tabindex="-1">httpx：下一代Python HTTP 客户端，一个非常强大、灵活的工具 <a class="header-anchor" href="#httpx-下一代python-http-客户端-一个非常强大、灵活的工具" aria-label="Permalink to &quot;httpx：下一代Python HTTP 客户端，一个非常强大、灵活的工具&quot;">​</a></h2><p><strong>项目地址</strong>：<a href="https://github.com/encode/httpx" target="_blank" rel="noreferrer">https://github.com/encode/httpx</a></p><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>httpx 是一个为 Python 设计的下一代 HTTP 客户端。与标准库中的 urllib 或第三方库 requests 相比，httpx 提供了更多功能和更好的性能。它支持异步请求，可以与 asyncio 和协程一起使用。同时，httpx 还提供了更多的高级功能，如模拟浏览器的行为和支持 HTTP/2。它是一个非常强大、灵活的工具，能够满足各种 HTTP 请求的需求。</p><h3 id="功能和特点" tabindex="-1">功能和特点 <a class="header-anchor" href="#功能和特点" aria-label="Permalink to &quot;功能和特点&quot;">​</a></h3><ul><li>支持异步请求，适用于异步程序和协程</li><li>支持 HTTP/2，提供更快的传输速度</li><li>提供高级的请求和响应处理方法，如重定向、代理、SSL 验证等</li><li>可以模拟浏览器的行为，包括发送表单、处理 cookie 等</li><li>支持多种认证方式，包括基本认证、摘要认证等</li></ul><h3 id="使用方法和示例代码" tabindex="-1">使用方法和示例代码 <a class="header-anchor" href="#使用方法和示例代码" aria-label="Permalink to &quot;使用方法和示例代码&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> httpx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 发送 GET 请求</span></span>
<span class="line"><span style="color:#ABB2BF;">response </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> httpx.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://www.example.com&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(response.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 发送 POST 请求</span></span>
<span class="line"><span style="color:#ABB2BF;">data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&#39;key1&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;value1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;key2&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;value2&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">response </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> httpx.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://www.example.com&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">data)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(response.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>开发异步程序或协程</li><li>需要使用 HTTP/2 协议进行请求的场景</li><li>对于需要更高级功能的 HTTP 请求，如模拟浏览器行为等</li></ul><h3 id="优势和缺点" tabindex="-1">优势和缺点 <a class="header-anchor" href="#优势和缺点" aria-label="Permalink to &quot;优势和缺点&quot;">​</a></h3><h4 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h4><ul><li>支持异步请求，性能更好</li><li>提供更多高级功能，如 HTTP/2 支持、模拟浏览器行为等</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>对于简单的同步请求，可能比 requests 等库多出一些学习成本</li></ul><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>httpx 是一个功能强大、灵活的 HTTP 客户端，支持异步请求和多种高级功能。它能满足各种 HTTP 请求的需求，是 Python 开发中的一个非常有用的工具。在异步编程和 HTTP/2 支持等方面，httpx 展现出了明显的优势，是未来 Python HTTP 客户端的发展方向。</p><h2 id="mitmproxy-流量拦截与修改的强大工具" tabindex="-1">Mitmproxy：流量拦截与修改的强大工具 <a class="header-anchor" href="#mitmproxy-流量拦截与修改的强大工具" aria-label="Permalink to &quot;Mitmproxy：流量拦截与修改的强大工具&quot;">​</a></h2><p><strong>项目地址</strong>：<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noreferrer">https://github.com/mitmproxy/mitmproxy</a></p><h3 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h3><p>mitmproxy是一个流量拦截与修改的工具，可以拦截HTTP和HTTPS流量，并在中间人嵌入式代理服务器上对请求和响应进行修改。它提供了一个直观的Web界面和命令行界面，方便用户查看和修改流量。本文将介绍mitmproxy库的安装方法、使用方法以及它的优缺点、应用场景和总结。</p><h3 id="_2-安装" tabindex="-1">2. 安装 <a class="header-anchor" href="#_2-安装" aria-label="Permalink to &quot;2. 安装&quot;">​</a></h3><p>在开始使用mitmproxy库之前，您需要进行一些安装准备。以下是安装mitmproxy库的步骤：</p><ul><li>首先，确认您的操作系统上已经安装了Python和pip。</li><li>其次，使用以下命令安装mitmproxy库：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> mitmproxy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-使用方法" tabindex="-1">3. 使用方法 <a class="header-anchor" href="#_3-使用方法" aria-label="Permalink to &quot;3. 使用方法&quot;">​</a></h3><p>mitmproxy库的使用方法相对复杂，但以下是一个基本使用流程的简单步骤：</p><ul><li>运行mitmproxy：在命令行中输入<code>mitmproxy</code>命令，启动mitmproxy代理服务器。</li><li>设置浏览器代理：在浏览器的设置中配置代理服务器，将流量导向mitmproxy。</li><li>拦截和修改流量：mitmproxy会拦截所有经过代理服务器的流量，用户可以查看和修改请求和响应。</li><li>保存和导出流量：mitmproxy提供了保存流量和导出流量的功能，方便用户进行后续分析和处理。</li></ul><h3 id="_4-完整示例代码" tabindex="-1">4. 完整示例代码 <a class="header-anchor" href="#_4-完整示例代码" aria-label="Permalink to &quot;4. 完整示例代码&quot;">​</a></h3><p>以下是一个简单示例代码，展示了如何使用mitmproxy库进行流量拦截和修改：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> mitmproxy </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> http</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> request</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">flow</span><span style="color:#ABB2BF;">: http.HTTPFlow) -&gt; </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 修改请求URL，添加自定义参数</span></span>
<span class="line"><span style="color:#ABB2BF;">    flow.request.url </span><span style="color:#56B6C2;">+=</span><span style="color:#98C379;"> &quot;&amp;custom_param=value&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> response</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">flow</span><span style="color:#ABB2BF;">: http.HTTPFlow) -&gt; </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 修改响应内容，替换指定关键词</span></span>
<span class="line"><span style="color:#ABB2BF;">    flow.response.text </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> flow.response.text.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;original_keyword&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;modified_keyword&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_5-优缺点" tabindex="-1">5. 优缺点 <a class="header-anchor" href="#_5-优缺点" aria-label="Permalink to &quot;5. 优缺点&quot;">​</a></h3><p>优点：</p><ul><li>mitmproxy库可以拦截HTTP和HTTPS流量，方便用户对请求和响应进行查看和修改，实现定制化的流量操作。</li><li>mitmproxy提供了直观的Web界面和命令行界面，使得用户可以方便地进行流量监控和修改操作。</li><li>mitmproxy库具有良好的可扩展性，并支持使用Python代码进行高级的流量处理和定制开发。</li></ul><p>缺点：</p><ul><li>mitmproxy库的使用方法相对复杂，需要较长时间来熟悉和掌握其功能和配置选项。</li><li>对于一些加密或隐私敏感的应用程序，mitmproxy可能会造成安全风险，因为它能够拦截和修改HTTPS流量。</li></ul><h3 id="_6-应用场景" tabindex="-1">6. 应用场景 <a class="header-anchor" href="#_6-应用场景" aria-label="Permalink to &quot;6. 应用场景&quot;">​</a></h3><p>mitmproxy库在以下场景中具有广泛的应用：</p><ul><li>网络调试和分析：通过拦截和修改流量，帮助开发人员进行网络调试、性能优化和问题排查。</li><li>安全测试和漏洞挖掘：通过修改请求和响应，模拟各种攻击场景，帮助安全人员发现和修复漏洞。</li><li>数据抓取和篡改：对抓取的数据进行定制化处理，例如爬虫数据过滤、数据篡改等。</li></ul><h3 id="_7-总结" tabindex="-1"><strong>7. 总结</strong> <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;**7. 总结**&quot;">​</a></h3><p>mitmproxy库是一个功能强大的流量拦截与修改工具，通过中间人嵌入式代理服务器实现对HTTP和HTTPS流量的拦截和修改。</p><p>它提供了直观的Web界面和命令行界面，方便用户查看和修改流量。尽管mitmproxy库的使用方法相对复杂，但它在网络调试、安全测试和数据处理等场景中具有广泛的应用前景。通过深入学习和合理使用，mitmproxy库可以成为流量拦截与修改的强大工具。</p><h2 id="pyprind-简单高效的python进度条" tabindex="-1">pyprind：简单高效的Python进度条 <a class="header-anchor" href="#pyprind-简单高效的python进度条" aria-label="Permalink to &quot;pyprind：简单高效的Python进度条&quot;">​</a></h2><p><strong>Github地址</strong>：<a href="https://github.com/rasbt/pyprind" target="_blank" rel="noreferrer">https://github.com/rasbt/pyprind</a></p><h3 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>pyprind作为一款Python进度指示器工具，解决了以下问题：</p><p>在Python编程中，经常需要处理耗时的任务或循环，为了更好地展示任务的进度，提升用户体验，pyprind作为一款Python进度指示器工具应运而生。提供了进度条、百分比、预估时间等多种进度指示样式，满足不同的需求。</p><p>本文将详细介绍pyprind的功能和用法，让我们一起来了解这个备受欢迎的工具。</p><h3 id="pyprind的简介" tabindex="-1">pyprind的简介 <a class="header-anchor" href="#pyprind的简介" aria-label="Permalink to &quot;pyprind的简介&quot;">​</a></h3><p>pyprind是一个简单而强大的Python库，用于在命令行界面显示进度指示器。它提供了一种简便的方式来跟踪任务的执行进度，并在屏幕上实时显示进度条、百分比和估计剩余时间等信息。</p><h3 id="主要特点和功能" tabindex="-1">主要特点和功能 <a class="header-anchor" href="#主要特点和功能" aria-label="Permalink to &quot;主要特点和功能&quot;">​</a></h3><h4 id="简单易用" tabindex="-1">简单易用 <a class="header-anchor" href="#简单易用" aria-label="Permalink to &quot;简单易用&quot;">​</a></h4><p>pyprind的使用非常简单，只需几行代码就可以创建一个进度指示器对象，并在任务执行过程中更新进度。</p><h4 id="进度条显示" tabindex="-1">进度条显示 <a class="header-anchor" href="#进度条显示" aria-label="Permalink to &quot;进度条显示&quot;">​</a></h4><p>pyprind可以实时显示任务的进度条，以直观的方式展示任务的完成情况。</p><p><img src="`+e+'" alt="图片"></p><h4 id="百分比显示" tabindex="-1">百分比显示 <a class="header-anchor" href="#百分比显示" aria-label="Permalink to &quot;百分比显示&quot;">​</a></h4><p>除了进度条，pyprind还可以显示任务的百分比完成情况，让用户清楚地了解任务的进展。</p><p><img src="'+o+'" alt="图片"></p><h4 id="估计剩余时间" tabindex="-1">估计剩余时间 <a class="header-anchor" href="#估计剩余时间" aria-label="Permalink to &quot;估计剩余时间&quot;">​</a></h4><p>pyprind可以根据任务已完成的进度和执行时间，估计任务的剩余执行时间，帮助用户更好地安排时间和资源。</p><h4 id="自定义样式" tabindex="-1">自定义样式 <a class="header-anchor" href="#自定义样式" aria-label="Permalink to &quot;自定义样式&quot;">​</a></h4><p>pyprind允许用户自定义进度条的样式和显示格式，以满足不同场景下的需求。</p><h3 id="pyprind的用法示例" tabindex="-1">pyprind的用法示例 <a class="header-anchor" href="#pyprind的用法示例" aria-label="Permalink to &quot;pyprind的用法示例&quot;">​</a></h3><p>下面是一个简单的示例代码，演示了如何使用pyprind创建和更新进度指示器：</p><p><img src="'+r+`" alt="图片"></p><p>以上示例代码创建了一个包含100个步骤的进度指示器，并使用<code>update()</code>方法在每个步骤完成时更新指示器。最后，使用<code>stop()</code>方法标记任务的完成。</p><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>pyprind作为一款Python进度指示器工具，简化了任务进度的展示和跟踪。它的简单易用性、进度条和百分比的显示、估计剩余时间功能以及自定义样式的灵活性，使得用户能够更好地了解任务的进展情况。通过pyprind，Python开发者可以更加直观地展示任务的进度，提升用户体验。</p><h2 id="mypy-静态类型检查的利器" tabindex="-1">MyPy：静态类型检查的利器 <a class="header-anchor" href="#mypy-静态类型检查的利器" aria-label="Permalink to &quot;MyPy：静态类型检查的利器&quot;">​</a></h2><p><strong>GitHub地址</strong>：<a href="https://github.com/python/mypy" target="_blank" rel="noreferrer">https://github.com/python/mypy</a></p><h3 id="引言-1" tabindex="-1">引言 <a class="header-anchor" href="#引言-1" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>Python 是一种动态类型语言，它的灵活性和易用性使得它成为众多开发者的首选编程语言。然而，动态类型语言也存在一些潜在的问题，例如在运行时才能发现的类型错误。为了解决这个问题，Python 社区开发了一个强大的静态类型检查工具，名为 MyPy。本文将详细介绍 MyPy 的功能和用法。</p><h3 id="什么是-mypy" tabindex="-1">什么是 MyPy <a class="header-anchor" href="#什么是-mypy" aria-label="Permalink to &quot;什么是 MyPy&quot;">​</a></h3><h4 id="_1-mypy-概述" tabindex="-1">1.MyPy 概述 <a class="header-anchor" href="#_1-mypy-概述" aria-label="Permalink to &quot;1.MyPy 概述&quot;">​</a></h4><p>MyPy 是一个由 Python 社区开发的可选静态类型检查工具，它可以帮助开发者在编写 Python 代码时发现潜在的类型错误。它是一个独立的命令行工具，可以与任何文本编辑器或集成开发环境（IDE）配合使用。</p><h4 id="_2-mypy-的特点" tabindex="-1">2.MyPy 的特点 <a class="header-anchor" href="#_2-mypy-的特点" aria-label="Permalink to &quot;2.MyPy 的特点&quot;">​</a></h4><ul><li>静态类型检查：MyPy 可以对 Python 代码进行静态类型检查，即在代码编写期间检查类型错误，而不是在运行时。</li><li>可选性：MyPy 提供了可选的类型注解语法，开发者可以根据需要选择性地对代码进行类型注解。</li><li>与 Python 3 兼容：MyPy 完全兼容 Python 3，并对 Python 2 提供有限的支持。</li><li>功能丰富：MyPy 支持多种类型注解，包括基本类型、自定义类型、泛型类型和函数类型等。</li><li>插件生态系统：MyPy 的插件生态系统丰富，可以扩展其功能，提供更多的静态类型检查规则和特性。</li></ul><h3 id="安装和配置-mypy" tabindex="-1">安装和配置 MyPy <a class="header-anchor" href="#安装和配置-mypy" aria-label="Permalink to &quot;安装和配置 MyPy&quot;">​</a></h3><p><strong>1.安装 MyPy</strong></p><p>可以通过 pip 包管理器来安装 MyPy。在命令行中运行以下命令即可：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>pip install mypy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>2.配置编辑器</strong></p><p>为了获得最佳的开发体验，建议在你使用的代码编辑器中配置 MyPy。常见的编辑器如 Visual Studio Code、PyCharm 和 Sublime Text 都提供了对 MyPy 的插件或集成支持。</p><h3 id="使用-mypy-进行静态类型检查" tabindex="-1">使用 MyPy 进行静态类型检查 <a class="header-anchor" href="#使用-mypy-进行静态类型检查" aria-label="Permalink to &quot;使用 MyPy 进行静态类型检查&quot;">​</a></h3><p><strong>1.添加类型注解</strong></p><p>在 Python 代码中使用 MyPy 进行静态类型检查，首先需要对变量、函数参数和函数返回值等位置进行类型注解。</p><p>变量注解：在变量声明时，使用冒号（:）和类型注解来指定变量的类型。例如：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">my_variable: </span><span style="color:#56B6C2;">int</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>函数参数注解：在函数定义时，使用冒号和类型注解来指定函数的参数类型。例如：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>函数返回值注解：使用箭头（-&gt;）和类型注解来指定函数的返回值类型。例如：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> multiply</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>2.运行 MyPy 进行类型检查</strong></p><p>在命令行中，你可以通过以下命令来运行 MyPy 进行静态类型检查：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">mypy your_code.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果没有发现任何类型错误，将会显示一条 &quot;Success&quot; 的消息。如果存在类型错误，MyPy 将会指出错误的具体位置和原因。</p><h3 id="mypy-的优势和适用场景" tabindex="-1">MyPy 的优势和适用场景 <a class="header-anchor" href="#mypy-的优势和适用场景" aria-label="Permalink to &quot;MyPy 的优势和适用场景&quot;">​</a></h3><p>使用 MyPy 提供的可选静态类型支持，有以下优势和适用场景：</p><ol><li><strong>类型安全保证</strong>：通过静态类型检查，可以在编写代码时发现并避免潜在的类型错误，提高代码的安全性和稳定性。</li><li><strong>增强代码可读性</strong>：类型注解能够使代码更加清晰易懂，提高代码的可读性和可维护性。</li><li><strong>提升开发效率</strong>：MyPy 提供了更好的代码补全和自动提示功能，帮助开发者更快地编写代码和调试错误。</li><li><strong>团队合作</strong>：在团队合作中，使用静态类型可以提供更好的代码文档和沟通，减少误解和错误的发生。</li></ol><p>总结而言，MyPy 是一个强大的可选静态类型检查工具，它可以帮助 Python 开发者在编写代码时发现潜在的类型错误。通过使用 MyPy，你可以提高代码的可靠性、可读性和可维护性，从而更高效地开发和维护 Python 项目。</p><h1 id="办公自动化库" tabindex="-1">办公自动化库 <a class="header-anchor" href="#办公自动化库" aria-label="Permalink to &quot;办公自动化库&quot;">​</a></h1><p>Python办公自动化是指使用Python编程语言及其丰富的库和模块，来自动执行、管理和优化日常办公任务的过程。这种方法可以显著提高工作效率，减少人为错误，节省时间，并允许工作人员专注于更复杂和创造性的任务。</p><h3 id="核心优势" tabindex="-1">核心优势 <a class="header-anchor" href="#核心优势" aria-label="Permalink to &quot;核心优势&quot;">​</a></h3><ol><li><strong>效率提升</strong>：自动化脚本可以快速执行重复性任务，比人工操作更快、更准确。</li><li><strong>减少错误</strong>：自动化流程减少了人为操作的出错可能性，提高了工作质量。</li><li><strong>成本节约</strong>：长期来看，自动化可以减少对人力资源的依赖，降低企业的运营成本。</li><li><strong>灵活性和可扩展性</strong>：自动化脚本可以根据需要进行调整和扩展，以适应不断变化的工作需求。</li><li><strong>数据分析和报告</strong>：Python提供了强大的数据分析工具，可以帮助从大量数据中提取有价值的信息，并生成报告。</li></ol><h3 id="常用库和工具" tabindex="-1">常用库和工具 <a class="header-anchor" href="#常用库和工具" aria-label="Permalink to &quot;常用库和工具&quot;">​</a></h3><ul><li><strong>Pandas</strong>：用于数据分析和处理，特别适合处理表格数据（如Excel文件）。</li><li><strong>OpenPyXL</strong>：用于读写Excel 2010 xlsx/xlsm/xltx/xltm文件。</li><li><strong>Python-docx</strong>：用于创建和修改Microsoft Word文档。</li><li><strong>Python-pptx</strong>：用于创建和修改Microsoft PowerPoint演示文稿。</li><li><strong>smtplib</strong>：用于发送电子邮件。</li><li><strong>PyPDF2</strong>：用于处理PDF文件，包括合并、拆分、转换等。</li><li><strong>Win32com</strong>：用于与Windows应用程序交互，如Word、Excel和PowerPoint。</li></ul><h3 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li><strong>数据录入和处理</strong>：自动从PDF或网页中提取数据，整理到Excel表格中。</li><li><strong>报告生成</strong>：根据数据自动生成图表和报告。</li><li><strong>文件管理</strong>：批量重命名文件、转换文件格式、合并分割文档等。</li><li><strong>邮件处理</strong>：自动发送通知邮件、处理邮件附件等。</li><li><strong>表单自动化</strong>：自动填写网页表单，提取表单数据等。</li><li><strong>系统管理</strong>：自动化系统维护任务，如备份、日志分析等。</li></ul><h3 id="实施步骤" tabindex="-1">实施步骤 <a class="header-anchor" href="#实施步骤" aria-label="Permalink to &quot;实施步骤&quot;">​</a></h3><ol><li><strong>需求分析</strong>：明确需要自动化的任务和目标。</li><li><strong>选择合适的库</strong>：根据任务需求选择最适合的Python库。</li><li><strong>编写脚本</strong>：编写Python脚本，实现自动化流程。</li><li><strong>测试和调试</strong>：确保脚本按预期工作，修复可能出现的问题。</li><li><strong>部署和监控</strong>：将脚本部署到生产环境，并定期监控其运行情况。</li><li><strong>维护和更新</strong>：根据实际情况调整和优化脚本。</li></ol><p>通过Python办公自动化，无论是个人还是企业，都可以有效地提高工作效率和质量，从而在竞争激烈的市场中保持优势。</p><h3 id="案例示例" tabindex="-1">案例示例 <a class="header-anchor" href="#案例示例" aria-label="Permalink to &quot;案例示例&quot;">​</a></h3><p>以下是这些库的介绍，它们的使用场景以及一些简单的案例示例。</p><h3 id="_1-pandas-数据分析与处理" tabindex="-1">1. <code>pandas</code> - 数据分析与处理 <a class="header-anchor" href="#_1-pandas-数据分析与处理" aria-label="Permalink to &quot;1. \`pandas\` - 数据分析与处理&quot;">​</a></h3><ul><li><p><strong>使用场景</strong>：适用于数据分析、数据清洗、数据转换等。</p></li><li><p><strong>案例</strong>：使用<code>pandas</code>读取Excel文件，进行数据分析，然后生成报告。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> pandas </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> pd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 读取Excel文件</span></span>
<span class="line"><span style="color:#ABB2BF;">df </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pd.</span><span style="color:#61AFEF;">read_excel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data.xlsx&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 数据分析：计算某列的平均值</span></span>
<span class="line"><span style="color:#ABB2BF;">average </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> df[</span><span style="color:#98C379;">&#39;column_name&#39;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">mean</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 输出结果到新的Excel文件</span></span>
<span class="line"><span style="color:#ABB2BF;">df.</span><span style="color:#61AFEF;">to_excel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;analysis.xlsx&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="_2-openpyxl-excel文件操作" tabindex="-1">2. <code>openpyxl</code> - Excel文件操作 <a class="header-anchor" href="#_2-openpyxl-excel文件操作" aria-label="Permalink to &quot;2. \`openpyxl\` - Excel文件操作&quot;">​</a></h3><ul><li><p><strong>使用场景</strong>：适用于读写Excel 2010 xlsx/xlsm/xltx/xltm文件。</p></li><li><p><strong>案例</strong>：创建一个新的Excel工作簿，并向其中添加数据。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> openpyxl </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Workbook</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建工作簿</span></span>
<span class="line"><span style="color:#ABB2BF;">wb </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Workbook</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">ws </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> wb.active</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加数据</span></span>
<span class="line"><span style="color:#ABB2BF;">ws[</span><span style="color:#98C379;">&#39;A1&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;Hello&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">ws[</span><span style="color:#98C379;">&#39;B1&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;World!&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 保存工作簿</span></span>
<span class="line"><span style="color:#ABB2BF;">wb.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;new_workbook.xlsx&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h3 id="_3-python-docx-word文档操作" tabindex="-1">3. <code>python-docx</code> - Word文档操作 <a class="header-anchor" href="#_3-python-docx-word文档操作" aria-label="Permalink to &quot;3. \`python-docx\` - Word文档操作&quot;">​</a></h3><ul><li><p><strong>使用场景</strong>：适用于创建和修改Microsoft Word文档。</p></li><li><p><strong>案例</strong>：向Word文档中添加文本和格式化。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> docx </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Document</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建文档</span></span>
<span class="line"><span style="color:#ABB2BF;">doc </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Document</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加段落</span></span>
<span class="line"><span style="color:#ABB2BF;">doc.</span><span style="color:#61AFEF;">add_paragraph</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This is a paragraph.&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加格式化文本</span></span>
<span class="line"><span style="color:#ABB2BF;">doc.</span><span style="color:#61AFEF;">add_paragraph</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This is an italic text.&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">style</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;Intense Emphasis&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 保存文档</span></span>
<span class="line"><span style="color:#ABB2BF;">doc.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;new_document.docx&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h3 id="_4-python-pptx-ppt幻灯片操作" tabindex="-1">4. <code>python-pptx</code> - PPT幻灯片操作 <a class="header-anchor" href="#_4-python-pptx-ppt幻灯片操作" aria-label="Permalink to &quot;4. \`python-pptx\` - PPT幻灯片操作&quot;">​</a></h3><ul><li><p><strong>使用场景</strong>：适用于创建和修改Microsoft PowerPoint演示文稿。</p></li><li><p><strong>案例</strong>：创建一个新的PPT，并添加幻灯片和图片。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> pptx </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Presentation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建演示文稿</span></span>
<span class="line"><span style="color:#ABB2BF;">ppt </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Presentation</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加幻灯片</span></span>
<span class="line"><span style="color:#ABB2BF;">slide </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ppt.slides.</span><span style="color:#61AFEF;">add_slide</span><span style="color:#ABB2BF;">(ppt.slide_layouts[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加标题和内容</span></span>
<span class="line"><span style="color:#ABB2BF;">title </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> slide.shapes.title</span></span>
<span class="line"><span style="color:#ABB2BF;">title.text </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;My Slide&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">content </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> slide.placeholders[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">content.text </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;This is my content.&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加图片</span></span>
<span class="line"><span style="color:#ABB2BF;">picture </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> slide.shapes.</span><span style="color:#61AFEF;">add_picture</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path_to_image.jpg&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">left</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">top</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">width</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">height</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 保存演示文稿</span></span>
<span class="line"><span style="color:#ABB2BF;">ppt.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;new_presentation.pptx&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li></ul><h3 id="_5-smtplib-发送电子邮件" tabindex="-1">5. <code>smtplib</code> - 发送电子邮件 <a class="header-anchor" href="#_5-smtplib-发送电子邮件" aria-label="Permalink to &quot;5. \`smtplib\` - 发送电子邮件&quot;">​</a></h3><ul><li><p><strong>使用场景</strong>：适用于自动化电子邮件的发送。</p></li><li><p><strong>案例</strong>：使用<code>smtplib</code>发送一封HTML格式的电子邮件。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> smtplib</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> email.mime.text </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> MIMEText</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> email.mime.multipart </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> MIMEMultipart</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> email.mime.application </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> MIMEApplication</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建邮件内容</span></span>
<span class="line"><span style="color:#ABB2BF;">msg </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> MIMEMultipart</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;alternative&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">msg[</span><span style="color:#98C379;">&#39;Subject&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;Your subject here&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">msg[</span><span style="color:#98C379;">&#39;From&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;from@example.com&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">msg[</span><span style="color:#98C379;">&#39;To&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;to@example.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加HTML内容</span></span>
<span class="line"><span style="color:#ABB2BF;">html </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hi there!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">part </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> MIMEText</span><span style="color:#ABB2BF;">(html, </span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">msg.</span><span style="color:#61AFEF;">attach</span><span style="color:#ABB2BF;">(part)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加附件</span></span>
<span class="line"><span style="color:#C678DD;">with</span><span style="color:#56B6C2;"> open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;attachment.pdf&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;rb&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> attachment:</span></span>
<span class="line"><span style="color:#ABB2BF;">  part </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> MIMEApplication</span><span style="color:#ABB2BF;">(attachment.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">_subtype</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;pdf&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  part.</span><span style="color:#61AFEF;">add_header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Content-Disposition&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;attachment&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;attachment.pdf&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  msg.</span><span style="color:#61AFEF;">attach</span><span style="color:#ABB2BF;">(part)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 发送邮件</span></span>
<span class="line"><span style="color:#ABB2BF;">server </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> smtplib.</span><span style="color:#61AFEF;">SMTP</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;smtp.example.com&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">sendmail</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;from@example.com&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;to@example.com&#39;</span><span style="color:#ABB2BF;">, msg.</span><span style="color:#61AFEF;">as_string</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">server.</span><span style="color:#61AFEF;">quit</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></li></ul><h3 id="_6-pypdf2-pdf文件操作" tabindex="-1">6. <code>PyPDF2</code> - PDF文件操作 <a class="header-anchor" href="#_6-pypdf2-pdf文件操作" aria-label="Permalink to &quot;6. \`PyPDF2\` - PDF文件操作&quot;">​</a></h3><ul><li><p><strong>使用场景</strong>：适用于PDF文件的读取、写入、合并、拆分等。</p></li><li><p><strong>案例</strong>：合并两个PDF文件。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> PyPDF2 </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> PdfFileMerger</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建合并对象</span></span>
<span class="line"><span style="color:#ABB2BF;">merger </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> PdfFileMerger</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加PDF文件</span></span>
<span class="line"><span style="color:#ABB2BF;">merger.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;file1.pdf&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">merger.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;file2.pdf&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 合并并保存</span></span>
<span class="line"><span style="color:#ABB2BF;">merger.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;merged.pdf&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><p>这些库是Python办公自动化中非常实用的工具，通过它们，我们可以轻松地处理各种办公文档和邮件任务。掌握这些库的使用方法，将极大地提升你的工作效率。</p>`,222),c=[i];function y(B,b,d,u,h,m){return a(),n("div",null,c)}const A=s(t,[["render",y]]);export{g as __pageData,A as default};
