import{_ as a,c as e,o as t,a3 as r}from"./chunks/framework.zGi9i9Bf.js";const k=JSON.parse('{"title":"Lua语言学习资源","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Lua/Lua语言学习资源.md","filePath":"Document/Lua/Lua语言学习资源.md","lastUpdated":1715211236000}'),n={name:"Document/Lua/Lua语言学习资源.md"},o=r('<h1 id="lua语言学习资源" tabindex="-1">Lua语言学习资源 <a class="header-anchor" href="#lua语言学习资源" aria-label="Permalink to &quot;Lua语言学习资源&quot;">​</a></h1><h2 id="相关网址" tabindex="-1">相关网址 <a class="header-anchor" href="#相关网址" aria-label="Permalink to &quot;相关网址&quot;">​</a></h2><p>Lua5.3中文参考手册：<a href="https://www.runoob.com/manual/lua53doc/contents.html" target="_blank" rel="noreferrer">Lua 5.3 参考手册 - 目录 (runoob.com)</a></p><p>Lua5.4官方参考手册：<a href="http://www.lua.org/manual/5.4/" target="_blank" rel="noreferrer">Lua 5.4 参考手册 - 目录</a></p><p>Lua开源地址：<a href="https://github.com/lua/lua" target="_blank" rel="noreferrer">https://github.com/lua/lua</a></p><h1 id="lua相关开源项目" tabindex="-1">Lua相关开源项目 <a class="header-anchor" href="#lua相关开源项目" aria-label="Permalink to &quot;Lua相关开源项目&quot;">​</a></h1><h2 id="xmake-🔥基于-lua-的跨平台构建实用程序" tabindex="-1">xmake：🔥基于 Lua 的跨平台构建实用程序 <a class="header-anchor" href="#xmake-🔥基于-lua-的跨平台构建实用程序" aria-label="Permalink to &quot;xmake：🔥基于 Lua 的跨平台构建实用程序&quot;">​</a></h2><p>GitHub：<a href="https://github.com/xmake-io/xmake" target="_blank" rel="noreferrer">xmake-io/xmake：🔥基于 Lua 的跨平台构建实用程序 (github.com)</a></p><p>Github： <a href="https://github.com/xmake-io/xmake" target="_blank" rel="noreferrer">https://github.com/xmake-io/xmake</a></p><p>文档站：<a href="https://xmake.io/" target="_blank" rel="noreferrer">https://xmake.io/</a></p><p>一个轻量快速的跨平台 C++ 构建工具</p><p>Xmake 是一个基于 Lua 的轻量级跨平台构建工具。</p><p>它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。</p><p>它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。</p><p>我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。</p><p>目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',19),s=[o];function l(i,p,u,c,d,m){return t(),e("div",null,s)}const b=a(n,[["render",l]]);export{k as __pageData,b as default};
