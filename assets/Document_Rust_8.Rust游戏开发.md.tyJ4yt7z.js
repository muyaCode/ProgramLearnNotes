import{_ as s,c as a,o as n,a3 as p}from"./chunks/framework.zGi9i9Bf.js";const l="/ProgramLearnNotes/assets/640.CplTL8Nc.webp",o="/ProgramLearnNotes/assets/640-1713524944457-1.CiZ3Olao.webp",e="/ProgramLearnNotes/assets/640-1713524944457-2.CCJLeD-c.webp",t="/ProgramLearnNotes/assets/640-1713524944457-3.RLE_Ksa-.webp",m=JSON.parse('{"title":"8.Rust 游戏开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/8.Rust游戏开发.md","filePath":"Document/Rust/8.Rust游戏开发.md","lastUpdated":1717759497000}'),r={name:"Document/Rust/8.Rust游戏开发.md"},c=p('<h1 id="_8-rust-游戏开发" tabindex="-1">8.Rust 游戏开发 <a class="header-anchor" href="#_8-rust-游戏开发" aria-label="Permalink to &quot;8.Rust 游戏开发&quot;">​</a></h1><h2 id="为什么-rust-适用于游戏开发" tabindex="-1">为什么 Rust 适用于游戏开发？ <a class="header-anchor" href="#为什么-rust-适用于游戏开发" aria-label="Permalink to &quot;为什么 Rust 适用于游戏开发？&quot;">​</a></h2><p>Rust 是一种强调内存安全性、高性能和并发性的现代系统编程语言。由于其性能和安全特性，它最近作为一种非常适合游戏开发的语言而受到欢迎。</p><p>由于性能在游戏开发中至关重要，Rust 的所有权和借用机制确保内存得到适当有效的管理。现代游戏必须在各种平台上运行，Rust 的并发特性可以使得代码从多核 cpu 中获益。</p><p>此外，Rust 非常适合创建游戏引擎，即处理游戏基本功能的软件框架，包括用户输入、物理模拟和图形渲染。由于 Rust 的高性能和安全能力，创造快速、有效和可靠的游戏引擎是可行的。</p><p>Rust 用于游戏开发的游戏引擎，有 Amethyst、Bevy 和 ggez 等。随着物理模拟、图像和输入处理等功能的开发，这些引擎将成为游戏开发者构建游戏作品的基础。</p><p>在接下来的几年里，由于 Rust 在游戏开发行业中越来越受欢迎，预计会有更多的游戏和游戏引擎使用 Rust 构建。</p><h3 id="一些使用-rust-进行开发的知名公司" tabindex="-1">一些使用 Rust 进行开发的知名公司： <a class="header-anchor" href="#一些使用-rust-进行开发的知名公司" aria-label="Permalink to &quot;一些使用 Rust 进行开发的知名公司：&quot;">​</a></h3><p>Microsoft：他们正在尝试将 Rust 整合到 C++/C 编程语言中。Rust 出色的内存安全性解决了微软 70%与内存相关的常见漏洞(CVE)。</p><p>Dropbox：Dropbox 的文件同步引擎使用 Rust。Rust 使并发编程测试和调试变得简单，此外，Rust 对静态类型和编译时的大量依赖有助于处理并发代码和复杂的数据库。</p><p>Facebook：Rust 被用来重写 Facebook 的控制后端，以消除 bug 并增强编译器反馈循环。</p><p>Discord：Discord 在客户端和服务器端都使用 Rust。为了扩展，他们将 Exilir 原生函数(NIFs)与 Rust 结合起来。</p><p>Coursera：Rust 用于为学生的编程作业提供动力。学生可以远程创建和执行计算机程序，具有类似于母语的性能。创建一个安全的环境，学生可以在其中运行代码。</p><h3 id="rust-是游戏开发的未来吗" tabindex="-1">Rust 是游戏开发的未来吗？ <a class="header-anchor" href="#rust-是游戏开发的未来吗" aria-label="Permalink to &quot;Rust 是游戏开发的未来吗？&quot;">​</a></h3><p>我们很难预测游戏开发的未来，以及哪种技术将主导它。然而，Rust 是一种很有前途的游戏开发语言，并且在行业中越来越受欢迎。</p><p>Rust 的主要优势之一是它能够在保持内存安全性的同时生成高性能代码。这使得它非常适合开发需要大量处理能力的游戏，如 open-world 游戏或带有复杂物理引擎的游戏。Rust 对并发编程的支持以及与其他语言和平台轻松集成的能力使其成为游戏开发人员的通用选择。</p><p>一些使用 Rust 构建的游戏引擎，如 Amethyst、Bevy 和 Piston，已经在游戏开发社区中获得了关注。这些引擎提供了实体组件系统、现代渲染管道和灵活的脚本语言等功能，可以使游戏开发更快、更高效。</p><p>一般来说，Rust 可以与其他编程语言交互，比如 C 和 C++，它具有一个外部函数接口，可以从 Rust 调用 C 代码。既然我们已经讨论了 Rust 是游戏开发的未来，那么是时候将 Rust 与其他编程语言进行比较了。</p><p>如果你刚刚开始制作游戏，那么 Rust 可能是一个更好的选择。</p><h3 id="以下是-rust-与其他流行游戏开发语言的对比" tabindex="-1">以下是 Rust 与其他流行游戏开发语言的对比： <a class="header-anchor" href="#以下是-rust-与其他流行游戏开发语言的对比" aria-label="Permalink to &quot;以下是 Rust 与其他流行游戏开发语言的对比：&quot;">​</a></h3><p>**Rust vs. C++：**由于高性能和底层控制，C++一直是游戏开发的主导语言。Rust 提供了类似的性能和控制，但增加了安全特性，使其不容易出现与内存相关的 bug 和错误。此外，Rust 的所有权系统可以使编写多线程代码变得更容易。</p><p>**Rust vs. c#：**c#是基于 Unity 引擎进行游戏开发的流行语言。虽然 c#是一种高级的语言，并且由于它的垃圾收集器，可以使代码更容易编写和维护。然而，Rust 的安全特性和内存管理系统使它比 c#更安全，更不容易崩溃，性能更好。</p><p>**Rust vs. Python：**Python 是 Pygame 框架上游戏开发的流行语言，但通常不用于高性能游戏。Rust 提供的性能优势使其适合需要更多处理能力的高性能游戏，Rust 的类型系统和所有权模型可以使编写可维护和可伸缩的代码更容易。</p><p>**Rust vs. Java：**Java 是另一种流行的游戏开发语言，尤其是在 Android 平台上。虽然 Java 在易用性和垃圾收集方面提供了与 c#类似的好处，但 Rust 提供了更好的性能和内存安全特性。此外，Rust 对并发性的支持可以更容易地编写可伸缩和高效的代码。</p><h3 id="你可以用-rust-构建什么类型的游戏" tabindex="-1">你可以用 Rust 构建什么类型的游戏？ <a class="header-anchor" href="#你可以用-rust-构建什么类型的游戏" aria-label="Permalink to &quot;你可以用 Rust 构建什么类型的游戏？&quot;">​</a></h3><p>从简单到复杂的多人游戏，都可以使用 Rust 创建它们。可以考虑的游戏类型包括赛车、解谜、模拟、动作、卡牌、VR、RPG、策略、FPS、Open World 等。</p><p>如果你想为各种平台和主机创建强大的游戏，Rust 目前并不是最好的选择，因为在 Rust 中没有太多可用的资源来创建游戏。此外，很少有强大的游戏引擎支持 Rust 在这个级别的游戏开发。</p><p>大多数主机游戏开发者并不使用 Rust，相反，C++、c#或 Lua 是为几乎所有平台快速创建游戏的理想语言。这些语言拥有丰富的资源，可以用来快速有效地制作游戏。</p><p>虽然用于游戏开发的 Rust 是一种相对较新的语言，但已经有一些著名的游戏是使用 Rust 或基于 Rust 的游戏引擎开发的。</p><h4 id="下面是一些例子" tabindex="-1">下面是一些例子： <a class="header-anchor" href="#下面是一些例子" aria-label="Permalink to &quot;下面是一些例子：&quot;">​</a></h4><h5 id="_1、rust-doom" tabindex="-1">1、Rust Doom <a class="header-anchor" href="#_1、rust-doom" aria-label="Permalink to &quot;1、Rust Doom&quot;">​</a></h5><p>Rust Doom 是一个展示如何使用 Rust 编程语言创造经典第一人称射击游戏 Doom 的 Rust 版本。该项目是由 Rust 游戏开发社区领导的开源项目。</p><p>Rust Doom 的游戏引擎、游戏逻辑和渲染管道都是使用 Rust 编程语言创建的。该项目是在 Doom 源代码的 Rust 端口上构建的，与原始的 C 代码相比，Rust 代码提供了许多优点，例如增强的内存安全性、增强的效率和更简单的代码维护。</p><h5 id="_2、veloren" tabindex="-1">2、Veloren <a class="header-anchor" href="#_2、veloren" aria-label="Permalink to &quot;2、Veloren&quot;">​</a></h5><p>Veloren 是一款完全用 Rust 开发的基于像素的 3D 多人角色扮演游戏(RPG)。你可以寻找宝藏，与野蛮人战斗，探索地下城。这是一款由 Veloren 团队开发的 Open World RPG，使用基于 rust 的游戏引擎 Amethyst。虽然这款游戏仍处于开发阶段，但它正在向玩家提供丰富的沉浸式游戏体验。</p><p>像素引擎不是将模型描述为三角形的集合，而是在 3D 空间中定义点。像素为玩家提供了向电子游戏中添加内容的绝佳机会，它们可以构建令人难以置信的动态环境。最多人玩的基于像素的游戏可能是《我的世界》。</p><h5 id="_3、nox-futura" tabindex="-1">3、Nox Futura <a class="header-anchor" href="#_3、nox-futura" aria-label="Permalink to &quot;3、Nox Futura&quot;">​</a></h5><p>Nox Futura 是一款由 DRAGO Entertainment 使用 Rust 编程语言开发的多人动作游戏。游戏设定在一个反乌托邦的未来，玩家在一个后世界末日的舞台上竞争生存，成为最后一个站着的玩家。</p><p>Rust 用于游戏开发的高性能和高效率，对于像《Nox Futura》这样的快节奏动作游戏至关重要。Rust 的内存安全特性和并发支持确保游戏可靠运行，不会崩溃。</p><h5 id="_4、hematite" tabindex="-1">4、Hematite <a class="header-anchor" href="#_4、hematite" aria-label="Permalink to &quot;4、Hematite&quot;">​</a></h5><p>Hematite 是一款使用 Rust 编程语言开发的基于像素的沙盒游戏。这款游戏仍处于开发的早期阶段，但它已经展示了使用 Rust 进行游戏开发的一些好处。</p><p>使用 Rust 进行游戏开发的主要好处之一是它的性能。Rust 是一种快速高效的系统编程语言，它有几个功能使其非常适合游戏开发。</p><p>以上只是一些使用 Rust 或基于 Rust 的引擎开发的游戏。随着 Rust 在游戏开发社区中越来越受欢迎，我们会看到更多使用这种强大语言开发的游戏。</p><h2 id="用-rust-开发跨平台游戏是怎样的体验" tabindex="-1">用 Rust 开发跨平台游戏是怎样的体验？ <a class="header-anchor" href="#用-rust-开发跨平台游戏是怎样的体验" aria-label="Permalink to &quot;用 Rust 开发跨平台游戏是怎样的体验？&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/92ioV-qG7Co9wFwSkrQC-A" target="_blank" rel="noreferrer">用 Rust 开发跨平台游戏是怎样的体验？ (qq.com)</a></p><h3 id="一、引言" tabindex="-1">一、引言 <a class="header-anchor" href="#一、引言" aria-label="Permalink to &quot;一、引言&quot;">​</a></h3><p>自从童年时代深陷 Warcraft III 的 MOD 魔力之中，我就一直对游戏脚本语言怀有特殊的情感。</p><p>回想那时，使用暴雪开发的 JASS 语言开发魔兽争霸 3 的游戏关卡，尽管从今天的角度看 JASS 是极其简陋的，主要特点为静态类型 + 无 GC 功能，但它在那个尚未形成行业标准的年代，代表了对游戏开发语言的一种大胆尝试。</p><h4 id="为什么要使用脚本语言开发游戏" tabindex="-1">为什么要使用脚本语言开发游戏？ <a class="header-anchor" href="#为什么要使用脚本语言开发游戏" aria-label="Permalink to &quot;为什么要使用脚本语言开发游戏？&quot;">​</a></h4><p>游戏脚本语言的引入主要是为了提高开发测试的便捷性。如果直接使用 C++ 这样的底层语言，每更改一行代码，都可能需要耗费大量时间等待复杂工具链的编译与打包。而通过使用脚本语言，可以对实现游戏玩法的程序进行热加载执行，显著提升游戏的开发效率。</p><p>随着时间的推移，如 Lua 和 JavaScript 这样的动态类型脚本语言已成为游戏开发中的常客。</p><p>然而，随着编程语言的发展，我们有机会重新定义游戏脚本语言的新标准 —— 既复古又革新，这就是 Rust + WASM 的组合。</p><h3 id="二、rust-wasm-dora-ssr-重新定义游戏脚本开发" tabindex="-1">二、Rust + WASM + Dora SSR：重新定义游戏脚本开发 <a class="header-anchor" href="#二、rust-wasm-dora-ssr-重新定义游戏脚本开发" aria-label="Permalink to &quot;二、Rust + WASM + Dora SSR：重新定义游戏脚本开发&quot;">​</a></h3><p>通过结合 Rust 和 WASM，我们可以在不牺牲性能的前提下，直接在例如 Android 或 iOS 设备上进行游戏热更新和测试，且无需依赖传统的应用开发工具链。</p><p>此外，借助 Dora SSR 开源游戏引擎的 Web IDE 接口，使用 Rust 编写的游戏代码可以一次编译后，在多种游戏设备上进行测试和运行。</p><h4 id="为何选择-rust" tabindex="-1">为何选择 Rust？ <a class="header-anchor" href="#为何选择-rust" aria-label="Permalink to &quot;为何选择 Rust？&quot;">​</a></h4><p>Rust 提供了无与伦比的内存安全保证，而且无需垃圾收集器（GC）的介入，这使得它非常适合游戏开发，尤其是在性能敏感的场景下。结合 WASM，Rust 不仅能够提供高性能的执行效率，还能保持跨平台的一致性和安全性。</p><h4 id="快速开始指南" tabindex="-1">快速开始指南 <a class="header-anchor" href="#快速开始指南" aria-label="Permalink to &quot;快速开始指南&quot;">​</a></h4><p>在开始开发之前，我们需要安装 Dora SSR 游戏引擎。该引擎支持多种平台，包括 Windows、Linux、macOS、iOS 和 Android。</p><p>具体的安装步骤和要求，请参见官方快速开始指南：Dora SSR 快速开始 <a href="https://dora-ssr.net/zh-Hans/docs/tutorial/quick-start/%E3%80%82" target="_blank" rel="noreferrer">https://dora-ssr.net/zh-Hans/docs/tutorial/quick-start/。</a></p><p><img src="'+l+'" alt="图片"></p><h5 id="第一步-创建新项目" tabindex="-1">第一步：创建新项目 <a class="header-anchor" href="#第一步-创建新项目" aria-label="Permalink to &quot;第一步：创建新项目&quot;">​</a></h5><p>在 Dora SSR 引擎的二进制程序启动以后，在浏览器中打开 Dora SSR 的 Web IDE，右键点击左侧游戏资源树，选择「新建」并创建名为「Hello」的新文件夹。</p><p><img src="'+o+`" alt="图片"></p><h5 id="第二步-编写游戏代码" tabindex="-1">第二步：编写游戏代码 <a class="header-anchor" href="#第二步-编写游戏代码" aria-label="Permalink to &quot;第二步：编写游戏代码&quot;">​</a></h5><p>然后在命令行中创建一个新的 Rust 项目：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">rustup</span><span style="color:#E06C75;"> target</span><span style="color:#E06C75;"> add</span><span style="color:#E06C75;"> wasm32</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">wasi</span></span>
<span class="line"><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> new</span><span style="color:#E06C75;"> hello</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">dora</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">name</span><span style="color:#E06C75;"> init</span></span>
<span class="line"><span style="color:#E06C75;">cd</span><span style="color:#E06C75;"> hello</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">dora</span></span>
<span class="line"><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> add</span><span style="color:#E06C75;"> dora_ssr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>src/main.rs</code> 中编写代码：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> dora_ssr</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#E06C75;"> main</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> sprite</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> match</span><span style="color:#E5C07B;"> Sprite</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_file</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Image/logo.png&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sprite</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#E06C75;">sprite</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> sprite_clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sprite</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">  sprite</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">schedule</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">once</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> co</span><span style="color:#56B6C2;">|</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;"> in</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">..=</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">rev</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">      p!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">      sleep!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">co</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    p!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello World&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    sprite_clone</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">perform_def</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ActionDef</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sequence</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#61AFEF;">vec!</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#E5C07B;">      ActionDef</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">scale</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">EaseType</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Linear</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">      ActionDef</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">scale</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">EaseType</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">OutBack</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>构建生成 WASM 文件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cargo</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --release</span><span style="color:#D19A66;"> --target</span><span style="color:#98C379;"> wasm32-wasi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第三步-上传并运行游戏" tabindex="-1">第三步：上传并运行游戏 <a class="header-anchor" href="#第三步-上传并运行游戏" aria-label="Permalink to &quot;第三步：上传并运行游戏&quot;">​</a></h4><p>在 Dora SSR Web IDE 中，右键点击新创建的文件夹「Hello」，选择「上传」并上传编译好的 WASM 文件 <code>init.wasm</code>。</p><p><img src="`+e+'" alt="图片"></p><p>或者使用辅助脚本 upload.py 在 Rust 项目文件夹内上传 WASM 文件，命令如下，其中的 IP 参数为 Dora SSR 启动后显示的 Web IDE 地址，后一个参数为要上传目录的相对路径：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">python3</span><span style="color:#98C379;"> upload.py</span><span style="color:#98C379;"> &quot;192.168.3.1&quot;</span><span style="color:#98C379;"> &quot;Hello&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+t+`" alt="图片"></p><h5 id="第四步-发布游戏" tabindex="-1">第四步：发布游戏 <a class="header-anchor" href="#第四步-发布游戏" aria-label="Permalink to &quot;第四步：发布游戏&quot;">​</a></h5><p>在编辑器左侧游戏资源树中，右键点击刚创建的项目文件夹，选择「下载」。</p><p>等待浏览器弹出已打包项目文件的下载提示。</p><h3 id="三、怎么实现的" tabindex="-1">三、怎么实现的 <a class="header-anchor" href="#三、怎么实现的" aria-label="Permalink to &quot;三、怎么实现的&quot;">​</a></h3><p>在 Dora SSR 中实现 Rust 语言开发支持和 WASM 运行时嵌入的过程是一次新的技术探索和尝试，主要包括三个关键步骤：</p><h4 id="_1-接口定义语言-idl-的设计" tabindex="-1">1. 接口定义语言（IDL）的设计 <a class="header-anchor" href="#_1-接口定义语言-idl-的设计" aria-label="Permalink to &quot;1. 接口定义语言（IDL）的设计&quot;">​</a></h4><p>要在 C++ 编写的游戏引擎上嵌入 WASM 运行时并支持 Rust 语言，首先需要设计一种接口定义语言（IDL），以便于不同编程语言之间的通信和数据交换。</p><p>以下是一个 Dora SSR 设计的 WASM IDL 示例，可以看出是以源语言 C++ 的程序接口为基础，增加一些转换到 Rust 接口所需要的信息的标签，比如 object，readonly，optional 等。</p><p>做跨语言的接口映射其中有一个难点是 C++ 的接口设计是面向对象的，但是 Rust 并没有提供完整的面向对象设计的能力，所以一部分的面向对象的接口需要在 Rust 上额外编写代码进行功能的模拟，所幸这部分语言差异并没有特别巨大，也不用很复杂的机制设计就能解决。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">object</span><span style="color:#E06C75;"> class</span><span style="color:#E5C07B;"> EntityGroup</span><span style="color:#ABB2BF;"> @ </span><span style="color:#E5C07B;">Group</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	readonly</span><span style="color:#E06C75;"> common</span><span style="color:#E06C75;"> int</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	optional</span><span style="color:#E06C75;"> readonly</span><span style="color:#E06C75;"> common</span><span style="color:#E5C07B;"> Entity</span><span style="color:#ABB2BF;">* </span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	optional</span><span style="color:#E5C07B;"> Entity</span><span style="color:#ABB2BF;">* </span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">function</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#61AFEF;">bool</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;">* </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">)&gt; </span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#E5C07B;"> EntityGroup</span><span style="color:#ABB2BF;">* </span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">VecStr</span><span style="color:#E06C75;"> components</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-生成胶水代码的程序" tabindex="-1">2.生成胶水代码的程序 <a class="header-anchor" href="#_2-生成胶水代码的程序" aria-label="Permalink to &quot;2.生成胶水代码的程序&quot;">​</a></h4><p>第二步是编写一个程序，通过 IDL 生成 C++、WASM 和 Rust 之间互相调用的胶水代码。</p><p>为了实现这一点，我们选择使用 Dora SSR 项目自创的 Yuescript 语言。Yuescript 是基于 Lua 的一门动态编程语言，它结合了 Lua 语言生态中的 lpeg 语法解析库来处理 IDL 的解析和胶水代码的生成。</p><p>使用 Yuescript 的好处是它继承了 Lua 的灵活性和轻量级，同时提供了更丰富的语法和功能，适合处理复杂的代码生成任务。</p><p>以下是使用 PEG 文法编写的 IDL 解析器的代码节选。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Param</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> P</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">	&quot;Param&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">	Param</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">V</span><span style="color:#98C379;">&quot;Func&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Name</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">mark</span><span style="color:#98C379;">&quot;callback&quot;</span><span style="color:#ABB2BF;"> + </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Name</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">mark</span><span style="color:#98C379;">&quot;variable&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">	Func</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Ct</span><span style="color:#E5C07B;"> P</span><span style="color:#98C379;">&quot;function&lt;&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Ct</span><span style="color:#E5C07B;"> P</span><span style="color:#98C379;">&quot;(&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * (</span><span style="color:#E5C07B;">V</span><span style="color:#98C379;">&quot;Param&quot;</span><span style="color:#ABB2BF;"> * (</span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">V</span><span style="color:#98C379;">&quot;Param&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">^</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">^</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;)&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Docs</span><span style="color:#ABB2BF;"> * </span><span style="color:#61AFEF;">Ct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">MethodLabel</span><span style="color:#ABB2BF;">) * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * (</span><span style="color:#61AFEF;">C</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;operator==&quot;</span><span style="color:#ABB2BF;">) + </span><span style="color:#E5C07B;">Name</span><span style="color:#ABB2BF;">) * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * (</span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;@&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Name</span><span style="color:#ABB2BF;"> + </span><span style="color:#E5C07B;">Cc</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">) * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#61AFEF;">Ct</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;(&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * (</span><span style="color:#E5C07B;">Param</span><span style="color:#ABB2BF;"> * (</span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">Param</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">^</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">^</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;)&quot;</span><span style="color:#ABB2BF;">) * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#61AFEF;">C</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;const&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">^</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">White</span><span style="color:#ABB2BF;"> * </span><span style="color:#E5C07B;">P</span><span style="color:#98C379;">&quot;;&quot;</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">mark</span><span style="color:#98C379;">&quot;method&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_3-嵌入-wasm-运行时和代码整合" tabindex="-1">3. 嵌入 WASM 运行时和代码整合 <a class="header-anchor" href="#_3-嵌入-wasm-运行时和代码整合" aria-label="Permalink to &quot;3. 嵌入 WASM 运行时和代码整合&quot;">​</a></h4><p>最后一步是在游戏引擎中嵌入 WASM 运行时以及所生成的 C++ 胶水代码，完成代码的整合。对于 WASM 运行时，我们选择使用 WASM3，这是一个高性能、轻量级的 WebAssembly 解释器，它支持多种 CPU 架构，能够简化编译链的复杂性，并提高跨平台的兼容性。通过这种方式，Dora SSR 能够支持在各种架构的硬件设备上运行 Rust 开发的游戏，极大地提高了游戏项目的可访问性和灵活性。</p><p>在整合过程中，我们发布了供 Rust 开发者使用的 crate 包，包含所有必要的接口和工具，以便开发者未来可以轻松地基于 Dora SSR 游戏引擎开发和再发布使用 Rust 语言编写的其它游戏模块。</p><h3 id="四、性能比较" tabindex="-1">四、性能比较 <a class="header-anchor" href="#四、性能比较" aria-label="Permalink to &quot;四、性能比较&quot;">​</a></h3><p>Dora SSR 游戏引擎同时也提供了 Lua 脚本语言的支持。目前使用的是 Lua 5.5 版本的虚拟机，和 WASM3 也是一样的没有做 JIT 的实时机器码的生成而只是在虚拟机中解释执行脚本代码。所以我们可以为这两个相近的脚本方案做一些性能比较。</p><p>在比较之前，我们可以大概判断，不考虑 Lua 语言执行 GC 的耗时，因为 Lua 语言本身的动态特性，C++ 映射到 Lua 的程序接口往往得在运行时做接口传入参数类型的实时检查，另外 Lua 对象的成员属性的访问查找也需要在运行时通过一个 hash 结构的表进行查找，这些都是静态类型的 Rust 语言 + WASM 虚拟机不需要付出的开销，或者只用付出更小的开销的场景。</p><p>以下是一些基础的性能测试的案例，专门选取了 C++ 端没有做太多计算处理的接口，来比较跨语言调用传参的性能差异。</p><ul><li>Rust 测试代码</li></ul><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get_elapsed_time</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> _</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_transform_target</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">p!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;object passing time: {} ms&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get_elapsed_time</span><span style="color:#ABB2BF;">() - </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">1000.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get_elapsed_time</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> _</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_x</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">p!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;number passing time: {} ms&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get_elapsed_time</span><span style="color:#ABB2BF;">() - </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">1000.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get_elapsed_time</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> _</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Tag name&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">p!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;string passing time: {} ms&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">get_elapsed_time</span><span style="color:#ABB2BF;">() - </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">1000.0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>Lua 测试代码</li></ul><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">local</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Node</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">local</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Node</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">local</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;">.elapsedTime</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10000</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">.transformTarget </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> node</span></span>
<span class="line"><span style="color:#E06C75;">end</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;object passing time: &quot;</span><span style="color:#ABB2BF;"> .. </span><span style="color:#61AFEF;">tostring</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">.elapsedTime - </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">) .. </span><span style="color:#98C379;">&quot; ms&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;">.elapsedTime</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10000</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E06C75;">end</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;number passing time: &quot;</span><span style="color:#ABB2BF;"> .. </span><span style="color:#61AFEF;">tostring</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">.elapsedTime - </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">) .. </span><span style="color:#98C379;">&quot; ms&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;">.elapsedTime</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10000</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">.tag </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;Tag name&quot;</span></span>
<span class="line"><span style="color:#E06C75;">end</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;string passing time: &quot;</span><span style="color:#ABB2BF;"> .. </span><span style="color:#61AFEF;">tostring</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">.elapsedTime - </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">) * </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">) .. </span><span style="color:#98C379;">&quot; ms&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="运行结果" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果" aria-label="Permalink to &quot;运行结果&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Rust</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> WASM:</span></span>
<span class="line"><span style="color:#61AFEF;">object</span><span style="color:#98C379;"> passing</span><span style="color:#98C379;"> time:</span><span style="color:#D19A66;"> 0.6279945373535156</span><span style="color:#98C379;"> ms</span></span>
<span class="line"><span style="color:#61AFEF;">number</span><span style="color:#98C379;"> passing</span><span style="color:#98C379;"> time:</span><span style="color:#D19A66;"> 0.5879402160644531</span><span style="color:#98C379;"> ms</span></span>
<span class="line"><span style="color:#61AFEF;">string</span><span style="color:#98C379;"> passing</span><span style="color:#98C379;"> time:</span><span style="color:#D19A66;"> 3.543853759765625</span><span style="color:#98C379;"> ms</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Lua:</span></span>
<span class="line"><span style="color:#61AFEF;">object</span><span style="color:#98C379;"> passing</span><span style="color:#98C379;"> time:</span><span style="color:#D19A66;"> 6.7338943481445</span><span style="color:#98C379;"> ms</span></span>
<span class="line"><span style="color:#61AFEF;">number</span><span style="color:#98C379;"> passing</span><span style="color:#98C379;"> time:</span><span style="color:#D19A66;"> 2.687931060791</span><span style="color:#98C379;"> ms</span></span>
<span class="line"><span style="color:#61AFEF;">string</span><span style="color:#98C379;"> passing</span><span style="color:#98C379;"> time:</span><span style="color:#D19A66;"> 4.2259693145752</span><span style="color:#98C379;"> ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可以看出，除了字符串类型的接口传参调用外，在 Dora SSR 中实现的其它类型的接口的 Lua 跨语言调用性能要比 WASM 跨语言调用几乎慢一个数量级。</p><p>字符串类型的接口推断是因为性能消耗大头主要都是在字符串对象的拷贝上，跨语言调用的开销远比内存拷贝的开销小，所以结果差距不大。</p><h3 id="五、用户体验之谈" tabindex="-1">五、用户体验之谈 <a class="header-anchor" href="#五、用户体验之谈" aria-label="Permalink to &quot;五、用户体验之谈&quot;">​</a></h3><p>在游戏开发中引入 Rust 语言，我个人体验到了与传统所不同的生产力提升，特别是在与大型语言模型（如 ChatGPT）进行代码生成辅助方面。与传统的 C 或 C++ 相比，Rust 的严格编译器为游戏开发提供了一个更加稳固和安全的编程环境。</p><p>比如使用大语言模型辅助编码时，在生成 C 或 C++ 甚至很多动态类型的语言时，尽管很多时候生成的代码可以通过编译，但在运行时往往仍隐藏着许多难以察觉的错误和缺陷。这些问题可能包括内存泄漏、指针或是引用误用等等，这些都是游戏开发中常见且难以调试的问题。</p><p>然而，在 Rust 中，许多这类问题都可以在编译阶段被有效捕捉并修正，这得益于 Rust 的所有权和借用机制，以及其在类型安全和内存安全方面的设计优势。</p><p>通过在 Dora SSR 游戏引擎中引入对 Rust 的支持，我发现编写游戏脚本不仅更加安全，也更加高效。这使得游戏开发不再是一个错误排查的过程，而是一个更加专注于创造和实现想象中游戏的过程。</p><p>Rust 的这些优势，加上 WASM 的跨平台能力，极大地扩展了我们的游戏开发能力和可能性。</p><h3 id="六、结语" tabindex="-1">六、结语 <a class="header-anchor" href="#六、结语" aria-label="Permalink to &quot;六、结语&quot;">​</a></h3><p>选择 Dora SSR + Rust 作为游戏开发工具不仅是追求技术的前沿，也是对游戏开发流程的一次新的探索。在这里诚邀每一位热爱游戏开发的朋友加入我们的社区，一同探索这一激动人心的技术旅程。</p><h4 id="作者介绍" tabindex="-1">作者介绍 <a class="header-anchor" href="#作者介绍" aria-label="Permalink to &quot;作者介绍&quot;">​</a></h4><p>李瑾：金融行业大数据工程师，Dora SSR 和 Yuescript 开源软件作者。</p><h4 id="项目介绍" tabindex="-1">项目介绍 <a class="header-anchor" href="#项目介绍" aria-label="Permalink to &quot;项目介绍&quot;">​</a></h4><p>Dora SSR (多萝珍奇引擎)是一个用于多种设备上快速开发 2D 游戏的游戏引擎。它内置易用的开发工具链，支持在手机、开源掌机等设备上直接进行游戏开发。</p><h4 id="项目仓库" tabindex="-1">项目仓库 <a class="header-anchor" href="#项目仓库" aria-label="Permalink to &quot;项目仓库&quot;">​</a></h4><p><a href="https://gitee.com/pig/Dora-SSR" target="_blank" rel="noreferrer">https://gitee.com/pig/Dora-SSR</a></p><p><a href="https://github.com/IppClub/Dora-SSR" target="_blank" rel="noreferrer">https://github.com/IppClub/Dora-SSR</a></p><h1 id="开源简单的rust游戏项目" tabindex="-1">开源简单的Rust游戏项目 <a class="header-anchor" href="#开源简单的rust游戏项目" aria-label="Permalink to &quot;开源简单的Rust游戏项目&quot;">​</a></h1><p><a href="https://github.com/harshvishu/pong" target="_blank" rel="noreferrer">harshvishu/pong：使用 Rust lang 的 Ping 游戏 (github.com)</a></p>`,125),B=[c];function y(i,u,A,C,b,F){return n(),a("div",null,B)}const h=s(r,[["render",y]]);export{m as __pageData,h as default};
