import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const d=JSON.parse('{"title":"第二章 类型和值","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Lua/Lua基础入门/2.类型和值.md","filePath":"Document/Lua/Lua基础入门/2.类型和值.md","lastUpdated":1714572988000}'),p={name:"Document/Lua/Lua基础入门/2.类型和值.md"},o=l(`<h1 id="第二章-类型和值" tabindex="-1">第二章 类型和值 <a class="header-anchor" href="#第二章-类型和值" aria-label="Permalink to &quot;第二章 类型和值&quot;">​</a></h1><p>​ Lua是动态类型语言，语言中不需要类型的声明，每个变量自身携带类型信息（变量类型自声明）。</p><p>Lua中有八种基本类型：</p><ul><li>nil（空）</li><li>boolean（布尔）</li><li>number（数字）</li><li>string（字符串）</li><li>userdata（自定义类型）</li><li>function（函数）</li><li>thread（线程）</li><li>table（表）</li></ul><p>&quot;type&quot;函数可以返回定值或变量的类型。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world&quot;</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; string</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10.4</span><span style="color:#ABB2BF;">*</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; number</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; function</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; function</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; boolean</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">nil</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; nil</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">X</span><span style="color:#ABB2BF;">))) </span><span style="color:#7F848E;font-style:italic;">--&gt; string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​ 最后一行打印的是&quot;string&quot;与&quot;X&quot;没有任何关系，因为&quot;type&quot;的返回值类型永远都是string。</p><p>​ 变量没有预定义的类型，任何变量都可以保存任何类型的值：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; nil (&#39;a&#39; 没有初始化)</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; number（数字）</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;a string!!&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; string （字符串）</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">print</span><span style="color:#7F848E;font-style:italic;"> -- 这样是完全没有问题的！</span></span>
<span class="line"><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">--&gt; function（函数）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​ 注意最后两行：在Lua中，函数跟数字、字符串等一样是可以作为基本类型来进行操作修改的。</p><p>​ 通常把同一个变量赋值不同的类型会导致代码逻辑凌乱，但有时候清晰的使用这种特性也是相当有用。比如，&quot;nil&quot;可以作为正常返回值和不正常返回值的区分标志。</p><h2 id="_1-空值" tabindex="-1">1 空值 <a class="header-anchor" href="#_1-空值" aria-label="Permalink to &quot;1 空值&quot;">​</a></h2><p>​ 空值只有一个值就是&quot;nil&quot;。&quot;nil&quot;的主要用途是与其它类型进行区分。Lua使用&quot;nil&quot;来表示”没有值“这种情况，意味着当前缺少一个有效值。之前提到，一个全局变量在被赋值之前默认值就是&quot;nil&quot;。同样，可以把一个全局变量赋值为&quot;nil&quot;来删除它。</p><h2 id="_2-2-布尔型" tabindex="-1">2.2 布尔型 <a class="header-anchor" href="#_2-2-布尔型" aria-label="Permalink to &quot;2.2 布尔型&quot;">​</a></h2><p>​ 布尔型有两个值，&quot;false&quot;和&quot;true&quot;，它们的意义与传统布尔型一致。但是在Lua中，并不是只能使用布尔型作为条件值，其它类型同样可以。在条件测试中（比如在if之类的控制结构中）布尔类型的&quot;false&quot;和&quot;nil&quot;都被认为是测试失败，其它值被认为是测试成功。特别需要注意的是，在Lua的条件测试中，数字0和空字符串都被认为是测试成功。</p><p>​ 贯穿全书，&quot;false&quot;意味着所有代表&quot;失败&quot;的值，包括&quot;false &quot;和&quot;nil&quot;，如果想要单单强调布尔值，将会使用&quot;false &quot;；对于&quot;true&quot;和&quot;true t &quot;也做同样处理。</p><h2 id="_2-3-数字" tabindex="-1">2.3 数字 <a class="header-anchor" href="#_2-3-数字" aria-label="Permalink to &quot;2.3 数字&quot;">​</a></h2><p>​ Lua中没有整数类型，只要是数字就代表实数（双精度浮点型）。</p><p>​ 有人担心使用浮点会导致简单的递增或者比较都会出现偏差，但其实并非如此。事实上如今所有平台对于浮点运算的处理都遵循IEEE 754规范。根据这个规范，只有当数字在计算机中无法被准确表示的时候才有可能导致错误。某种操作只有在结果无法被准确表示的时候才会对结果进行修正，任何操作只要结果可以被准确表示，那么就必须真实的返回该结果。</p><p>​ 实际上用双精度浮点来表示整数，其最大值可以到2 53（近似10 16），在次之前的所有数都可以被准确的表示出来。当用双精度浮点来表示整数的时候，根本就不用担心修正错误，除非这个整数的绝对值大于2 53。需要指出的是，Lua中的数字可以准确的表示所有32位长的整形。</p><p>​ 当然，携带无穷位数小数部分的数字在用计算机进行计算时会出现精度错误，这种情况在用笔和纸进行运算的时候同样会出现。假设在纸上用小数来表示出1/7，我们必须取小数点后的某几位而不可能将它全部写出来。假设取10位精度，那么1/7就会被修正成0.142857142。如果用十位精度计算1/7*7，结果将是0.999999994，而不是1。此外，在十进制中可以用有限位数表示出来的数在二进制中有可能是无穷的：比如通过计算机的双精度计算12.7-20+7.3，结果并不是0，因为12.7和7.3无法使用有限位数的二进制来表示出来（详情参考练习2.3）。</p><p>​ 在继续学习下去前请牢记：整数一定可以被计算机准确的表示出来，并且不会出现修正错误。</p><p>​ 现代的大多数CPU处理浮点运算的速度同处理整数运算的速度相同，甚至更快。然而我们也可以重新编译Lua使它用其它类型来代表数字类型，比如长整形或单精度浮点，这在没有硬件级浮点运算支持的平台上很有用，比如嵌入式系统。可以阅读&quot;luaconf.h&quot;文件获取更多详情。</p><p>​ 可以使用科学计数法来表示一个数字常量，下面是一些合法的数字常量表示：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">4</span><span style="color:#D19A66;">  0.4</span><span style="color:#98C379;">  4.57e-3</span><span style="color:#98C379;">  0.3e12</span><span style="color:#98C379;">  5E+20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 除此之外，在数字前加&quot;0x&quot;前缀就可以直接表示十六进制常量。Lua5.2之后，十六进制常量可以有小数部分和指数（用&quot;p&quot;或者&quot;P&quot;作为前缀），比如下面的例子：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">0xff(255</span><span style="color:#ABB2BF;">) 0x1A3(</span><span style="color:#61AFEF;">419</span><span style="color:#ABB2BF;">) 0x0.2(</span><span style="color:#61AFEF;">0x125</span><span style="color:#ABB2BF;">) 0x1p-1(</span><span style="color:#61AFEF;">0.5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">0xa.bp2(42.75</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>（括号中的值是该十六进制数的十进制表达形式）</p><h2 id="_2-4-字符串" tabindex="-1">2.4 字符串 <a class="header-anchor" href="#_2-4-字符串" aria-label="Permalink to &quot;2.4 字符串&quot;">​</a></h2><p>​ Lua中的字符串概念通常表示连续的字符。Lua中的字符串完全是八位编码，其中可以包含任何数字编码，包括非字符串尾的0（在其它语言中，0往往只表示字符串的结尾，但Lua中不是这样）。这意味着可以把二进制数据存到一个字符串中，也可以把Unicode字符串用任何形式保存（UTF-8，UTF-16等），Lua自带的标准字符串库对这些表现形式没有做明确的支持。总是如此，在21.7节将会讨论到，使用UTF-8处理字符串更加合理。</p><p>​ Lua中的字符串值是不可变的，这意味着无法像在类似C语言中直接修改字符串中的某一个字符。作为Lua中的解决方案，对字符串内容进行修改的方法就是造一个新的字符串，就像下面的例子那样：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;one string&quot;</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">string.gsub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;another&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 修改字符串的部分内容</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; one string</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; another string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​ Lua中的字符串同Lua中的其它对象一样（表、函数等），托管于自动内存管理，这意味着不需要费心于字符串内存空间的申请和释放，Lua把这一切都处理好了。字符串可以仅仅包含一个字符，也可以包含一整本书，在Lua中编程操作包含十万甚至百万字符的字符串也是很常见的。</p><p>​ 可以在字符串前加&quot;#&quot;前缀（被称作长度运算符）来获取字符串的长度：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(#</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 5</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(#</span><span style="color:#98C379;">&quot;good</span><span style="color:#56B6C2;">\\0</span><span style="color:#98C379;">bye&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="字面字符串" tabindex="-1">字面字符串 <a class="header-anchor" href="#字面字符串" aria-label="Permalink to &quot;字面字符串&quot;">​</a></h3><p>可以使用单引号或者双引号来为一个字面字符串赋值：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;a line&quot;</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&#39;another line&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 这两种方式是等价的，唯一的不同就是在每种引号的内部都可以使用另一种引号，而不需要转义。</p><p>​ 作为编程风格的统一要求，大多数程序员在同一个工程中都会使用单一类型的引号，而&quot;类型&quot;是应该取决于工程自身的内容的。比如一个处理XML的库可能就会使用单引号来引用一个XML文档结构，因为在XML文档结构中常常会包含双引号。</p><p>​ Lua中的字符串也具有跟C类似的转义字符：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">\\a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">蜂鸣</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">退格</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">换页</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">换行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\r</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">回车</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\t</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">水平tab</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">垂直tab</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\\\</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">反斜杠</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\</span><span style="color:#61AFEF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">双引号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">\\&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">单引号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>下面的例子可以阐述它们的使用方法：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;one line</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">next line</span><span style="color:#56B6C2;">\\n\\&quot;</span><span style="color:#98C379;">in quotes</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">, &#39;in quotes&#39;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">one</span><span style="color:#E06C75;"> line</span></span>
<span class="line"><span style="color:#56B6C2;">next</span><span style="color:#E06C75;"> line</span></span>
<span class="line"><span style="color:#98C379;">&quot;in quotes&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&#39;in quotes&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a backslash inside quotes: </span><span style="color:#56B6C2;">\\&#39;\\\\\\&#39;</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#E06C75;"> backslash</span><span style="color:#E06C75;"> inside</span><span style="color:#E5C07B;"> quotes</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a simpler way: &#39;</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">&#39;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#E06C75;"> simpler</span><span style="color:#E5C07B;"> way</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 可以使用十进制或十六进制的ASCII码来定义字符串中的字符，方法是&quot;&quot;后面跟三位数的十进制ASCII码或者&quot;\\x&quot;后面跟两位数的十六进制ASCII码。举一个稍微复杂的例子，下面的三个字符串具有相同的值：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;alo</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">123</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\97</span><span style="color:#98C379;">lo</span><span style="color:#56B6C2;">\\10\\049</span><span style="color:#98C379;">23&quot;&#39;</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\x61\\x6c\\x6f\\x0a\\x31\\x32\\x33\\x22</span><span style="color:#98C379;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 在b的赋值中，必须用&quot;049&quot;来表示字符&quot;1&quot;，而不能将&quot;0&quot;省略。因为如果省略掉，Lua会按照&quot;\\492&quot;、&quot;\\003&quot;进行拆分解析，从而引发错误。</p><h3 id="长字符串" tabindex="-1">长字符串 <a class="header-anchor" href="#长字符串" aria-label="Permalink to &quot;长字符串&quot;">​</a></h3><p>​ 可以用被双方括号（[[，]]）括起来的文本给一个字符串赋值，用法跟注释很相似。括起来的内容可以包含多行，并且不会解释其中的转义字符。此外，如果文本中的第一个字符是换行符，还会被忽略。这种机制使得将包含多行的文本赋值给字符串非常方便，就像下面的例子：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">[[</span></span>
<span class="line"><span style="color:#98C379;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;">	&lt;title&gt;An HTML Page&lt;/title&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;a href=&quot;http://www.lua.org&quot;&gt;Lua&lt;/a&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#98C379;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>有时候文本内容是一段代码，而代码中可能会出现像a=b[c[i]]（注意代码中的]]）嵌套的情况；或者有时候文本内容是一段包含注释（使用 [[ 和 ]] 进行注释）的代码。为了应对这些情况，可以在两个方括号中添加任意数量的等号，比如&quot;[===[&quot;。这样修改右方括号之后，直到遇到另一个包含同样数量等号的左方括号才会认为是文本的终止（对应前面的例子应该是&quot;]===]&quot;）。Lua会忽略掉包含等号数目不同的方括号对。通过选择合理数量的等号标志，就可以无需使用转义字符而嵌套字面字符串。</p><p>​ 在处理注释的时候，这个技巧同样适用：比如可以在一个以&quot;--[=[&quot;作为起始、&quot;]=]&quot;作为结尾的长注释中嵌套包含注释的代码内容。</p><p>​ 使用长字符串在代码中插入文本内容是完美的方式，但依旧不建议在代码中将长字符串用于非文本内容使用：某些文本编辑器可能会处理出错；甚至在读取的时候，行尾结束标志&quot;\\r\\n&quot;会被换成&quot;\\n&quot;。在代码中插入任意非文本内容的替代方案是使用数字转义，十进制或十六进制的均可，比如&quot;\\x13\\x01\\xA1\\xBB&quot;。但这再次引入一个问题：当内容较多时，全部写到一行中实在是太长了！</p><p>​ Lua5.2中引入一个新的转义字符&quot;\\z&quot;来应对这种情况：它会跳过它和它之后的所有的空字符（比如换行、Tab、空格等）。下面的例子就是该转义字符的用法：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\z</span></span>
<span class="line"><span style="color:#56B6C2;">\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\\x0F</span><span style="color:#98C379;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 结尾的&quot;\\z&quot;跳过了紧跟其后的换行和下一行的缩进，因此data字符串的最终内容是&quot;0x07&quot;之后紧跟的&quot;0x08&quot;。</p><h2 id="强制转换" tabindex="-1">强制转换 <a class="header-anchor" href="#强制转换" aria-label="Permalink to &quot;强制转换&quot;">​</a></h2><p>​ Lua提供了一套运行时自动转换字符串和数字的机制，任何算术运算中如果包含字符串，都会尝试将该</p><p>字符串转化为数字：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;10&quot; </span><span style="color:#ABB2BF;">+ </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 11</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;10 + 1&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10 + 1</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;-5.3e-10&quot;</span><span style="color:#ABB2BF;">*</span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; -1.06e-09</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot; </span><span style="color:#ABB2BF;">+ </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">-- 错误(无法将&quot;hello&quot;转化为数字)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​ Lua不仅在算术运算符中会启用字符串到数字的强制转换，在一些其它期望得到数字的地方同样会触发该机制，比如字符串作为函数&quot;math.sin&quot;的参数。</p><p>​ 与此相反，当Lua期望得到字符串却得到数字的时候，它会将数字转换成字符串：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> .. </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; 1020</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（&quot;..&quot;是字符串连接符，当它紧跟随在一个数字后面的时候，必须使用空格将它与数字分隔开，否则Lua会认为第一个&quot;.&quot;是小数点）</p><p>​ 到目前为止我们无法断定在Lua中启用自动强制转换是否是一个好想法 ，但作为忠告，最好不要依赖这种机制。少数地方它的确能够提供便利，但同样它也会增加Lua语言本身和编程过程的复杂度。尽管有自动转换，但字符串和数字本质上依旧是截然不同的东西。类似10==&quot;10&quot;这样的比较会返回false，因为10是一个数字，而&quot;10&quot;是一个字符串。</p><p>​ 如果想将字符串显式转换成数字，可以使用函数&quot;tonumber&quot;，这个函数在字符串无法转换成数字的时候返回&quot;nil&quot;：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">-- 从输入中读取字符串</span></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> = </span><span style="color:#56B6C2;">tonumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">-- 尝试转化成数字</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;"> == </span><span style="color:#D19A66;">nil</span><span style="color:#C678DD;"> then</span></span>
<span class="line"><span style="color:#56B6C2;">	error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;"> .. </span><span style="color:#98C379;">&quot; is not a valid number.&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">	print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">*</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果想将数字转化成字符串，可以使用函数&quot;tostring&quot;，或者将数字与一个空字符串连接：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">tostring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) == </span><span style="color:#98C379;">&quot;10&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; true</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> .. </span><span style="color:#98C379;">&quot;&quot; </span><span style="color:#ABB2BF;">== </span><span style="color:#98C379;">&quot;10&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">--&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这些转换总是合法的。</p><h2 id="_5-表" tabindex="-1">5 表 <a class="header-anchor" href="#_5-表" aria-label="Permalink to &quot;5 表&quot;">​</a></h2><p>​ Lua中的&quot;表&quot;本质是一个&quot;字典&quot;的实现。&quot;字典&quot;是一个数组，但它不仅仅可以像普通数组那样通过数字进行索引，还可以通过字符串或者其它任何Lua中的类型进行索引，除了nil。</p><p>​ 表是Lua中主要的（实际上也是唯一的）数据组织机制，功能十分强大。它使得我们可以通过简单、统一并且有效的方式去表示普通的数组、集合、记录和其它数据结构，Lua同样使用&quot;表&quot;来表示包和对象。从程序员的角度看，&quot;io.read&quot;意味着&quot;io&quot;模块的&quot;read&quot;方法，但在Lua看来，这个表达意味着从表&quot;io&quot;中用&quot;read&quot;键去查找其对应的值（此处值的类型是函数）。</p><p>​ Lua中的表既不是变量也不是值，它们是&quot;对象&quot;。对Java或者Scheme中&quot;数组&quot;概念熟悉的人会清晰的理解我要表达的意思。可以把一个表想象成一个对象的实例，程序操作的是它的引用（或者说指针）。Lua永远不会隐式的复制或者创建一个表，并且Lua中也不需要刻意声明一个表——实际上也没有方法供我们声明。通过使用构造器来创建一个表，最简单的形式就是用&quot;{}&quot;。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {} </span><span style="color:#7F848E;font-style:italic;">-- 创建一个表，并将它的引用保存在a中</span></span>
<span class="line"><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;x&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">10</span><span style="color:#7F848E;font-style:italic;"> -- 添加新的条目，键名为&quot;x&quot;，键值为10</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;great&quot; </span><span style="color:#7F848E;font-style:italic;">-- 添加新的条目，键名为20 ，键值为&quot;great&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10</span></span>
<span class="line"><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">20</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; &quot;great&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">] + </span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> -- 键&quot;x&quot;的值+1</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 11</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>表都是匿名的，指向表的变量和表自身没有任何绑定关系：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">a</span><span style="color:#7F848E;font-style:italic;"> -- b和a是同一个表的引用</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">20</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 20</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">nil</span><span style="color:#7F848E;font-style:italic;"> -- 只有b还指向该表</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">nil</span><span style="color:#7F848E;font-style:italic;"> -- 该表没有被任何变量引用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>​ 在程序中，当一个表失去了所有的引用，Lua的垃圾回收器便会自动删除这个表并回收它所使用的资源。</p><p>​ 每个表都可以保存各种各样的值，这些值可以有不同类型的索引，表会随着条目的增加调整自身的大小。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {} </span><span style="color:#7F848E;font-style:italic;">-- 空表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">-- 创建1000个新的条目</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1000</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] = </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">*</span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 18</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;y&quot;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; nil</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 注意最后一行：跟全局变量类似，对表中未初始化的键取值，结果是nil。同样跟全局变量类似，可以把表中的某个键赋值为nil来删除它（注意&quot;删除&quot;这个字眼）。这并不是巧合，实际上Lua把全局变量保存在一个普通的表中。在第14章我们将会讨论相关内容。</p><p>​ 想要访问表中键必须使用&quot;索引&quot;，除了按照a.[&quot;name&quot;]的方式使用索引，Lua还支持a.name的形式（这种替代方式称为&quot;语法糖&quot;）。因此，上面例子的最后几行可以用更加清晰、人性化的形式来表达：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.x = </span><span style="color:#D19A66;">10</span><span style="color:#7F848E;font-style:italic;"> -- 等价于 a[&quot;x&quot;] = 10</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.x) </span><span style="color:#7F848E;font-style:italic;">-- 等价于 print(a[&quot;x&quot;])</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.y) </span><span style="color:#7F848E;font-style:italic;">-- 等价于 print(a[&quot;y&quot;])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 在Lua中，这两种形式完全等价，可以自由混搭使用。但作为代码的阅读&quot;人&quot;，代码中出现这两种形式往往代表不同的意味：使用&quot;.&quot;的形式访问表意味着表中已经存在多个固定的、预定义的键，表起到的作用是一个记录；使用另一种方式意味着表可以使用任何字符串作为键名对键值进行索引，并且因为某种原因正在操作当前键。</p><p>​ 初学者非常容易犯的一个错误是混淆a.x和a[x]。第一个形式表示a[&quot;x&quot;]，也就是说使用字符串&quot;x&quot;对表进行索引；第二个形式表示使用变量x的值对表进行索引，通过下面的例子可以看一下不同：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {} </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;y&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">] = </span><span style="color:#D19A66;">10</span><span style="color:#7F848E;font-style:italic;"> -- 将a[&quot;y&quot;]赋值为10</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10 -- a[&quot;y&quot;]的值</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.x) </span><span style="color:#7F848E;font-style:italic;">--&gt; nil -- a[&quot;x&quot;]未定义</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.y) </span><span style="color:#7F848E;font-style:italic;">--&gt; 10 -- a[&quot;y&quot;]的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以把表中所有值的索引全部设置为整数来模拟传统的数组或列表：在任何时候都没有一种方法也没有必要提前定义表的大小，只要按照需求初始化表中的元素就可以了。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">-- 从标准输入中读取10行并存储到表中</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] = </span><span style="color:#56B6C2;">io.read</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 表可以使用任何类型的值作为索引，只要愿意，可以使用任何整数作为一个（表模拟的）数组的起始。在Lua中，普遍的做法是将&quot;1&quot;（不是&quot;0&quot;，这点跟C语言等不同）作为起始，并且有一些机制依赖这儿约定。</p><p>​ 通常在操作列表之前，必须知道它的长度。它可能是一个固定的常量，也可能被保存在某个地方。我们习惯性的把列表的长度保存在一个非数字索引的位置，由于历史原因，一些程序使用键名&quot;n&quot;来存储。</p><p>​ 但多数时候长度是隐式的，在这种时候，可以使用&quot;nil&quot;值作为列表结尾的标志，因为对表中任何未初始化的位置进行索引结果都是nil。比如，当把10行内容读入到一个列表中的时候，很容易就知道这个列表的长度是10，因为它每个键名都是数字&quot;1，2，……，10&quot;，这一点只有列表中没有&quot;洞&quot;的时候才有效：所谓&quot;有洞&quot;的意思是指在列表的两个非连续索引之间存在值为nil的索引。我们把没有洞的列表称作序列。</p><p>​ Lua对序列提供了长度操作符&quot;#&quot;，它返回一个序列的最后索引值或者叫&quot;长度&quot;。比如，可以把上面例子中序列的内容全部打印出来：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">--打印a的内容</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, #</span><span style="color:#E06C75;">a</span><span style="color:#C678DD;"> do</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#C678DD;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​ 因为可以用任何值来对表进行索引，所以在使用&quot;看起来相同&quot;的值索引表的时候，结果却会产生差异。比如0和字符串&quot;0&quot;均可以作为表的索引，但这两个值是不同的，它们完全指向表中不同的位置。同样的，字符串&quot;+1&quot;，&quot;01&quot;，&quot;1&quot;也代表不同的位置。所以，在不确定索引的具体类型的时候，必须要用显示转换来明确它：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> = </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;10&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;+10&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;one value&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;another value&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">] = </span><span style="color:#98C379;">&quot;yet another value&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; one value</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; another value</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">--&gt; yet another value</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">tonumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">)]) </span><span style="color:#7F848E;font-style:italic;">--&gt; one value</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">tonumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">)]) </span><span style="color:#7F848E;font-style:italic;">--&gt; one value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>对这一点如果不保持警惕的话，那么就可能在程序中引入难以察觉的缺陷。</p><h2 id="_2-6-函数" tabindex="-1">2.6 函数 <a class="header-anchor" href="#_2-6-函数" aria-label="Permalink to &quot;2.6 函数&quot;">​</a></h2><p>​ 在Lua中，函数属于&quot;第一类型&quot;：程序可以把函数保存到一个变量中，可以把函数作为参数传给另一个函数，也可以把函数作为返回值。这个设定能够给程序增加极大的灵活性：程序可以重载函数添加新的功能；或者为了营造一个安全的环境来运行不信任的代码（比如这个代码来源于互联网），仅仅只需要清除某个函数。此外，Lua为函数式编程也提供了良好的支持，比如在语法域允许的范围内进行函数嵌套使用。</p><p>第六章将会对有关&quot;函数&quot;的其它内容做一个详细说明。总而言之，将函数归于&quot;第一类型&quot;在Lua实现面向对象编程的过程中起到了关键作用。</p><h2 id="_2-7-自定义类型和线程" tabindex="-1">2.7 自定义类型和线程 <a class="header-anchor" href="#_2-7-自定义类型和线程" aria-label="Permalink to &quot;2.7 自定义类型和线程&quot;">​</a></h2><p>自定义类型允许将任意C语言数据存储到Lua变量中，但Lua对这种类型除了赋值和相等性校验，再没有其它预定义的操作。用户数据用于表示一个用C写的程序或库创建出来的新类型，例如标准I/O库就是使用该类型来表示打开的文件。稍后将在CAPI部分详细讨论自定义类型。第九章会解释线程类型，其中将会讨论协程。</p><h3 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h3><p><strong>练习2.1</strong>：表达式type(nil)==nill的结果是什么（可以在Lua中验证结果）？对于这个结果该如何解释？</p><p><strong>练习2.2</strong>：下面哪一个是可用的数字？他们的值分别是多少？</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">.0e12</span><span style="color:#98C379;"> .e12</span><span style="color:#98C379;"> 0.0e</span><span style="color:#D19A66;"> 0x12</span><span style="color:#98C379;"> 0xABFG</span><span style="color:#D19A66;"> 0xA</span><span style="color:#98C379;"> FFFF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">0xFFFFFFFF</span><span style="color:#98C379;"> 0x</span><span style="color:#98C379;"> 0x1P10</span><span style="color:#98C379;"> 0.1e1</span><span style="color:#98C379;"> 0x0.1p1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>练习2.3</strong>：小数12.7等于分数127/10，分母为10；加入分母规定为2，可以把它表示成一个正常的分数吗？5.5呢？</p><p><strong>练习2.4</strong>：在Lua中，如何作为字符串嵌入下面的内容？使用最少两种方法。</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;![</span><span style="color:#E06C75;">CDATA</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#E06C75;">Hello</span><span style="color:#E06C75;"> world</span></span>
<span class="line"><span style="color:#ABB2BF;">]]&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>练习2.5</strong>：在综合考虑可读性、单行最大长度和性能的情况下，怎么样把包含任意内容的二进制数据作为字面字符串嵌入到Lua中？</p><p><strong>练习2.6</strong>：假设有如下代码：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">={}; </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.a=</span><span style="color:#E06C75;">a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>a.a.a.a的值是多少？其中的每个a与其它的a有什么不同？如果在上面的代码中加入下面一行：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.a.a.a=</span><span style="color:#D19A66;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么现在,a.a.a.a的值是多少？</p>`,114),e=[o];function t(r,c,i,u,y,B){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
