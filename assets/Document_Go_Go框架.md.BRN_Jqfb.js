import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const e="/ProgramLearnNotes/assets/640.Dy4MCxAk.gif",y=JSON.parse('{"title":"Go框架","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Go/Go框架.md","filePath":"Document/Go/Go框架.md","lastUpdated":1716715863000}'),o={name:"Document/Go/Go框架.md"},t=l(`<h1 id="go框架" tabindex="-1">Go框架 <a class="header-anchor" href="#go框架" aria-label="Permalink to &quot;Go框架&quot;">​</a></h1><h1 id="gui框架" tabindex="-1">GUI框架 <a class="header-anchor" href="#gui框架" aria-label="Permalink to &quot;GUI框架&quot;">​</a></h1><h2 id="gio-用go语言编写跨平台即时模式gui的库" tabindex="-1">Gio：用Go语言编写跨平台即时模式GUI的库 <a class="header-anchor" href="#gio-用go语言编写跨平台即时模式gui的库" aria-label="Permalink to &quot;Gio：用Go语言编写跨平台即时模式GUI的库&quot;">​</a></h2><p>GitHub：<a href="https://github.com/gioui/gio" target="_blank" rel="noreferrer">https://github.com/gioui/gio</a></p><p>在构建现代应用程序的过程中，不同平台间的兼容性是一个不容忽视的挑战。Go Gio 是一个用 Go 编程语言开发的库，它致力于简化跨平台 GUI(Graphical User Interface，图形用户界面)的构建工作，提供一种所谓的 &quot;即时&quot; (Immediate Mode) 编程模型。这种模型与传统的 &quot;保留模式&quot; (Retained Mode) GUI库，例如 GTK+ 或 Qt，有所不同。在即时模式中，界面的状态不是由库保留，而是每一帧都由应用程序重新构建。</p><p>Go Gio 支持的平台包括 Linux, macOS, Windows, Android, iOS, FreeBSD, OpenBSD 和 WebAssembly，几乎涵盖了所有主要的操作系统和运行环境。这使得使用 Go Gio 的开发人员可以编写一次代码，然后在多个平台上运行，而无需考虑各个平台的特定实现。</p><h3 id="go-gio-核心特性" tabindex="-1">Go Gio 核心特性 <a class="header-anchor" href="#go-gio-核心特性" aria-label="Permalink to &quot;Go Gio 核心特性&quot;">​</a></h3><ul><li><strong>跨平台</strong>：Gio 通过提供统一的API和顺畅的兼容性，实现了真正的跨平台GUI开发。</li><li><strong>即时模式GUI设计</strong>：Gio采用即时模式设计，每次重新绘制UI而非保留状态，从而简化了状态管理。</li><li><strong>硬件加速渲染</strong>：利用现代硬件的特性进行加速渲染，提升性能和流畅度。</li><li><strong>声明式API</strong>：Gio 的API倾向于声明式，使得界面开发直观和模块化。</li></ul><h3 id="使用-go-gio-构建一个简单的窗口" tabindex="-1">使用 Go Gio 构建一个简单的窗口 <a class="header-anchor" href="#使用-go-gio-构建一个简单的窗口" aria-label="Permalink to &quot;使用 Go Gio 构建一个简单的窗口&quot;">​</a></h3><p>在开始使用 Gio 之前，需要先安装 Go 语言环境，然后使用 Go的包管理工具<code>go get</code>来安装 Gio。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>go get gioui.org</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以下是一个使用 Go Gio 创建窗口的基本例子：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#98C379;">    &quot;gioui.org/app&quot;</span></span>
<span class="line"><span style="color:#98C379;">    &quot;gioui.org/io/system&quot;</span></span>
<span class="line"><span style="color:#98C379;">    &quot;gioui.org/layout&quot;</span></span>
<span class="line"><span style="color:#98C379;">    &quot;gioui.org/op&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">func</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    go</span><span style="color:#C678DD;"> func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建新窗口</span></span>
<span class="line"><span style="color:#E06C75;">        w</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">NewWindow</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> ops</span><span style="color:#E5C07B;"> op</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Ops</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> e</span><span style="color:#E5C07B;"> :=</span><span style="color:#C678DD;"> range</span><span style="color:#E06C75;"> w</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Events</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            switch</span><span style="color:#E06C75;"> e</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">.(</span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            case</span><span style="color:#E5C07B;"> system</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">DestroyEvent</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 窗口被销毁</span></span>
<span class="line"><span style="color:#C678DD;">                return</span></span>
<span class="line"><span style="color:#C678DD;">            case</span><span style="color:#E5C07B;"> system</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">FrameEvent</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">                gtx</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> layout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">NewContext</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">ops</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 在这里绘制 UI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Frame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">gtx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Ops</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }()</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在上述代码中，我们首先调用 <code>app.NewWindow</code> 创建一个新的窗口。Gio 会为每个窗口事件（如FrameEvent用于绘制UI，DestroyEvent用于窗口关闭）提供事件循环，我们通过 <code>w.Events()</code> 范围循环来处理它们。<code>system.FrameEvent</code> 事件允许我们绘制或更新GUI，而 <code>system.DestroyEvent</code> 则用于清理资源并关闭窗口。</p><h3 id="编写跨平台的gui" tabindex="-1">编写跨平台的GUI <a class="header-anchor" href="#编写跨平台的gui" aria-label="Permalink to &quot;编写跨平台的GUI&quot;">​</a></h3><p>借助 Go Gio，我们可以创建各种跨平台的 GUI 应用。每个应用都可以被编译成相应平台的可执行文件。例如，如果要构建面向 MacOS、Windows 和 Linux 的GUI应用，我们可以分别在各自的环境中编译代码，Gio 会处理底层的差异，确保每个平台都能够提供一致的用户体验。</p><p>可以探索 Gio 的 例子 来深入了解如何构建实际的GUI应用程序。</p><h3 id="总结与扩展" tabindex="-1">总结与扩展 <a class="header-anchor" href="#总结与扩展" aria-label="Permalink to &quot;总结与扩展&quot;">​</a></h3><p>Go Gio 证实了 Go 语言在现代GUI开发中的潜力。借助其跨平台性和即时模式的特性，开发者可以高效地创建美观、响应迅速的GUI应用，而且无需担心不同平台间的差异。Gio 继续成熟的同时，它可能会成为越来越多Go开发者的首选UI库。</p><h2 id="spot-用于-go-语言的类似-react-的桌面-gui-工具包" tabindex="-1"><strong>Spot</strong>：用于 Go 语言的类似 React 的桌面 GUI 工具包 <a class="header-anchor" href="#spot-用于-go-语言的类似-react-的桌面-gui-工具包" aria-label="Permalink to &quot;**Spot**：用于 Go 语言的类似 React 的桌面 GUI 工具包&quot;">​</a></h2><p><strong><img src="`+e+`" alt="图片"></strong></p><h3 id="spot-框架简介" tabindex="-1">Spot 框架简介： <a class="header-anchor" href="#spot-框架简介" aria-label="Permalink to &quot;Spot 框架简介：&quot;">​</a></h3><blockquote><p>Spot 是一个简单易用的跨平台 GUI 工具包，专为 Go 语言设计。它利用原生控件，提供一致的 API，让开发者能够专注于业务逻辑，而不必深陷 UI 细节。</p></blockquote><h4 id="核心特性" tabindex="-1">核心特性： <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性：&quot;">​</a></h4><ul><li><strong>简单性</strong>：你可以将 Spot 作为一个简单的依赖项添加到你的项目中，并立即开始构建你的 UI。无需使用额外的工具或代码生成步骤。只需编写 Go 代码，即可获得一个自包含的原生 GUI 应用程序。</li><li><strong>跨平台</strong>：Spot 在可用时使用原生控件，并在编译时自动选择你正在运行的平台的最佳后端。目前，提供了两种后端实现：一个基于<strong>FLTK</strong>[1]的<strong>go-fltk</strong>[2]和一个基于 Cocoa 的<strong>a modified version of</strong>[3] <strong>gocoa</strong>[4]。</li><li><strong>响应性</strong>：当应用程序的状态发生变化时，Spot 会自动更新 UI。你只需提供无副作用的渲染函数，并使用**<code>UseState</code>**[5]钩子管理应用程序的状态。</li><li><strong>广泛的控件支持</strong>：Spot 开箱即提供广泛的 UI 控件，包括按钮、标签、文本输入、滑块、下拉菜单等。查看完整列表：<strong>支持的 UI 控件列表</strong>[6]。</li></ul><h4 id="spot-框架的工作原理" tabindex="-1">Spot 框架的工作原理： <a class="header-anchor" href="#spot-框架的工作原理" aria-label="Permalink to &quot;Spot 框架的工作原理：&quot;">​</a></h4><p>Spot 框架的工作原理类似于 React，它通过创建不可变的组件树，并在状态改变时重新构建，快速比较前后状态，以确定需要更新的 UI 控件。</p><h3 id="如何使用-spot" tabindex="-1">如何使用 Spot： <a class="header-anchor" href="#如何使用-spot" aria-label="Permalink to &quot;如何使用 Spot：&quot;">​</a></h3><p>使用 Spot 非常简单，你只需要编写 Go 代码，Spot 会帮你生成一个自包含的二进制文件。Spot 还支持自定义钩子和组件，让你能够构建复杂的用户界面。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#98C379;"> &quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;"> &quot;github.com/roblillack/spot&quot;</span></span>
<span class="line"><span style="color:#98C379;"> &quot;github.com/roblillack/spot/ui&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">func</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Init</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;"> spot</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">MountFn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#C678DD;"> *</span><span style="color:#E5C07B;">spot</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RenderContext</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">spot</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  counter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setCounter</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> spot</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">UseState</span><span style="color:#ABB2BF;">[</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#98C379;"> &quot;int&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  buttonTitle</span><span style="color:#E5C07B;"> :=</span><span style="color:#98C379;"> &quot;点击我!&quot;</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> counter</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   buttonTitle</span><span style="color:#E5C07B;"> =</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Sprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;点击了 </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> 次!&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> &amp;</span><span style="color:#E5C07B;">ui</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Window</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">   Title</span><span style="color:#ABB2BF;">:  </span><span style="color:#98C379;">&quot;你好，世界!&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   Width</span><span style="color:#ABB2BF;">:  </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   Height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">125</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   Children</span><span style="color:#ABB2BF;">: []</span><span style="color:#E5C07B;">spot</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    &amp;</span><span style="color:#E5C07B;">ui</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Button</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">     X</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">150</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">     Title</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">buttonTitle</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">     OnClick</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">      setCounter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#C678DD;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">     },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">   },</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Run</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="常见问题解答" tabindex="-1">常见问题解答 <a class="header-anchor" href="#常见问题解答" aria-label="Permalink to &quot;常见问题解答&quot;">​</a></h3><h4 id="响应式-是什么意思" tabindex="-1">“响应式”是什么意思？ <a class="header-anchor" href="#响应式-是什么意思" aria-label="Permalink to &quot;“响应式”是什么意思？&quot;">​</a></h4><p>在 Spot 的上下文中，“响应式”意味着当应用程序的状态发生变化时，UI 会自动更新。这是通过在状态变化时重新构建一个不可变的组件树实现的，该树可以快速与先前的状态进行比较，以确定需要更新哪些 UI 控件。在 Web 世界中，这个概念通常被称为“虚拟 DOM”，而 Spot 实际上是作为一个实验开始的，目的是通过实现一个类似 React 的桌面 GUI 库，将这个概念引入 Go。</p><p>通过使用响应式模型，开发者不需要担心手动更新 UI。相反，开发者可以专注于应用程序逻辑，并让 Spot 负责更新 UI。</p><h4 id="spot-使用的-原生控件-是什么" tabindex="-1">Spot 使用的“原生控件”是什么？ <a class="header-anchor" href="#spot-使用的-原生控件-是什么" aria-label="Permalink to &quot;Spot 使用的“原生控件”是什么？&quot;">​</a></h4><p>目前，Spot 在 macOS 上使用 Cocoa 后端，在所有其他平台上使用基于 FLTK 的后端。也可以选择在 Mac 上使用 FLTK。计划未来为 Windows 提供更好的支持。</p><h4 id="我可以实施自己的钩子吗" tabindex="-1">我可以实施自己的钩子吗？ <a class="header-anchor" href="#我可以实施自己的钩子吗" aria-label="Permalink to &quot;我可以实施自己的钩子吗？&quot;">​</a></h4><p>是的，就像在 React 中一样，你可以实施自己的钩子。只需创建一个函数，该函数以<code>*spot.RenderContext</code>作为第一个参数，并使用此函数通过调用<code>spot.UseState</code>、<code>spot.UseEffect</code>等来“钩入”Spot 生命周期。这里的惯例是在函数名前加上<code>Use…</code>前缀。</p><h4 id="如何编写自定义组件" tabindex="-1">如何编写自定义组件？ <a class="header-anchor" href="#如何编写自定义组件" aria-label="Permalink to &quot;如何编写自定义组件？&quot;">​</a></h4><p>在 Spot 中将 UI 分成组件有几种不同的方法；有关一些想法，请查看<code>custom-components</code>示例。编写自定义组件的主要方法是创建一个实现<code>spot.Component</code>接口的结构体。这个接口有一个单一的方法，<code>Render(ctx *spot.RenderContext) spot.Component</code>，该方法被调用来渲染组件。像这样创建的组件可以像内置组件一样使用。</p><p>看看示例中的<code>BlinkingButton</code>组件，看看这是怎么做的。</p><h4 id="我可以使用-spot-与提供的不同控件库吗" tabindex="-1">我可以使用 Spot 与提供的不同控件库吗？ <a class="header-anchor" href="#我可以使用-spot-与提供的不同控件库吗" aria-label="Permalink to &quot;我可以使用 Spot 与提供的不同控件库吗？&quot;">​</a></h4><p>可，你只需要创建一些实现<code>spot.Component</code>接口的结构体，并负责管理原生控件。</p><h4 id="我可以使用spot-ui-但是使用不同于-cocoa-或-fltk-的后端吗" tabindex="-1">我可以使用<code>spot/ui</code>，但是使用不同于 Cocoa 或 FLTK 的后端吗？ <a class="header-anchor" href="#我可以使用spot-ui-但是使用不同于-cocoa-或-fltk-的后端吗" aria-label="Permalink to &quot;我可以使用\`spot/ui\`，但是使用不同于 Cocoa 或 FLTK 的后端吗？&quot;">​</a></h4><p>目前，这些是唯一支持的后端。但如果你想添加对另一个后端的支持，请随时创建一个 PR。<em><em>暗示暗示</em></em></p><h4 id="spot-ui和spot有什么区别" tabindex="-1"><code>spot/ui</code>和<code>spot</code>有什么区别？ <a class="header-anchor" href="#spot-ui和spot有什么区别" aria-label="Permalink to &quot;\`spot/ui\`和\`spot\`有什么区别？&quot;">​</a></h4><p><code>spot</code>是提供响应式模型和渲染功能的核心包。它是后端不可知的，并且可以与任何实现<code>spot.Control</code>接口的控件集合一起使用。</p><p><code>spot/ui</code>是一个包，提供了一组预构建的跨平台 GUI 控件，这些控件可以与<code>spot</code>一起使用。</p><h4 id="组件-和-控件-有什么区别" tabindex="-1">“组件”和“控件”有什么区别？ <a class="header-anchor" href="#组件-和-控件-有什么区别" aria-label="Permalink to &quot;“组件”和“控件”有什么区别？&quot;">​</a></h4><p>在 Spot 中，一个组件是一个包含业务逻辑和状态的应用程序的逻辑单元。任何组件都是由其他组件构成的，并且最终可以渲染为一个或多个“控件”。</p><p>一个控件是一种特殊的组件，它被安装到 UI 树中，并在屏幕上表示一个视觉元素。通常，控件由 GUI 后端的原生实现支持，比如按钮、标签或文本输入。</p><h4 id="make-、-render-、-build-、-mount-和-update-在-spot-的上下文中是什么意思" tabindex="-1">“make”、“render”、“build”、“mount”和“update”在 Spot 的上下文中是什么意思？ <a class="header-anchor" href="#make-、-render-、-build-、-mount-和-update-在-spot-的上下文中是什么意思" aria-label="Permalink to &quot;“make”、“render”、“build”、“mount”和“update”在 Spot 的上下文中是什么意思？&quot;">​</a></h4><ul><li><strong>Make</strong>：创建新组件实例的过程。这是通过创建一个实现<code>spot.Component</code>接口的结构体实例的引用或通过调用带有渲染函数的<code>spot.Make</code>来完成的。</li><li><strong>Render</strong>：应用组件的状态到其构建块上，并由此返回另一个组件实例的过程。这是通过调用组件实例上的<code>Render</code>方法来完成的。</li><li><strong>Build</strong>：从组件实例创建新的 UI 树的过程。这是通过递归渲染组件来创建控件树，可以通过调用带有组件实例的<code>spot.Build</code>或带有渲染函数的<code>spot.BuildFn</code>来完成。</li><li><strong>Mount</strong>：从（虚拟的）控件树创建真正的 UI 控件的过程。这是通过在树节点上调用<code>Mount</code>或<code>spot.Mount</code>与组件实例或<code>spot.MountFn</code>与渲染函数来完成的。</li><li><strong>Update</strong>：更新（已安装的）控件树的过程。这是通过在树节点上调用<code>Update</code>来完成的。</li></ul><h3 id="spot-目前没有的特性" tabindex="-1">Spot 目前没有的特性 <a class="header-anchor" href="#spot-目前没有的特性" aria-label="Permalink to &quot;Spot 目前没有的特性&quot;">​</a></h3><ul><li>自动布局</li><li>多个窗口</li><li>模态对话框</li><li>可调整大小的窗口</li><li>菜单栏</li><li>自定义控件</li><li>访问原生控件</li><li>拖放</li><li>国际化</li></ul><h3 id="支持的-ui-控件列表" tabindex="-1">支持的 UI 控件列表 <a class="header-anchor" href="#支持的-ui-控件列表" aria-label="Permalink to &quot;支持的 UI 控件列表&quot;">​</a></h3><p>状态列的说明：❓ 未实现 / 🚧 进行中 / ⚠️ 部分实现 / ✅ 完成</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th><th style="text-align:left;">使用的原生控件</th><th style="text-align:left;">状态</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Button</strong>[7]</td><td style="text-align:left;">简单的按钮，用于启动操作</td><td style="text-align:left;"><strong>Fl_Button</strong>[8] <strong>NSButton</strong>[9]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><strong>Checkbox</strong>[10]</td><td style="text-align:left;">提供用户两种互斥选项选择的控件</td><td style="text-align:left;"><strong>Fl_Check_Button</strong>[11] <strong>NSButton</strong>[12] (<strong>NSButtonTypeSwitch</strong>[13])</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">ComboBox</td><td style="text-align:left;">结合下拉菜单和文本输入的组合</td><td style="text-align:left;">ComboBox NSComboBox</td><td style="text-align:left;">未开始</td></tr><tr><td style="text-align:left;"><strong>Dial</strong>[14]</td><td style="text-align:left;">圆形状态控件</td><td style="text-align:left;"><strong>Fl_Dial</strong>[15] <strong>NSProgressIndicator</strong>[16] （使用 <code>NSCircular</code> 风格）</td><td style="text-align:left;">⚠️</td></tr><tr><td style="text-align:left;"><strong>Dropdown</strong>[17]</td><td style="text-align:left;">下拉菜单，从多个选项中选择单个项目</td><td style="text-align:left;"><strong>Fl_Choice</strong>[18] <strong>NSComboBox</strong>[19]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">Image</td><td style="text-align:left;">图像控件</td><td style="text-align:left;">Image NSImageView</td><td style="text-align:left;">未开始</td></tr><tr><td style="text-align:left;"><strong>Label</strong>[20]</td><td style="text-align:left;">简单、不可编辑的文本标签</td><td style="text-align:left;"><strong>Fl_Box</strong>[21] <strong>NSTextField</strong>[22]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><strong>ListBox</strong>[23]</td><td style="text-align:left;">滚动控件，允许用户从给定列表中选择单个或多个项目</td><td style="text-align:left;"><strong>Fl_Select_Browser</strong>[24]/<strong>Fl_Multi_Browser</strong>[25] <strong>NSTableView</strong>[26]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><strong>ProgressBar</strong>[27]</td><td style="text-align:left;">进度条控件，用于可视化长时间运行操作的进度</td><td style="text-align:left;"><strong>Fl_Progress</strong>[28] <strong>NSProgressIndicator</strong>[29]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><strong>Slider</strong>[30]</td><td style="text-align:left;">水平滑动输入控件</td><td style="text-align:left;"><strong>Fl_Slider</strong>[31] <strong>NSSlider</strong>[32]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><strong>Spinner</strong>[33]</td><td style="text-align:left;">带上升/下按钮的数字输入控件</td><td style="text-align:left;"><strong>Fl_Spinner</strong>[34] <strong>NSTextField</strong>[35]+<strong>NSStepper</strong>[36]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><strong>TextField</strong>[37]</td><td style="text-align:left;">单行文本输入控件</td><td style="text-align:left;"><strong>Fl_Input</strong>[38] <strong>NSTextField</strong>[39]</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">TextView/TextEditor</td><td style="text-align:left;">用于查看/编辑多行文本内容的通用文本框</td><td style="text-align:left;">Text NSTextView</td><td style="text-align:left;">🚧</td></tr><tr><td style="text-align:left;"><strong>Window</strong>[40]</td><td style="text-align:left;">表示屏幕上（顶级）窗口的控件</td><td style="text-align:left;"><strong>Fl_Window</strong>[41] <strong>NSWindow</strong>[42]</td><td style="text-align:left;">✅</td></tr></tbody></table><h3 id="可能的未来后端" tabindex="-1">可能的未来后端 <a class="header-anchor" href="#可能的未来后端" aria-label="Permalink to &quot;可能的未来后端&quot;">​</a></h3><ul><li>原生 Windows 控件：<a href="https://github.com/rodrigocfd/windigo" target="_blank" rel="noreferrer">https://github.com/rodrigocfd/windigo</a></li></ul><h4 id="spot-的未来展望" tabindex="-1">Spot 的未来展望 <a class="header-anchor" href="#spot-的未来展望" aria-label="Permalink to &quot;Spot 的未来展望&quot;">​</a></h4><p>虽然 Spot 目前还不支持自动布局、多窗口、模态对话框等高级功能，但它的潜力巨大。社区正在积极开发，未来可能会支持更多的后端和控件。</p><h3 id="结语" tabindex="-1">结语： <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语：&quot;">​</a></h3><p>Spot 框架的出现，为 Go 语言开发者提供了一个全新的选择。它不仅简化了桌面应用的开发流程，还提高了开发效率。无论你是 Go 语言的新手还是老手，Spot 都值得一试。</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><p>[1] FLTK: <a href="https://fltk.org" target="_blank" rel="noreferrer">https://fltk.org</a></p><p>[2] go-fltk: <a href="https://github.com/pwiecz/go-fltk" target="_blank" rel="noreferrer">https://github.com/pwiecz/go-fltk</a></p><p>[3] a modified version of: <a href="https://github.com/roblillack/gocoa" target="_blank" rel="noreferrer">https://github.com/roblillack/gocoa</a></p><p>[4] gocoa: <a href="https://github.com/mojbro/gocoa" target="_blank" rel="noreferrer">https://github.com/mojbro/gocoa</a></p><p>[5] <code>UseState</code>: <a href="https://pkg.go.dev/github.com/roblillack/spot#UseState" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot#UseState</a></p><p>[6] 支持的 UI 控件列表: #支持的ui控件列表</p><p>[7] Button: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Button" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Button</a></p><p>[8] Fl_Button: <a href="https://www.fltk.org/doc-1.4/classFl__Button.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Button.html</a></p><p>[9] NSButton: <a href="https://developer.apple.com/documentation/appkit/nsbutton" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsbutton</a></p><p>[10] Checkbox: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Checkbox" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Checkbox</a></p><p>[11] Fl_Check_Button: <a href="https://www.fltk.org/doc-1.4/classFl__Check__Button.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Check__Button.html</a></p><p>[12] NSButton: <a href="https://developer.apple.com/documentation/appkit/nsbutton" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsbutton</a></p><p>[13] NSButtonTypeSwitch: <a href="https://developer.apple.com/documentation/appkit/nsbuttontype/nsbuttontypeswitch" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsbuttontype/nsbuttontypeswitch</a></p><p>[14] Dial: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Dial" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Dial</a></p><p>[15] Fl_Dial: <a href="https://www.fltk.org/doc-1.4/classFl__Dial.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Dial.html</a></p><p>[16] NSProgressIndicator: <a href="https://developer.apple.com/documentation/appkit/nsprogressindicator" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsprogressindicator</a></p><p>[17] Dropdown: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Dropdown" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Dropdown</a></p><p>[18] Fl_Choice: <a href="https://www.fltk.org/doc-1.4/classFl__Choice.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Choice.html</a></p><p>[19] NSComboBox: <a href="https://developer.apple.com/documentation/appkit/nscombobox" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nscombobox</a></p><p>[20] Label: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Label" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Label</a></p><p>[21] Fl_Box: <a href="https://www.fltk.org/doc-1.4/classFl__Box.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Box.html</a></p><p>[22] NSTextField: <a href="https://developer.apple.com/documentation/appkit/nstextfield" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nstextfield</a></p><p>[23] ListBox: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#ListBox" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#ListBox</a></p><p>[24] Fl_Select_Browser: <a href="https://www.fltk.org/doc-1.4/classFl__Select__Browser.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Select__Browser.html</a></p><p>[25] Fl_Multi_Browser: <a href="https://www.fltk.org/doc-1.4/classFl__Multi__Browser.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Multi__Browser.html</a></p><p>[26] NSTableView: <a href="https://developer.apple.com/documentation/appkit/nstableview" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nstableview</a></p><p>[27] ProgressBar: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#ProgressBar" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#ProgressBar</a></p><p>[28] Fl_Progress: <a href="https://www.fltk.org/doc-1.4/classFl__Progress.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Progress.html</a></p><p>[29] NSProgressIndicator: <a href="https://developer.apple.com/documentation/appkit/nsprogressindicator" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsprogressindicator</a></p><p>[30] Slider: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Slider" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Slider</a></p><p>[31] Fl_Slider: <a href="https://www.fltk.org/doc-1.4/classFl__Slider.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Slider.html</a></p><p>[32] NSSlider: <a href="https://developer.apple.com/documentation/appkit/nsslider" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsslider</a></p><p>[33] Spinner: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Spinner" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Spinner</a></p><p>[34] Fl_Spinner: <a href="https://www.fltk.org/doc-1.4/classFl__Spinner.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Spinner.html</a></p><p>[35] NSTextField: <a href="https://developer.apple.com/documentation/appkit/nstextfield" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nstextfield</a></p><p>[36] NSStepper: <a href="https://developer.apple.com/documentation/appkit/nsstepper" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nsstepper</a></p><p>[37] TextField: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#TextField" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#TextField</a></p><p>[38] Fl_Input: <a href="https://www.fltk.org/doc-1.4/classFl__Input.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Input.html</a></p><p>[39] NSTextField: <a href="https://developer.apple.com/documentation/appkit/nstextfield" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nstextfield</a></p><p>[40] Window: <a href="https://pkg.go.dev/github.com/roblillack/spot/ui#Window" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/roblillack/spot/ui#Window</a></p><p>[41] Fl_Window: <a href="https://www.fltk.org/doc-1.4/classFl__Window.html" target="_blank" rel="noreferrer">https://www.fltk.org/doc-1.4/classFl__Window.html</a></p><p>[42] NSWindow: <a href="https://developer.apple.com/documentation/appkit/nswindow" target="_blank" rel="noreferrer">https://developer.apple.com/documentation/appkit/nswindow</a></p><h1 id="web框架" tabindex="-1">Web框架 <a class="header-anchor" href="#web框架" aria-label="Permalink to &quot;Web框架&quot;">​</a></h1><h2 id="fiber-号称golang最快的web框架" tabindex="-1">Fiber：号称Golang最快的Web框架 <a class="header-anchor" href="#fiber-号称golang最快的web框架" aria-label="Permalink to &quot;Fiber：号称Golang最快的Web框架&quot;">​</a></h2><p><strong>Github地址</strong>：<a href="https://github.com/gofiber/fiber" target="_blank" rel="noreferrer">https://github.com/gofiber/fiber</a></p><p>Fiber是在Go最快的HTTP引擎Fasthttp之上构建的Go web框架。它的设计目的是在考虑到零内存分配和性能的情况下简化快速开发。</p><h3 id="它的特性" tabindex="-1">它的特性： <a class="header-anchor" href="#它的特性" aria-label="Permalink to &quot;它的特性：&quot;">​</a></h3><ul><li>稳健的路由</li><li>提供静态文件</li><li>极致性能</li><li>内存占用空间低</li><li>API终点</li><li>中间件和Next支持</li><li>快速服务器端编程</li><li>模板引擎</li><li>WebSocket支持</li><li>Socket.io支持</li><li>服务器发送的事件</li><li>速率限制器</li></ul><p>Fiber的灵感来源于互联网上最流行的web框架Express。我们结合了Express的易用性和Go的原始性能。如果您曾经在Node.js中实现过web应用程序（使用Express或类似工具），那么许多方法和原理对您来说都是非常常见的。</p><p>使用Fiber注意事项，由于Fiber使用了unsafe，库可能并不总是与最新的Go版本兼容。Fiber3.0.0已通过Go版本1.21和1.22的测试。Fiber v3还在开发中，对于生产使用还不稳定，推荐选择Fiber v2。如果你想尝鲜，可以选择Fiber v3。Fiber与net/http接口不兼容，这意味着你将无法使用像gqlgen、go swagger或任何其他属于net/http生态系统的项目。</p><h3 id="hello-world演示项目" tabindex="-1">Hello World演示项目： <a class="header-anchor" href="#hello-world演示项目" aria-label="Permalink to &quot;Hello World演示项目：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>package main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import (</span></span>
<span class="line"><span>    &quot;log&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &quot;github.com/gofiber/fiber/v3&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func main() {</span></span>
<span class="line"><span>    // Initialize a new Fiber app</span></span>
<span class="line"><span>    app := fiber.New()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // Define a route for the GET method on the root path &#39;/&#39;</span></span>
<span class="line"><span>    app.Get(&quot;/&quot;, func(c fiber.Ctx) error {</span></span>
<span class="line"><span>        // Send a string response to the client</span></span>
<span class="line"><span>        return c.SendString(&quot;Hello, World 👋!&quot;)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // Start the server on port 3000</span></span>
<span class="line"><span>    log.Fatal(app.Listen(&quot;:3000&quot;))</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>让我们看下它的路由的写法：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">func</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> fiber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">New</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // GET /api/register</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/*&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#E5C07B;"> fiber</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">error</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        msg</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Sprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;✋ </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; ✋ register</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // GET /flights/LAX-SFO</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/flights/:from-:to&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#E5C07B;"> fiber</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">error</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        msg</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Sprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;💸 From: </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">, To: </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;from&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;to&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; 💸 From: LAX, To: SFO</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // GET /dictionary.txt</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/:file.:ext&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#E5C07B;"> fiber</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">error</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        msg</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Sprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;📃 </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">.</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ext&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; 📃 dictionary.txt</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // GET /john/75</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/:name/:age/:gender?&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#E5C07B;"> fiber</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">error</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        msg</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Sprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;👴 </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;"> is </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;"> years old&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; 👴 john is 75 years old</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // GET /john</span></span>
<span class="line"><span style="color:#E06C75;">    app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/:name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#E5C07B;"> fiber</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">error</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        msg</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Sprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello, </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;"> 👋!&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Params</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; Hello john 👋!</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Fatal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:3000&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>Fiber是一个不错的Go Web框架，它有完善的文档，丰富的功能，极高的性能。</p><h2 id="gin-http-web-框架" tabindex="-1">Gin：HTTP Web 框架 <a class="header-anchor" href="#gin-http-web-框架" aria-label="Permalink to &quot;Gin：HTTP Web 框架&quot;">​</a></h2><p><strong>GitHub地址</strong>：<a href="https://github.com/gin-gonic/gin" target="_blank" rel="noreferrer">https://github.com/gin-gonic/gin</a></p><p>Gin 是一个用 Go (Golang) 编写的 HTTP Web 框架。它具有类似 Martini 的 API，但性能比 Martini 快 40 倍。如果你需要极好的性能，使用 Gin 吧。</p><p>它的特性如下：</p><ul><li>快速，基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</li><li>支持中间件传入的 HTTP 请求，可以由一系列中间件和最终操作来处理。例如：Logger，Authorization，GZIP，最终操作 DB。</li><li>Crash 处理，Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</li><li>JSON 验证，Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</li><li>路由组可更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</li><li>错误管理，Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</li><li>内置渲染，Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</li><li>可扩展性，Gin可通过中间件进行扩展。</li></ul><p>Gin要求Golang版本1.13及以上。要使用Gin，需要先安装 Go 并设置 Go 工作区。</p><h3 id="_1-下载并安装-gin" tabindex="-1">1.下载并安装 gin： <a class="header-anchor" href="#_1-下载并安装-gin" aria-label="Permalink to &quot;1.下载并安装 gin：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>$ go get -u github.com/gin-gonic/gin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-将-gin-引入到代码中" tabindex="-1">2.将 gin 引入到代码中： <a class="header-anchor" href="#_2-将-gin-引入到代码中" aria-label="Permalink to &quot;2.将 gin 引入到代码中：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import &quot;github.com/gin-gonic/gin&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-可选-如果使用诸如-http-statusok-之类的常量-则需要引入-net-http-包" tabindex="-1">3.（可选）如果使用诸如 <code>http.StatusOK</code> 之类的常量，则需要引入 <code>net/http</code> 包： <a class="header-anchor" href="#_3-可选-如果使用诸如-http-statusok-之类的常量-则需要引入-net-http-包" aria-label="Permalink to &quot;3.（可选）如果使用诸如 \`http.StatusOK\` 之类的常量，则需要引入 \`net/http\` 包：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import &quot;net/http&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="gin一个简单的例子" tabindex="-1">Gin一个简单的例子： <a class="header-anchor" href="#gin一个简单的例子" aria-label="Permalink to &quot;Gin一个简单的例子：&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>package main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import &quot;github.com/gin-gonic/gin&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func main() {</span></span>
<span class="line"><span>	r := gin.Default()</span></span>
<span class="line"><span>	r.GET(&quot;/ping&quot;, func(c *gin.Context) {</span></span>
<span class="line"><span>		c.JSON(200, gin.H{</span></span>
<span class="line"><span>			&quot;message&quot;: &quot;pong&quot;,</span></span>
<span class="line"><span>		})</span></span>
<span class="line"><span>	})</span></span>
<span class="line"><span>	r.Run() // 监听并在 0.0.0.0:8080 上启动服务</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Gin是Golang中使用的比较多的Web框架，也比较有名，GitHub Star也很高。在招聘中我们会经常看到招聘要求中提到这么一句，工作中使用过Gin。</p><h1 id="游戏开发" tabindex="-1">游戏开发 <a class="header-anchor" href="#游戏开发" aria-label="Permalink to &quot;游戏开发&quot;">​</a></h1><h2 id="go3d-go语言游戏方向的高性能2d-3d数学库" tabindex="-1">go3d：Go语言游戏方向的高性能2D/3D数学库 <a class="header-anchor" href="#go3d-go语言游戏方向的高性能2d-3d数学库" aria-label="Permalink to &quot;go3d：Go语言游戏方向的高性能2D/3D数学库&quot;">​</a></h2><p><code>go3d</code>的官方文档: <a href="https://pkg.go.dev/github.com/ungerik/go3d" target="_blank" rel="noreferrer">https://pkg.go.dev/github.com/ungerik/go3d</a></p><p>在面向性能的编程世界中，<code>go3d</code>是为Go语言提供的一款2D/3D数学库，致力于提高图形计算的效率与速度。</p><p>适用于那些需要进行向量、矩阵等数学计算以实现图形处理的应用程序，<code>go3d</code>提供了一套丰富的API，以支持高效的数学运算。</p><p>下面，我们将深入了解这个库的主要特性、结构和使用方式，以及如何在项目中有效利用它。</p><h3 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h3><ul><li><strong>高性能设计</strong>：<code>go3d</code>库主要关注于性能，通过优化算法和数据结构来减少计算时间和内存消耗。</li><li><strong>详尽的数学类型支持</strong>：支持2D和3D空间内的基础和高级数学运算，包括向量（vec2, vec3, vec4）和矩阵（mat2, mat3, mat4）的操作。</li><li><strong>数据类型优化</strong>：包内包含<code>float64</code>子目录，使用<code>float64</code>值代替<code>float32</code>以支持更精确的数学运算。</li><li><strong>OpenGL和DirectX的友好支持</strong>：矩阵按列组织，符合OpenGL的期望。对于DirectX期望的“按行”矩阵，可通过<code>Transpose()</code>方法转换。</li><li><strong>链式调用</strong>：很多方法返回结构体指针，便于链式调用，以提高代码的编写效率。</li></ul><h3 id="核心组件分析" tabindex="-1">核心组件分析 <a class="header-anchor" href="#核心组件分析" aria-label="Permalink to &quot;核心组件分析&quot;">​</a></h3><p><strong>Vector（向量）</strong></p><p><code>go3d</code>提供了一套丰富的向量操作API。举个例子，<code>vec3</code>是3D向量类型的包，拥有如下方法和函数：</p><ul><li>基础操作：加法（<code>Add</code>）、缩放（<code>Scale</code>）</li><li>进阶运算：点积（<code>Dot</code>）</li></ul><p>示例代码：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>a := vec3.Zero    // 创建一个0向量</span></span>
<span class="line"><span>b := vec3.UnitX   // X单位向量</span></span>
<span class="line"><span>a.Add(&amp;b).Scale(5) // 链式调用：向a加上b后，再缩放5倍</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Matrix（矩阵）</strong></p><p>矩阵操作是<code>go3d</code>的另一大特色，提供了包括矩阵乘法、转置等基础与进阶操作。工具库以列为矩阵的组织形式，这一点在与OpenGL的结合应用中特别有用。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><strong>游戏开发</strong>：在游戏图形处理中，经常需要进行大量的向量和矩阵运算。<code>go3d</code>针对性能优化的设计，使其成为游戏开发中理想的数学库选项。</li><li><strong>图形软件</strong>：软件中的图形变换、坐标映射等操作，都能通过<code>go3d</code>提供的API进行高效处理。</li><li><strong>科学计算</strong>：虽然主要针对图形计算，但<code>go3d</code>因其高性能特性，也适用于需要大量数学运算的科学计算场景。</li></ul><h3 id="开始使用" tabindex="-1">开始使用 <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用&quot;">​</a></h3><p>首先，您需要将<code>go3d</code>库包含到您的Go项目中。通过执行下面的命令，可以轻松导入：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>go get github.com/ungerik/go3d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后，根据您的计算需求选择相应的包和方法进行开发。详细的使用说明和API文档，可以参考**<code>go3d</code>的官方文档**[1]。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>go3d</code>通过其高性能的设计和对2D/3D数学运算的广泛支持，为Go语言在图形计算领域提供了强有力的工具。无论是游戏开发还是图形软件的设计，<code>go3d</code>都能帮您高效地解决数学运算的需求，让您的项目更加出色。</p>`,160),p=[t];function r(c,i,d,B,b,u){return a(),n("div",null,p)}const h=s(o,[["render",r]]);export{y as __pageData,h as default};
