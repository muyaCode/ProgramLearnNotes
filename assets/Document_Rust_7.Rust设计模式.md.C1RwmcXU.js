import{_ as s,c as n,o as a,a3 as l}from"./chunks/framework.zGi9i9Bf.js";const d=JSON.parse('{"title":"7.Rust设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Rust/7.Rust设计模式.md","filePath":"Document/Rust/7.Rust设计模式.md","lastUpdated":1714384733000}'),p={name:"Document/Rust/7.Rust设计模式.md"},e=l(`<h1 id="_7-rust设计模式" tabindex="-1">7.Rust设计模式 <a class="header-anchor" href="#_7-rust设计模式" aria-label="Permalink to &quot;7.Rust设计模式&quot;">​</a></h1><p>文章：<a href="https://blog.csdn.net/weixin_47754149/category_11944106.html" target="_blank" rel="noreferrer">Rust设计模式_广龙宇的博客-CSDN博客</a></p><h2 id="rust-设计模式书籍-《rust-design-patterns》" tabindex="-1">Rust 设计模式书籍：《Rust Design Patterns》 <a class="header-anchor" href="#rust-设计模式书籍-《rust-design-patterns》" aria-label="Permalink to &quot;Rust 设计模式书籍：《Rust Design Patterns》&quot;">​</a></h2><p>Rust 进阶书籍：《Rust Design Patterns》。Rust 作为一门现代系统级编程语言，以其独特的语言特性和安全性保证，越来越受到开发者的青睐。而设计模式作为软件开发中久经考验的最佳实践，在 Rust 中也有着广泛的应用。</p><p>书籍在线：<a href="https://rust-unofficial.github.io/patterns/" target="_blank" rel="noreferrer">Introduction - Rust Design Patterns (rust-unofficial.github.io)</a></p><p>开源地址：<a href="https://github.com/rust-unofficial/patterns" target="_blank" rel="noreferrer">https://github.com/rust-unofficial/patterns</a></p><h3 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>如果你已经掌握了 Rust 的基础语法，想要进一步提高代码质量，那么学习 Rust 设计模式是非常有必要的。《Rust Design Patterns》这本书由 Rust 社区的开发者们共同编写，汇集了 Rust 中常用的设计模式、反模式和惯用法，是 Rust 进阶学习的必备书籍。</p><h3 id="创作背景" tabindex="-1">创作背景 <a class="header-anchor" href="#创作背景" aria-label="Permalink to &quot;创作背景&quot;">​</a></h3><p>《Rust Design Patterns》的作者们都是 Rust 社区的活跃开发者，他们在日常的开发工作中积累了大量的 Rust 编程经验。因此，这本书不仅包含了传统的面向对象设计模式，还有很多 Rust 特有的模式和最佳实践。</p><h3 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h3><ul><li>涵盖了 Rust 中常用的设计模式、反模式和惯用法</li><li>每个模式都有详细的代码示例和说明</li><li>完全开源，托管在 GitHub 上，方便阅读和贡献</li><li>有多种语言的翻译版本</li></ul><h3 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h3><p>我们来看一个简单的示例，感受一下 Rust 中的设计模式。下面是一个使用建造者模式（Builder Pattern）的例子：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 产品类</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Product</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    price</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 其他字段...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 建造者类</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> ProductBuilder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    price</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 其他字段...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> ProductBuilder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 创建一个新的建造者实例</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">ProductBuilder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ProductBuilder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            price</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0.0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 其他字段的默认值...</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置价格</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> price</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">price</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">ProductBuilder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.price </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> price</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 创建产品实例</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> build</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Product</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Product</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.name,</span></span>
<span class="line"><span style="color:#E06C75;">            price</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.price,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 其他字段...</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 使用建造者模式创建产品</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> product</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ProductBuilder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;iPhone&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">price</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4999.0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Product: {}, Price: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">product</span><span style="color:#ABB2BF;">.name, </span><span style="color:#E06C75;">product</span><span style="color:#ABB2BF;">.price);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>在上面的例子中，我们定义了一个 <code>Product</code> 结构体表示产品，和一个 <code>ProductBuilder</code> 结构体作为产品的建造者。建造者提供了一系列方法用于设置产品的属性，最后通过 <code>build()</code> 方法创建产品实例。这样可以让产品的创建过程更加灵活，避免了构造函数参数过多的问题。</p><p>编译并运行上面的代码，将会输出：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Product:</span><span style="color:#98C379;"> iPhone,</span><span style="color:#98C379;"> Price:</span><span style="color:#D19A66;"> 4999</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>是不是感觉代码结构更加清晰了呢？Rust 中的设计模式还有很多，感兴趣的读者可以去详细了解。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>《Rust Design Patterns》是一本非常实用的 Rust 进阶书籍，介绍了 Rust 中常用的设计模式和最佳实践。无论你是 Rust 初学者还是有经验的开发者，都可以从这本书中学到很多有用的知识。</p>`,21),r=[e];function o(t,c,i,B,u,y){return a(),n("div",null,r)}const m=s(p,[["render",o]]);export{d as __pageData,m as default};
